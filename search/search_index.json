{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>30 days of JavaScript programming challenge is a step-by-step guide to learn JavaScript programming language in 30 days. This challenge may take more than 100 days, please just follow your own pace.</p> <ul> <li>Material source: 30 days of JavaScript</li> <li>Author: Asabeneh Yetayeh</li> <li>Site creator: Devinesia</li> <li>Mas2 gans: www.masgalih.net</li> </ul>"},{"location":"#support","title":"Support","text":"<p>You can support the author to produce more educational materials</p> <p></p>"},{"location":"#about-brave-teknologi","title":"About Brave Teknologi","text":"<p>Brave Technology is your trusted IT solutions provider with over four years of experience. We specialize in software and website development, offering professional IT consulting. With a track record of serving over ten clients across various industries, we tailor solutions to your specific needs.</p> <p>www.braveteknologi.com</p>"},{"location":"01-day/","title":"\ud83d\udcd4 Day 1","text":""},{"location":"01-day/#introduction","title":"Introduction","text":"<p>Congratulations on deciding to participate in 30 days of JavaScript programming challenge. In this challenge you will learn everything you need to be a JavaScript programmer, and in general, the whole concept of programming. In the end of the challenge you will get a 30DaysOfJavaScript programming challenge completion certificate. In case you need help or if you would like to help others you may join the telegram group.</p> <p>A 30DaysOfJavaScript challenge is a guide for both beginners and advanced JavaScript developers. Welcome to JavaScript. JavaScript is the language of the web. I enjoy using and teaching JavaScript and I hope you will do so too.</p> <p>In this step by step JavaScript challenge, you will learn JavaScript, the most popular programming language in the history of mankind. JavaScript is used to add interactivity to websites, to develop mobile apps, desktop applications, games and nowadays JavaScript can be used for machine learning and AI. JavaScript (JS) has increased in popularity in recent years and has been the leading programming language for six consecutive years and is the most used programming language on Github.</p>"},{"location":"01-day/#requirements","title":"Requirements","text":"<p>No prior knowledge of programming is required to follow this challenge. You need only:</p> <ol> <li>Motivation</li> <li>A computer</li> <li>Internet</li> <li>A browser</li> <li>A code editor</li> </ol>"},{"location":"01-day/#setup","title":"Setup","text":"<p>I believe you have the motivation and a strong desire to be a developer, a computer and Internet. If you have those, then you have everything to get started.</p>"},{"location":"01-day/#install-nodejs","title":"Install Node.js","text":"<p>You may not need Node.js right now but you may need it for later. Install node.js.</p> <p></p> <p>After downloading double click and install</p> <p></p> <p>We can check if node is installed on our local machine by opening our device terminal or command prompt.</p> <pre><code>asabeneh $ node -v\nv12.14.0\n</code></pre> <p>When making this tutorial I was using Node version 12.14.0, but now the recommended version of Node.js for download is v14.17.6, by the time you use this material you may have a higher Node.js version.</p>"},{"location":"01-day/#browser","title":"Browser","text":"<p>There are many browsers out there. However, I strongly recommend Google Chrome.</p>"},{"location":"01-day/#installing-google-chrome","title":"Installing Google Chrome","text":"<p>Install Google Chrome if you do not have one yet. We can write small JavaScript code on the browser console, but we do not use the browser console to develop applications.</p> <p></p>"},{"location":"01-day/#opening-google-chrome-console","title":"Opening Google Chrome Console","text":"<p>You can open Google Chrome console either by clicking three dots at the top right corner of the browser, selecting More tools -&gt; Developer tools or using a keyboard shortcut. I prefer using shortcuts.</p> <p></p> <p>To open the Chrome console using a keyboard shortcut.</p> <pre><code>Mac\nCommand+Option+J\n\nWindows/Linux:\nCtl+Shift+J\n</code></pre> <p></p> <p>After you open the Google Chrome console, try to explore the marked buttons. We will spend most of the time on the Console. The Console is the place where your JavaScript code goes. The Google Console V8 engine changes your JavaScript code to machine code. Let us write a JavaScript code on the Google Chrome console:</p> <p></p>"},{"location":"01-day/#writing-code-on-browser-console","title":"Writing Code on Browser Console","text":"<p>We can write any JavaScript code on the Google console or any browser console. However, for this challenge, we only focus on Google Chrome console. Open the console using:</p> <pre><code>Mac\nCommand+Option+I\n\nWindows:\nCtl+Shift+I\n</code></pre>"},{"location":"01-day/#consolelog","title":"Console.log","text":"<p>To write our first JavaScript code, we used a built-in function console.log(). We passed an argument as input data, and the function displays the output. We passed <code>'Hello, World'</code> as input data or argument in the console.log() function.</p> <pre><code>console.log('Hello, World!')\n</code></pre>"},{"location":"01-day/#consolelog-with-multiple-arguments","title":"Console.log with Multiple Arguments","text":"<p>The <code>console.log()</code> function can take multiple parameters separated by commas. The syntax looks like as follows:<code>console.log(param1, param2, param3)</code></p> <p></p> <pre><code>console.log('Hello', 'World', '!')\nconsole.log('HAPPY', 'NEW', 'YEAR', 2020)\nconsole.log('Welcome', 'to', 30, 'Days', 'Of', 'JavaScript')\n</code></pre> <p>As you can see from the snippet code above, <code>console.log()</code> can take multiple arguments.</p> <p>Congratulations! You wrote your first JavaScript code using <code>console.log()</code>.</p>"},{"location":"01-day/#comments","title":"Comments","text":"<p>We can add comments to our code. Comments are very important to make code more readable and to leave remarks in our code. JavaScript does not execute the comment part of our code. In JavaScript, any text line starting with // in JavaScript is a comment, and anything enclosed like this <code>//</code> is also a comment.</p> <p>Example: Single Line Comment</p> <pre><code>// This is the first comment  \n// This is the second comment  \n// I am a single line comment\n</code></pre> <p>Example: Multiline Comment</p> <pre><code>/*\nThis is a multiline comment  \n Multiline comments can take multiple lines  \n JavaScript is the language of the web  \n */\n</code></pre>"},{"location":"01-day/#syntax","title":"Syntax","text":"<p>Programming languages are similar to human languages. English or many other language uses words, phrases, sentences, compound sentences and other more to convey a meaningful message. The English meaning of syntax is the arrangement of words and phrases to create well-formed sentences in a language. The technical definition of syntax is the structure of statements in a computer language. Programming languages have syntax. JavaScript is a programming language and like other programming languages it has its own syntax. If we do not write a syntax that JavaScript understands, it will raise different types of errors. We will explore different kinds of JavaScript errors later. For now, let us see syntax errors.</p> <p></p> <p>I made a deliberate mistake. As a result, the console raises syntax errors. Actually, the syntax is very informative. It informs what type of mistake was made. By reading the error feedback guideline, we can correct the syntax and fix the problem. The process of identifying and removing errors from a program is called debugging. Let us fix the errors:</p> <pre><code>console.log('Hello, World!')\nconsole.log('Hello, World!')\n</code></pre> <p>So far, we saw how to display text using the <code>console.log()</code>. If we are printing text or string using <code>console.log()</code>, the text has to be inside the single quotes, double quotes, or a backtick. Example:</p> <pre><code>console.log('Hello, World!')\nconsole.log(\"Hello, World!\")\nconsole.log(`Hello, World!`)\n</code></pre>"},{"location":"01-day/#arithmetics","title":"Arithmetics","text":"<p>Now, let us practice more writing JavaScript codes using <code>console.log()</code> on Google Chrome console for number data types. In addition to the text, we can also do mathematical calculations using JavaScript. Let us do the following simple calculations. It is possible to write JavaScript code on Google Chrome console can directly without the <code>console.log()</code> function. However, it is included in this introduction because most of this challenge would be taking place in a text editor where the usage of the function would be mandatory. You can play around directly with instructions on the console.</p> <p></p> <pre><code>console.log(2 + 3) // Addition\nconsole.log(3 - 2) // Subtraction\nconsole.log(2 * 3) // Multiplication\nconsole.log(3 / 2) // Division\nconsole.log(3 % 2) // Modulus - finding remainder\nconsole.log(3 ** 2) // Exponentiation 3 ** 2 == 3 * 3\n</code></pre>"},{"location":"01-day/#code-editor","title":"Code Editor","text":"<p>We can write our codes on the browser console, but it won't be for bigger projects. In a real working environment, developers use different code editors to write their codes. In this 30 days of JavaScript challenge, we will be using Visual Studio Code.</p>"},{"location":"01-day/#installing-visual-studio-code","title":"Installing Visual Studio Code","text":"<p>Visual Studio Code is a very popular open-source text editor. I would recommend to download Visual Studio Code, but if you are in favor of other editors, feel free to follow with what you have.</p> <p></p> <p>If you installed Visual Studio Code, let us start using it.</p>"},{"location":"01-day/#how-to-use-visual-studio-code","title":"How to Use Visual Studio Code","text":"<p>Open the Visual Studio Code by double-clicking its icon. When you open it, you will get this kind of interface. Try to interact with the labeled icons.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"01-day/#adding-javascript-to-a-web-page","title":"Adding JavaScript to a Web Page","text":"<p>JavaScript can be added to a web page in three different ways:</p> <ul> <li>Inline script</li> <li>Internal script</li> <li>External script</li> <li>Multiple External scripts</li> </ul> <p>The following sections show different ways of adding JavaScript code to your web page.</p>"},{"location":"01-day/#inline-script","title":"Inline Script","text":"<p>Create a project folder on your desktop or in any location, name it 30DaysOfJS and create an <code>index.html</code> file in the project folder. Then paste the following code and open it in a browser, for example Chrome.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;30DaysOfScript:Inline Script&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;button onclick=\"alert('Welcome to 30DaysOfJavaScript!')\"&gt;Click Me&lt;/button&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Now, you just wrote your first inline script. We can create a pop up alert message using the <code>alert()</code> built-in function.</p>"},{"location":"01-day/#internal-script","title":"Internal Script","text":"<p>The internal script can be written in the <code>head</code> or the <code>body</code>, but it is preferred to put it on the body of the HTML document. First, let us write on the head part of the page.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;30DaysOfScript:Internal Script&lt;/title&gt;\n    &lt;script&gt;\n      console.log('Welcome to 30DaysOfJavaScript')\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>This is how we write an internal script most of the time. Writing the JavaScript code in the body section is the most preferred option. Open the browser console to see the output from the <code>console.log()</code>.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;30DaysOfScript:Internal Script&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;button onclick=\"alert('Welcome to 30DaysOfJavaScript!');\"&gt;Click Me&lt;/button&gt;\n    &lt;script&gt;\n      console.log('Welcome to 30DaysOfJavaScript')\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Open the browser console to see the output from the <code>console.log()</code>.</p> <p></p>"},{"location":"01-day/#external-script","title":"External Script","text":"<p>Similar to the internal script, the external script link can be on the header or body, but it is preferred to put it in the body. First, we should create an external JavaScript file with .js extension. All files ending with .js extension are JavaScript files. Create a file named introduction.js inside your project directory and write the following code and link this .js file at the bottom of the body.</p> <pre><code>console.log('Welcome to 30DaysOfJavaScript')\n</code></pre> <p>External scripts in the head:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;30DaysOfJavaScript:External script&lt;/title&gt;\n    &lt;script src=\"introduction.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>External scripts in the body:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;30DaysOfJavaScript:External script&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;!-- JavaScript external link could be in the header or in the body --&gt; \n    &lt;!-- Before the closing tag of the body is the recommended place to put the external JavaScript script --&gt;\n    &lt;script src=\"introduction.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Open the browser console to see the output of the <code>console.log()</code>.</p>"},{"location":"01-day/#multiple-external-scripts","title":"Multiple External Scripts","text":"<p>We can also link multiple external JavaScript files to a web page. Create a <code>helloworld.js</code> file inside the 30DaysOfJS folder and write the following code.</p> <pre><code>console.log('Hello, World!')\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;Multiple External Scripts&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;script src=\"./helloworld.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"./introduction.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Your main.js file should be below all other scripts. It is very important to remember this.</p> <p></p>"},{"location":"01-day/#introduction-to-data-types","title":"Introduction to Data types","text":"<p>In JavaScript and also other programming languages, there are different types of data types. The following are JavaScript primitive data types: String, Number, Boolean, undefined, Null, and Symbol.</p>"},{"location":"01-day/#numbers","title":"Numbers","text":"<ul> <li>Integers: Integer (negative, zero and positive) numbers   Example:   ... -3, -2, -1, 0, 1, 2, 3 ...</li> <li>Float-point numbers: Decimal number   Example   ... -3.5, -2.25, -1.0, 0.0, 1.1, 2.2, 3.5 ...</li> </ul>"},{"location":"01-day/#strings","title":"Strings","text":"<p>A collection of one or more characters between two single quotes, double quotes, or backticks.</p> <p>Example:</p> <pre><code>'a'\n'Asabeneh'\n\"Asabeneh\"\n'Finland'\n'JavaScript is a beautiful programming language'\n'I love teaching'\n'I hope you are enjoying the first day'\n`We can also create a string using a backtick`\n'A string could be just as small as one character or as big as many pages'\n'Any data type under a single quote, double quote or backtick is a string'\n</code></pre>"},{"location":"01-day/#booleans","title":"Booleans","text":"<p>A boolean value is either True or False. Any comparisons returns a boolean value, which is either true or false.</p> <p>A boolean data type is either a true or false value.</p> <p>Example:</p> <pre><code>true // if the light is on, the value is true\nfalse // if the light is off, the value is false\n</code></pre>"},{"location":"01-day/#undefined","title":"Undefined","text":"<p>In JavaScript, if we don't assign a value to a variable, the value is undefined. In addition to that, if a function is not returning anything, it returns undefined.</p> <pre><code>let firstName\nconsole.log(firstName) // undefined, because it is not assigned to a value yet\n</code></pre>"},{"location":"01-day/#null","title":"Null","text":"<p>Null in JavaScript means an empty value.</p> <pre><code>let emptyValue = null\n</code></pre>"},{"location":"01-day/#checking-data-types","title":"Checking Data Types","text":"<p>To check the data type of a certain variable, we use the typeof operator. See the following example.</p> <pre><code>console.log(typeof 'Asabeneh') // string\nconsole.log(typeof 5) // number\nconsole.log(typeof true) // boolean\nconsole.log(typeof null) // object type\nconsole.log(typeof undefined) // undefined\n</code></pre>"},{"location":"01-day/#comments-again","title":"Comments Again","text":"<p>Remember that commenting in JavaScript is similar to other programming languages. Comments are important in making your code more readable. There are two ways of commenting:</p> <ul> <li>Single line commenting</li> <li>Multiline commenting</li> </ul> <pre><code>// commenting the code itself with a single comment\n// let firstName = 'Asabeneh'; single line comment\n// let lastName = 'Yetayeh'; single line comment\n</code></pre> <p>Multiline commenting:</p> <pre><code>/*\n  let location = 'Helsinki';\n  let age = 100;\n  let isMarried = true;\n  This is a Multiple line comment\n*/\n</code></pre>"},{"location":"01-day/#variables","title":"Variables","text":"<p>Variables are containers of data. Variables are used to store data in a memory location. When a variable is declared, a memory location is reserved. When a variable is assigned to a value (data), the memory space will be filled with that data. To declare a variable, we use var, let, or const keywords.</p> <p>For a variable that changes at a different time, we use let. If the data does not change at all, we use const. For example, PI, country name, gravity do not change, and we can use const. We will not use var in this challenge and I don't recommend you to use it. It is error prone way of declaring variable it has lots of leak. We will talk more about var, let, and const in detail in other sections (scope). For now, the above explanation is enough.</p> <p>A valid JavaScript variable name must follow the following rules:</p> <ul> <li>A JavaScript variable name should not begin with a number.</li> <li>A JavaScript variable name does not allow special characters except dollar sign and underscore.</li> <li>A JavaScript variable name follows a camelCase convention.</li> <li>A JavaScript variable name should not have space between words.</li> </ul> <p>The following are examples of valid JavaScript variables.</p> <pre><code>firstName\nlastName\ncountry\ncity\ncapitalCity\nage\nisMarried\n\nfirst_name\nlast_name\nis_married\ncapital_city\n\nnum1\nnum_1\n_num_1\n$num1\nyear2020\nyear_2020\n</code></pre> <p>The first and second variables on the list follows the camelCase convention of declaring in JavaScript. In this material, we will use camelCase variables(camelWithOneHump). We use CamelCase(CamelWithTwoHump) to declare classes, we will discuss about classes and objects in other section.</p> <p>Example of invalid variables:</p> <pre><code>  first-name\n  1_num\n  num_#_1\n</code></pre> <p>Let us declare variables with different data types. To declare a variable, we need to use let or const keyword before the variable name. Following the variable name, we write an equal sign (assignment operator), and a value(assigned data).</p> <pre><code>// Syntax\nlet nameOfVariable = value\n</code></pre> <p>The nameOfVriable is the name that stores different data of value. See below for detail examples.</p> <p>Examples of declared variables</p> <pre><code>// Declaring different variables of different data types\nlet firstName = 'Asabeneh' // first name of a person\nlet lastName = 'Yetayeh' // last name of a person\nlet country = 'Finland' // country\nlet city = 'Helsinki' // capital city\nlet age = 100 // age in years\nlet isMarried = true\n\nconsole.log(firstName, lastName, country, city, age, isMarried)\n</code></pre> <pre><code>Asabeneh Yetayeh Finland Helsinki 100 true\n</code></pre> <pre><code>// Declaring variables with number values\nlet age = 100 // age in years\nconst gravity = 9.81 // earth gravity  in m/s2\nconst boilingPoint = 100 // water boiling point, temperature in \u00b0C\nconst PI = 3.14 // geometrical constant\nconsole.log(gravity, boilingPoint, PI)\n</code></pre> <pre><code>9.81 100 3.14\n</code></pre> <pre><code>// Variables can also be declaring in one line separated by comma, however I recommend to use a seperate line to make code more readble\nlet name = 'Asabeneh', job = 'teacher', live = 'Finland'\nconsole.log(name, job, live)\n</code></pre> <pre><code>Asabeneh teacher Finland\n</code></pre> <p>When you run index.html file in the 01-Day folder you should get this:</p> <p></p> <p>\ud83c\udf15 You are amazing! You have just completed day 1 challenge and you are on your way to greatness. Now do some exercises for your brain and muscle.</p>"},{"location":"01-day/#day-1-exercises","title":"\ud83d\udcbb Day 1: Exercises","text":"<ol> <li>Write a single line comment which says, comments can make code readable</li> <li>Write another single comment which says, Welcome to 30DaysOfJavaScript</li> <li> <p>Write a multiline comment which says, comments can make code readable, easy to reuse and informative</p> </li> <li> <p>Create a variable.js file and declare variables and assign string, boolean, undefined and null data types</p> </li> <li>Create datatypes.js file and use the JavaScript typeof operator to check different data types. Check the data type of each variable</li> <li>Declare four variables without assigning values</li> <li>Declare four variables with assigned values</li> <li>Declare variables to store your first name, last name, marital status, country and age in multiple lines</li> <li>Declare variables to store your first name, last name, marital status, country and age in a single line</li> <li>Declare two variables myAge and yourAge and assign them initial values and log to the browser console.</li> </ol> <pre><code>I am 25 years old.\nYou are 30 years old.\n</code></pre> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"02-day/","title":"\ud83d\udcd4 Day 2","text":""},{"location":"02-day/#data-types","title":"Data Types","text":"<p>In the previous section, we mentioned a little bit about data types. Data or values have data types. Data types describe the characteristics of data. Data types can be divided into two:</p> <ol> <li>Primitive data types</li> <li>Non-primitive data types(Object References)</li> </ol>"},{"location":"02-day/#primitive-data-types","title":"Primitive Data Types","text":"<p>Primitive data types in JavaScript include:</p> <ol> <li>Numbers - Integers, floats</li> <li>Strings - Any data under single quote, double quote or backtick quote</li> <li>Booleans - true or false value</li> <li>Null - empty value or no value</li> <li>Undefined - a declared variable without a value</li> <li>Symbol - A unique value that can be generated by Symbol constructor</li> </ol> <p>Non-primitive data types in JavaScript includes:</p> <ol> <li>Objects</li> <li>Arrays</li> </ol> <p>Now, let us see what exactly primitive and non-primitive data types mean. Primitive data types are immutable(non-modifiable) data types. Once a primitive data type is created we cannot modify it.</p> <p>Example:</p> <pre><code>let word = 'JavaScript'\n</code></pre> <p>If we try to modify the string stored in variable word, JavaScript should raise an error. Any data type under a single quote, double quote, or backtick quote is a string data type.</p> <pre><code>word[0] = 'Y'\n</code></pre> <p>This expression does not change the string stored in the variable word. So, we can say that strings are not modifiable or in other words immutable. Primitive data types are compared by its values. Let us compare different data values. See the example below:</p> <pre><code>let numOne = 3\nlet numTwo = 3\n\nconsole.log(numOne == numTwo)      // true\n\nlet js = 'JavaScript'\nlet py = 'Python'\n\nconsole.log(js == py)             //false \n\nlet lightOn = true\nlet lightOff = false\n\nconsole.log(lightOn == lightOff) // false\n</code></pre>"},{"location":"02-day/#non-primitive-data-types","title":"Non-Primitive Data Types","text":"<p>Non-primitive data types are modifiable or mutable. We can modify the value of non-primitive data types after it gets created. Let us see by creating an array. An array is a list of data values in a square bracket. Arrays can contain the same or different data types. Array values are referenced by their index. In JavaScript array index starts at zero. I.e., the first element of an array is found at index zero, the second element at index one, and the third element at index two, etc.</p> <pre><code>let nums = [1, 2, 3]\nnums[0] = 10\n\nconsole.log(nums)  // [10, 2, 3]\n</code></pre> <p>As you can see, an array, which is a non-primitive data type is mutable. Non-primitive data types cannot be compared by value. Even if two non-primitive data types have the same properties and values, they are not strictly equal.</p> <pre><code>let nums = [1, 2, 3]\nlet numbers = [1, 2, 3]\n\nconsole.log(nums == numbers)  // false\n\nlet userOne = {\nname:'Asabeneh',\nrole:'teaching',\ncountry:'Finland'\n}\n\nlet userTwo = {\nname:'Asabeneh',\nrole:'teaching',\ncountry:'Finland'\n}\n\nconsole.log(userOne == userTwo) // false\n</code></pre> <p>Rule of thumb, we do not compare non-primitive data types. Do not compare arrays, functions, or objects. Non-primitive values are referred to as reference types, because they are being compared by reference instead of value. Two objects are only strictly equal if they refer to the same underlying object.</p> <pre><code>let nums = [1, 2, 3]\nlet numbers = nums\n\nconsole.log(nums == numbers)  // true\n\nlet userOne = {\nname:'Asabeneh',\nrole:'teaching',\ncountry:'Finland'\n}\n\nlet userTwo = userOne\n\nconsole.log(userOne == userTwo)  // true\n</code></pre> <p>If you have a hard time understanding the difference between primitive data types and non-primitive data types, you are not the only one. Calm down and just go to the next section and try to come back after some time. Now let us start the data types by number type.</p>"},{"location":"02-day/#numbers","title":"Numbers","text":"<p>Numbers are integers and decimal values which can do all the arithmetic operations. Let's see some examples of Numbers.</p>"},{"location":"02-day/#declaring-number-data-types","title":"Declaring Number Data Types","text":"<pre><code>let age = 35\nconst gravity = 9.81  // we use const for non-changing values, gravitational constant in  m/s2\nlet mass = 72         // mass in Kilogram\nconst PI = 3.14       // pi a geometrical constant\n\n// More Examples\nconst boilingPoint = 100 // temperature in oC, boiling point of water which is a constant\nconst bodyTemp = 37      // oC average human body temperature, which is a constant\n\nconsole.log(age, gravity, mass, PI, boilingPoint, bodyTemp)\n</code></pre>"},{"location":"02-day/#math-object","title":"Math Object","text":"<p>In JavaScript the Math Object provides a lots of methods to work with numbers.</p> <pre><code>const PI = Math.PI\n\nconsole.log(PI)                            // 3.141592653589793\n\n// Rounding to the closest number\n// if above .5 up if less 0.5 down rounding\n\nconsole.log(Math.round(PI))                // 3 to round values to the nearest number\n\nconsole.log(Math.round(9.81))              // 10\n\nconsole.log(Math.floor(PI))                // 3 rounding down\n\nconsole.log(Math.ceil(PI))                 // 4 rounding up\n\nconsole.log(Math.min(-5, 3, 20, 4, 5, 10)) // -5, returns the minimum value\n\nconsole.log(Math.max(-5, 3, 20, 4, 5, 10)) // 20, returns the maximum value\n\nconst randNum = Math.random() // creates random number between 0 to 0.999999\nconsole.log(randNum)\n\n// Let us  create random number between 0 to 10\n\nconst num = Math.floor(Math.random () * 11) // creates random number between 0 and 10\nconsole.log(num)\n\n//Absolute value\nconsole.log(Math.abs(-10))      // 10\n\n//Square root\nconsole.log(Math.sqrt(100))     // 10\n\nconsole.log(Math.sqrt(2))       // 1.4142135623730951\n\n// Power\nconsole.log(Math.pow(3, 2))     // 9\n\nconsole.log(Math.E)             // 2.718\n\n// Logarithm\n// Returns the natural logarithm with base E of x, Math.log(x)\nconsole.log(Math.log(2))        // 0.6931471805599453\nconsole.log(Math.log(10))       // 2.302585092994046\n\n// Returns the natural logarithm of 2 and 10 respectively\nconsole.log(Math.LN2)           // 0.6931471805599453\nconsole.log(Math.LN10)          // 2.302585092994046\n\n// Trigonometry\nMath.sin(0)\nMath.sin(60)\n\nMath.cos(0)\nMath.cos(60)\n</code></pre>"},{"location":"02-day/#random-number-generator","title":"Random Number Generator","text":"<p>The JavaScript Math Object has a random() method number generator which generates number from 0 to 0.999999999...</p> <pre><code>let randomNum = Math.random() // generates 0 to 0.999...\n</code></pre> <p>Now, let us see how we can use random() method to generate a random number between 0 and 10:</p> <pre><code>let randomNum = Math.random()         // generates 0 to 0.999\nlet numBtnZeroAndTen = randomNum * 11\n\nconsole.log(numBtnZeroAndTen)         // this gives: min 0 and max 10.99\n\nlet randomNumRoundToFloor = Math.floor(numBtnZeroAndTen)\nconsole.log(randomNumRoundToFloor)    // this gives between 0 and 10\n</code></pre>"},{"location":"02-day/#strings","title":"Strings","text":"<p>Strings are texts, which are under single  , double, back-tick quote. To declare a string, we need a variable name, assignment operator, a value under a single quote, double quote, or backtick quote. Let's see some examples of strings:</p> <pre><code>let space = ' '           // an empty space string\nlet firstName = 'Asabeneh'\nlet lastName = 'Yetayeh'\nlet country = 'Finland'\nlet city = 'Helsinki'\nlet language = 'JavaScript'\nlet job = 'teacher'\nlet quote = \"The saying,'Seeing is Believing' is not correct in 2020.\"\nlet quotWithBackTick = `The saying,'Seeing is Believing' is not correct in 2020.`\n</code></pre>"},{"location":"02-day/#string-concatenation","title":"String Concatenation","text":"<p>Connecting two or more strings together is called concatenation. Using the strings declared in the previous String section:</p> <pre><code>let fullName = firstName + space + lastName; // concatenation, merging two string together.\nconsole.log(fullName);\n</code></pre> <pre><code>Asabeneh Yetayeh\n</code></pre> <p>We can concatenate strings in different ways.</p>"},{"location":"02-day/#concatenating-using-addition-operator","title":"Concatenating Using Addition Operator","text":"<p>Concatenating using the addition operator is an old way. This way of concatenating is tedious and error-prone. It is good to know how to concatenate this way, but I strongly suggest to use the ES6 template strings (explained later on).</p> <pre><code>// Declaring different variables of different data types\nlet space = ' '\nlet firstName = 'Asabeneh'\nlet lastName = 'Yetayeh'\nlet country = 'Finland'\nlet city = 'Helsinki'\nlet language = 'JavaScript'\nlet job = 'teacher'\nlet age = 250\n\n\nlet fullName =firstName + space + lastName\nlet personInfoOne = fullName + '. I am ' + age + '. I live in ' + country; // ES5 string addition\n\nconsole.log(personInfoOne)\n</code></pre> <pre><code>Asabeneh Yetayeh. I am 250. I live in Finland\n</code></pre>"},{"location":"02-day/#long-literal-strings","title":"Long Literal Strings","text":"<p>A string could be a single character or paragraph or a page. If the string length is too big it does not fit in one line. We can use the backslash character (\\) at the end of each line to indicate that the string will continue on the next line. Example:</p> <pre><code>const paragraph = \"My name is Asabeneh Yetayeh. I live in Finland, Helsinki.\\\nI am a teacher and I love teaching. I teach HTML, CSS, JavaScript, React, Redux, \\\nNode.js, Python, Data Analysis and D3.js for anyone who is interested to learn. \\\nIn the end of 2019, I was thinking to expand my teaching and to reach \\\nto global audience and I started a Python challenge from November 20 - December 19.\\\nIt was one of the most rewarding and inspiring experience.\\\nNow, we are in 2020. I am enjoying preparing the 30DaysOfJavaScript challenge and \\\nI hope you are enjoying too.\"\n\nconsole.log(paragraph)\n</code></pre>"},{"location":"02-day/#escape-sequences-in-strings","title":"Escape Sequences in Strings","text":"<p>In JavaScript and other programming languages \\ followed by some characters is an escape sequence. Let's see the most common escape characters:</p> <ul> <li>\\n: new line</li> <li>\\t: Tab, means 8 spaces</li> <li>\\\\: Back slash</li> <li>\\': Single quote (')</li> <li>\\\": Double quote (\")</li> </ul> <pre><code>console.log('I hope everyone is enjoying the 30 Days Of JavaScript challenge.\\nDo you ?') // line break\nconsole.log('Days\\tTopics\\tExercises')\nconsole.log('Day 1\\t3\\t5')\nconsole.log('Day 2\\t3\\t5')\nconsole.log('Day 3\\t3\\t5')\nconsole.log('Day 4\\t3\\t5')\nconsole.log('This is a backslash  symbol (\\\\)') // To write a backslash\nconsole.log('In every programming language it starts with \\\"Hello, World!\\\"')\nconsole.log(\"In every programming language it starts with \\'Hello, World!\\'\")\nconsole.log('The saying \\'Seeing is Believing\\' isn\\'t correct in 2020')\n</code></pre> <p>Output in console:</p> <pre><code>I hope everyone is enjoying the 30 Days Of JavaScript challenge.\nDo you ?\nDays  Topics  Exercises\nDay 1 3 5\nDay 2 3 5\nDay 3 3 5\nDay 4 3 5\nThis is a backslash  symbol (\\)\nIn every programming language it starts with \"Hello, World!\"\nIn every programming language it starts with 'Hello, World!'\nThe saying 'Seeing is Believing' isn't correct in 2020\n</code></pre>"},{"location":"02-day/#template-literals-template-strings","title":"Template Literals (Template Strings)","text":"<p>To create a template strings, we use two back-ticks. We can inject data as expressions inside a template string. To inject data, we enclose the expression with a curly bracket({}) preceded by a $ sign. See the syntax below.</p> <pre><code>//Syntax\n`String literal text`\n`String literal text ${expression}`\n</code></pre> <p>Example: 1</p> <pre><code>console.log(`The sum of 2 and 3 is 5`)              // statically writing the data\nlet a = 2\nlet b = 3\nconsole.log(`The sum of ${a} and ${b} is ${a + b}`) // injecting the data dynamically\n</code></pre> <p>Example:2</p> <pre><code>let firstName = 'Asabeneh'\nlet lastName = 'Yetayeh'\nlet country = 'Finland'\nlet city = 'Helsinki'\nlet language = 'JavaScript'\nlet job = 'teacher'\nlet age = 250\nlet fullName = firstName + ' ' + lastName\n\nlet personInfoTwo = `I am ${fullName}. I am ${age}. I live in ${country}.` //ES6 - String interpolation method\nlet personInfoThree = `I am ${fullName}. I live in ${city}, ${country}. I am a ${job}. I teach ${language}.`\nconsole.log(personInfoTwo)\nconsole.log(personInfoThree)\n</code></pre> <pre><code>I am Asabeneh Yetayeh. I am 250. I live in Finland.\nI am Asabeneh Yetayeh. I live in Helsinki, Finland. I am a teacher. I teach JavaScript.\n</code></pre> <p>Using a string template or string interpolation method, we can add expressions, which could be a value, or some operations (comparison, arithmetic operations, ternary operation).</p> <pre><code>let a = 2\nlet b = 3\nconsole.log(`${a} is greater than ${b}: ${a &gt; b}`)\n</code></pre> <pre><code>2 is greater than 3: false\n</code></pre>"},{"location":"02-day/#string-methods","title":"String Methods","text":"<p>Everything in JavaScript is an object. A string is a primitive data type that means we can not modify it once it is created. The string object has many string methods. There are different string methods that can help us to work with strings.</p> <ol> <li>length: The string length method returns the number of characters in a string included empty space.</li> </ol> <p>Example:</p> <pre><code>let js = 'JavaScript'\nconsole.log(js.length)         // 10\nlet firstName = 'Asabeneh'\nconsole.log(firstName.length)  // 8\n</code></pre> <ol> <li>Accessing characters in a string: We can access each character in a string using its index. In programming, counting starts from 0. The first index of the string is zero, and the last index is the length of the string minus one.</li> </ol> <p></p> <p>Let us access different characters in 'JavaScript' string.</p> <pre><code>let string = 'JavaScript'\nlet firstLetter = string[0]\n\nconsole.log(firstLetter)           // J\n\nlet secondLetter = string[1]       // a\nlet thirdLetter = string[2]\nlet lastLetter = string[9]\n\nconsole.log(lastLetter)            // t\n\nlet lastIndex = string.length - 1\n\nconsole.log(lastIndex)  // 9\nconsole.log(string[lastIndex])    // t\n</code></pre> <ol> <li>toUpperCase(): this method changes the string to uppercase letters.</li> </ol> <pre><code>let string = 'JavaScript'\n\nconsole.log(string.toUpperCase())     // JAVASCRIPT\n\nlet firstName = 'Asabeneh'\n\nconsole.log(firstName.toUpperCase())  // ASABENEH\n\nlet country = 'Finland'\n\nconsole.log(country.toUpperCase())    // FINLAND\n</code></pre> <ol> <li>toLowerCase(): this method changes the string to lowercase letters.</li> </ol> <pre><code>let string = 'JavasCript'\n\nconsole.log(string.toLowerCase())     // javascript\n\nlet firstName = 'Asabeneh'\n\nconsole.log(firstName.toLowerCase())  // asabeneh\n\nlet country = 'Finland'\n\nconsole.log(country.toLowerCase())   // finland\n</code></pre> <ol> <li>substr(): It takes two arguments, the starting index and number of characters to slice.</li> </ol> <pre><code>let string = 'JavaScript'\nconsole.log(string.substr(4,6))    // Script\n\nlet country = 'Finland'\nconsole.log(country.substr(3, 4))   // land\n</code></pre> <ol> <li>substring(): It takes two arguments, the starting index and the stopping index but it doesn't include the character at the stopping index.</li> </ol> <pre><code>let string = 'JavaScript'\n\nconsole.log(string.substring(0,4))     // Java\nconsole.log(string.substring(4,10))    // Script\nconsole.log(string.substring(4))       // Script\n\nlet country = 'Finland'\n\nconsole.log(country.substring(0, 3))   // Fin\nconsole.log(country.substring(3, 7))   // land\nconsole.log(country.substring(3))      // land\n</code></pre> <ol> <li>split(): The split method splits a string at a specified place.</li> </ol> <pre><code>let string = '30 Days Of JavaScript'\n\nconsole.log(string.split())     // Changes to an array -&gt; [\"30 Days Of JavaScript\"]\nconsole.log(string.split(' '))  // Split to an array at space -&gt; [\"30\", \"Days\", \"Of\", \"JavaScript\"]\n\nlet firstName = 'Asabeneh'\n\nconsole.log(firstName.split())    // Change to an array - &gt; [\"Asabeneh\"]\nconsole.log(firstName.split(''))  // Split to an array at each letter -&gt;  [\"A\", \"s\", \"a\", \"b\", \"e\", \"n\", \"e\", \"h\"]\n\nlet countries = 'Finland, Sweden, Norway, Denmark, and Iceland'\n\nconsole.log(countries.split(','))  // split to any array at comma -&gt; [\"Finland\", \" Sweden\", \" Norway\", \" Denmark\", \" and Iceland\"]\nconsole.log(countries.split(', ')) // \u00a0[\"Finland\", \"Sweden\", \"Norway\", \"Denmark\", \"and Iceland\"]\n</code></pre> <ol> <li>trim(): Removes trailing space in the beginning or the end of a string.</li> </ol> <pre><code>let string = '   30 Days Of JavaScript   '\n\nconsole.log(string)\nconsole.log(string.trim(' '))\n\nlet firstName = ' Asabeneh '\n\nconsole.log(firstName)\nconsole.log(firstName.trim())  // still removes spaces at the beginning and the end of the string\n</code></pre> <pre><code>   30 Days Of JavasCript   \n30 Days Of JavasCript\n  Asabeneh \nAsabeneh\n</code></pre> <ol> <li>includes(): It takes a substring argument and it checks if substring argument exists in the string. includes() returns a boolean. If a substring exist in a string, it returns true, otherwise it returns false.</li> </ol> <pre><code>let string = '30 Days Of JavaScript'\n\nconsole.log(string.includes('Days'))     // true\nconsole.log(string.includes('days'))     // false - it is case sensitive!\nconsole.log(string.includes('Script'))   // true\nconsole.log(string.includes('script'))   // false\nconsole.log(string.includes('java'))     // false\nconsole.log(string.includes('Java'))     // true\n\nlet country = 'Finland'\n\nconsole.log(country.includes('fin'))     // false\nconsole.log(country.includes('Fin'))     // true\nconsole.log(country.includes('land'))    // true\nconsole.log(country.includes('Land'))    // false\n</code></pre> <ol> <li>replace(): takes as a parameter the old substring and a new substring.</li> </ol> <pre><code>string.replace(oldsubstring, newsubstring)\n</code></pre> <pre><code>let string = '30 Days Of JavaScript'\nconsole.log(string.replace('JavaScript', 'Python')) // 30 Days Of Python\n\nlet country = 'Finland'\nconsole.log(country.replace('Fin', 'Noman'))       // Nomanland\n</code></pre> <ol> <li>charAt(): Takes index and it returns the value at that index</li> </ol> <pre><code>string.charAt(index)\n</code></pre> <pre><code>let string = '30 Days Of JavaScript'\nconsole.log(string.charAt(0))        // 3\n\nlet lastIndex = string.length - 1\nconsole.log(string.charAt(lastIndex)) // t\n</code></pre> <ol> <li>charCodeAt(): Takes index and it returns char code (ASCII number) of the value at that index</li> </ol> <pre><code>string.charCodeAt(index)\n</code></pre> <pre><code>let string = '30 Days Of JavaScript'\nconsole.log(string.charCodeAt(3))        // D ASCII number is 68\n\nlet lastIndex = string.length - 1\nconsole.log(string.charCodeAt(lastIndex)) // t ASCII is 116\n</code></pre> <ol> <li>indexOf(): Takes a substring and if the substring exists in a string it returns the first position of the substring if does not exist it returns -1</li> </ol> <pre><code>string.indexOf(substring)\n</code></pre> <pre><code>let string = '30 Days Of JavaScript'\n\nconsole.log(string.indexOf('D'))          // 3\nconsole.log(string.indexOf('Days'))       // 3\nconsole.log(string.indexOf('days'))       // -1\nconsole.log(string.indexOf('a'))          // 4\nconsole.log(string.indexOf('JavaScript')) // 11\nconsole.log(string.indexOf('Script'))     //15\nconsole.log(string.indexOf('script'))     // -1\n</code></pre> <ol> <li>lastIndexOf(): Takes a substring and if the substring exists in a string it returns the last position of the substring if it does not exist it returns -1</li> </ol> <pre><code>//syntax\nstring.lastIndexOf(substring)\n</code></pre> <pre><code>let string = 'I love JavaScript. If you do not love JavaScript what else can you love.'\n\nconsole.log(string.lastIndexOf('love'))       // 67\nconsole.log(string.lastIndexOf('you'))        // 63\nconsole.log(string.lastIndexOf('JavaScript')) // 38\n</code></pre> <ol> <li>concat(): it takes many substrings and joins them.</li> </ol> <pre><code>string.concat(substring, substring, substring)\n</code></pre> <pre><code>let string = '30'\nconsole.log(string.concat(\"Days\", \"Of\", \"JavaScript\")) // 30DaysOfJavaScript\n\nlet country = 'Fin'\nconsole.log(country.concat(\"land\")) // Finland\n</code></pre> <ol> <li>startsWith: it takes a substring as an argument and it checks if the string starts with that specified substring. It returns a boolean(true or false).</li> </ol> <pre><code>//syntax\nstring.startsWith(substring)\n</code></pre> <pre><code>let string = 'Love is the best to in this world'\n\nconsole.log(string.startsWith('Love'))   // true\nconsole.log(string.startsWith('love'))   // false\nconsole.log(string.startsWith('world'))  // false\n\nlet country = 'Finland'\n\nconsole.log(country.startsWith('Fin'))   // true\nconsole.log(country.startsWith('fin'))   // false\nconsole.log(country.startsWith('land'))  //  false\n</code></pre> <ol> <li>endsWith: it takes a substring as an argument and it checks if the string ends with that specified substring. It returns a boolean(true or false).</li> </ol> <pre><code>string.endsWith(substring)\n</code></pre> <pre><code>let string = 'Love is the most powerful feeling in the world'\n\nconsole.log(string.endsWith('world'))         // true\nconsole.log(string.endsWith('love'))          // false\nconsole.log(string.endsWith('in the world')) // true\n\nlet country = 'Finland'\n\nconsole.log(country.endsWith('land'))         // true\nconsole.log(country.endsWith('fin'))          // false\nconsole.log(country.endsWith('Fin'))          //  false\n</code></pre> <ol> <li>search: it takes a substring as an argument and it returns the index of the first match. The search value can be a string or  a regular expression pattern.</li> </ol> <pre><code>string.search(substring)\n</code></pre> <pre><code>let string = 'I love JavaScript. If you do not love JavaScript what else can you love.'\nconsole.log(string.search('love'))          // 2\nconsole.log(string.search(/javascript/gi))  // 7\n</code></pre> <ol> <li>match: it takes a substring or regular expression pattern as an argument and it returns an array if there is match if not it returns null. Let us see how a regular expression pattern looks like. It starts with / sign and ends with / sign.</li> </ol> <pre><code>let string = 'love'\nlet patternOne = /love/     // with out any flag\nlet patternTwo = /love/gi   // g-means to search in the whole text, i - case insensitive\n</code></pre> <p>Match syntax</p> <pre><code>// syntax\nstring.match(substring)\n</code></pre> <pre><code>let string = 'I love JavaScript. If you do not love JavaScript what else can you love.'\nconsole.log(string.match('love'))\n</code></pre> <pre><code>[\"love\", index: 2, input: \"I love JavaScript. If you do not love JavaScript what else can you love.\", groups: undefined]\n</code></pre> <pre><code>let pattern = /love/gi\nconsole.log(string.match(pattern))   // [\"love\", \"love\", \"love\"]\n</code></pre> <p>Let us extract numbers from text using a regular expression. This is not the regular expression section, do not panic! We will cover regular expressions later on.</p> <pre><code>let txt = 'In 2019, I ran 30 Days of Python. Now, in 2020 I am super exited to start this challenge'\nlet regEx = /\\d+/\n\n// d with escape character means d not a normal d instead acts a digit\n// + means one or more digit numbers,\n// if there is g after that it means global, search everywhere.\n\nconsole.log(txt.match(regEx))  // [\"2\", \"0\", \"1\", \"9\", \"3\", \"0\", \"2\", \"0\", \"2\", \"0\"]\nconsole.log(txt.match(/\\d+/g)) // [\"2019\", \"30\", \"2020\"]\n</code></pre> <ol> <li>repeat(): it takes a number as argument and it returns the repeated version of the string.</li> </ol> <pre><code>string.repeat(n)\n</code></pre> <pre><code>let string = 'love'\nconsole.log(string.repeat(10)) // lovelovelovelovelovelovelovelovelovelove\n</code></pre>"},{"location":"02-day/#checking-data-types-and-casting","title":"Checking Data Types and Casting","text":""},{"location":"02-day/#checking-data-types","title":"Checking Data Types","text":"<p>To check the data type of a certain variable we use the typeof method.</p> <p>Example:</p> <pre><code>// Different javascript data types\n// Let's declare different data types\n\nlet firstName = 'Asabeneh'      // string\nlet lastName = 'Yetayeh'        // string\nlet country = 'Finland'         // string\nlet city = 'Helsinki'           // string\nlet age = 250                   // number, it is not my real age, do not worry about it\nlet job                         // undefined, because a value was not assigned\n\nconsole.log(typeof 'Asabeneh')  // string\nconsole.log(typeof firstName)   // string\nconsole.log(typeof 10)          // number\nconsole.log(typeof 3.14)        // number\nconsole.log(typeof true)        // boolean\nconsole.log(typeof false)       // boolean\nconsole.log(typeof NaN)         // number\nconsole.log(typeof job)         // undefined\nconsole.log(typeof undefined)   // undefined\nconsole.log(typeof null)        // object\n</code></pre>"},{"location":"02-day/#changing-data-type-casting","title":"Changing Data Type (Casting)","text":"<ul> <li>Casting: Converting one data type to another data type. We use parseInt(), parseFloat(), Number(), + sign, str()   When we do arithmetic operations string numbers should be first converted to integer or float if not it returns an error.</li> </ul>"},{"location":"02-day/#string-to-int","title":"String to Int","text":"<p>We can convert string number to a number. Any number inside a quote is a string number. An example of a string number: '10', '5', etc. We can convert string to number using the following methods:</p> <ul> <li>parseInt()</li> <li>Number()</li> <li>Plus sign(+)</li> </ul> <pre><code>let num = '10'\nlet numInt = parseInt(num)\nconsole.log(numInt) // 10\n</code></pre> <pre><code>let num = '10'\nlet numInt = Number(num)\n\nconsole.log(numInt) // 10\n</code></pre> <pre><code>let num = '10'\nlet numInt = +num\n\nconsole.log(numInt) // 10\n</code></pre>"},{"location":"02-day/#string-to-float","title":"String to Float","text":"<p>We can convert string float number to a float number. Any float number inside a quote is a string float number. An example of a string float number: '9.81', '3.14', '1.44', etc. We can convert string float to number using the following methods:</p> <ul> <li>parseFloat()</li> <li>Number()</li> <li>Plus sign(+)</li> </ul> <pre><code>let num = '9.81'\nlet numFloat = parseFloat(num)\n\nconsole.log(numFloat) // 9.81\n</code></pre> <pre><code>let num = '9.81'\nlet numFloat = Number(num)\n\nconsole.log(numFloat) // 9.81\n</code></pre> <pre><code>let num = '9.81'\nlet numFloat = +num\n\nconsole.log(numFloat) // 9.81\n</code></pre>"},{"location":"02-day/#float-to-int","title":"Float to Int","text":"<p>We can convert float numbers to integers. We use the following method to convert float to int:</p> <ul> <li>parseInt()</li> </ul> <pre><code>let num = 9.81\nlet numInt = parseInt(num)\n\nconsole.log(numInt) // 9\n</code></pre> <p>\ud83c\udf15  You are awesome. You have just completed day 2 challenges and you are two steps ahead on your way to greatness. Now do some exercises for your brain and for your muscle.  </p>"},{"location":"02-day/#day-2-exercises","title":"\ud83d\udcbb Day 2: Exercises","text":""},{"location":"02-day/#exercise-level-1","title":"Exercise: Level 1","text":"<ol> <li>Declare a variable named challenge and assign it to an initial value '30 Days Of JavaScript'.</li> <li>Print the string on the browser console using console.log()</li> <li>Print the length of the string on the browser console using console.log()</li> <li>Change all the string characters to capital letters using toUpperCase() method</li> <li>Change all the string characters to lowercase letters using toLowerCase() method</li> <li>Cut (slice) out the first word of the string using substr() or substring() method</li> <li>Slice out the phrase Days Of JavaScript from 30 Days Of JavaScript.</li> <li>Check if the string contains a word Script using includes() method</li> <li>Split the string into an array using split() method</li> <li>Split the string 30 Days Of JavaScript at the space using split() method</li> <li>'Facebook, Google, Microsoft, Apple, IBM, Oracle, Amazon' split the string at the comma and change it to an array.</li> <li>Change 30 Days Of JavaScript to 30 Days Of Python using replace() method.</li> <li>What is character at index 15 in '30 Days Of JavaScript' string? Use charAt() method.</li> <li>What is the character code of J in '30 Days Of JavaScript' string using charCodeAt()</li> <li>Use indexOf to determine the position of the first occurrence of a in 30 Days Of JavaScript</li> <li>Use lastIndexOf to determine the position of the last occurrence of a in 30 Days Of JavaScript.</li> <li>Use indexOf to find the position of the first occurrence of the word because in the following sentence:'You cannot end a sentence with because because because is a conjunction'</li> <li>Use lastIndexOf to find the position of the last occurrence of the word because in the following sentence:'You cannot end a sentence with because because because is a conjunction'</li> <li>Use search to find the position of the first occurrence of the word because in the following sentence:'You cannot end a sentence with because because because is a conjunction'</li> <li>Use trim() to remove any trailing whitespace at the beginning and the end of a string.E.g ' 30 Days Of JavaScript '.</li> <li>Use startsWith() method with the string 30 Days Of JavaScript and make the result true</li> <li>Use endsWith() method with the string 30 Days Of JavaScript and make the result true</li> <li>Use match() method to find all the a\u2019s in 30 Days Of JavaScript</li> <li>Use concat() and merge '30 Days of' and 'JavaScript' to a single string, '30 Days Of JavaScript'</li> <li>Use repeat() method to print 30 Days Of JavaScript 2 times</li> </ol>"},{"location":"02-day/#exercise-level-2","title":"Exercise: Level 2","text":"<ol> <li> <p>Using console.log() print out the following statement:</p> <pre><code>The quote 'There is no exercise better for the heart than reaching down and lifting people up.' by John Holmes teaches us to help one another.\n</code></pre> </li> <li> <p>Using console.log() print out the following quote by Mother Teresa:</p> <pre><code>\"Love is not patronizing and charity isn't about pity, it is about love. Charity and love are the same -- with charity you give love, so don't just give money but reach out your hand instead.\"\n</code></pre> </li> <li> <p>Check if typeof '10' is exactly equal to 10. If not make it exactly equal.</p> </li> <li>Check if parseFloat('9.8') is equal to 10 if not make it exactly equal with 10.</li> <li>Check if 'on' is found in both python and jargon</li> <li>I hope this course is not full of jargon. Check if jargon is in the sentence.</li> <li>Generate a random number between 0 and 100 inclusively.</li> <li>Generate a random number between 50 and 100 inclusively.</li> <li>Generate a random number between 0 and 255 inclusively.</li> <li>Access the 'JavaScript' string characters using a random number.</li> <li> <p>Use console.log() and escape characters to print the following pattern.</p> <pre><code>1 1 1 1 1\n2 1 2 4 8\n3 1 3 9 27\n4 1 4 16 64\n5 1 5 25 125\n</code></pre> </li> <li> <p>Use substr to slice out the phrase because because because from the following sentence:'You cannot end a sentence with because because because is a conjunction'</p> </li> </ol>"},{"location":"02-day/#exercises-level-3","title":"Exercises: Level 3","text":"<ol> <li>'Love is the best thing in this world. Some found their love and some are still looking for their love.' Count the number of word love in this sentence.</li> <li>Use match() to count the number of all because in the following sentence:'You cannot end a sentence with because because because is a conjunction'</li> <li> <p>Clean the following text and find the most frequent word (hint, use replace and regular expressions).</p> <pre><code>    const sentence = '%I $am@% a %tea@cher%, &amp;and&amp; I lo%#ve %te@a@ching%;. The@re $is no@th@ing; &amp;as&amp; mo@re rewarding as educa@ting &amp;and&amp; @emp%o@weri@ng peo@ple. ;I found tea@ching m%o@re interesting tha@n any ot#her %jo@bs. %Do@es thi%s mo@tiv#ate yo@u to be a tea@cher!? %Th#is 30#Days&amp;OfJavaScript &amp;is al@so $the $resu@lt of &amp;love&amp; of tea&amp;ching'\n</code></pre> </li> <li> <p>Calculate the total annual income of the person by extracting the numbers from the following text. 'He earns 5000 euro from salary per month, 10000 euro annual bonus, 15000 euro online courses per month.'</p> </li> </ol> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"03-day/","title":"\ud83d\udcd4 Day 3","text":""},{"location":"03-day/#booleans","title":"Booleans","text":"<p>A boolean data type represents one of the two values:true or false. Boolean value is either true or false. The use of these data types will be clear when you start the comparison operator. Any comparisons return a boolean value which is either true or false.</p> <p>Example: Boolean Values</p> <pre><code>let isLightOn = true\nlet isRaining = false\nlet isHungry = false\nlet isMarried = true\nlet truValue = 4 &gt; 3    // true\nlet falseValue = 4 &lt; 3  // false\n</code></pre> <p>We agreed that boolean values are either true or false.</p>"},{"location":"03-day/#truthy-values","title":"Truthy values","text":"<ul> <li>All numbers(positive and negative) are truthy except zero</li> <li>All strings are truthy except an empty string ('')</li> <li>The boolean true</li> </ul>"},{"location":"03-day/#falsy-values","title":"Falsy values","text":"<ul> <li>0</li> <li>0n</li> <li>null</li> <li>undefined</li> <li>NaN</li> <li>the boolean false</li> <li>'', \"\", ``, empty string</li> </ul> <p>It is good to remember those truthy values and falsy values. In later section, we will use them with conditions to make decisions.</p>"},{"location":"03-day/#undefined","title":"Undefined","text":"<p>If we declare a variable and if we do not assign a value, the value will be undefined. In addition to this, if a function is not returning the value, it will be undefined.</p> <pre><code>let firstName\nconsole.log(firstName) //not defined, because it is not assigned to a value yet\n</code></pre>"},{"location":"03-day/#null","title":"Null","text":"<pre><code>let empty = null\nconsole.log(empty) // -&gt; null , means no value\n</code></pre>"},{"location":"03-day/#operators","title":"Operators","text":""},{"location":"03-day/#assignment-operators","title":"Assignment operators","text":"<p>An equal sign in JavaScript is an assignment operator. It uses to assign a variable.</p> <pre><code>let firstName = 'Asabeneh'\nlet country = 'Finland'\n</code></pre> <p>Assignment Operators</p> <p></p>"},{"location":"03-day/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>Arithmetic operators are mathematical operators.</p> <ul> <li>Addition(+): a + b</li> <li>Subtraction(-): a - b</li> <li>Multiplication(*): a * b</li> <li>Division(/): a / b</li> <li>Modulus(%): a % b</li> <li>Exponential(**): a ** b</li> </ul> <pre><code>let numOne = 4\nlet numTwo = 3\nlet sum = numOne + numTwo\nlet diff = numOne - numTwo\nlet mult = numOne * numTwo\nlet div = numOne / numTwo\nlet remainder = numOne % numTwo\nlet powerOf = numOne ** numTwo\n\nconsole.log(sum, diff, mult, div, remainder, powerOf) // 7,1,12,1.33,1, 64\n</code></pre> <pre><code>const PI = 3.14\nlet radius = 100          // length in meter\n\n//Let us calculate area of a circle\nconst areaOfCircle = PI * radius * radius\nconsole.log(areaOfCircle)  //  314 m\n\n\nconst gravity = 9.81      // in m/s2\nlet mass = 72             // in Kilogram\n\n// Let us calculate weight of an object\nconst weight = mass * gravity\nconsole.log(weight)        // 706.32 N(Newton)\n\nconst boilingPoint = 100  // temperature in oC, boiling point of water\nconst bodyTemp = 37       // body temperature in oC\n\n\n// Concatenating string with numbers using string interpolation\n/*\n The boiling point of water is 100 oC.\n Human body temperature is 37 oC.\n The gravity of earth is 9.81 m/s2.\n */\nconsole.log(\n  `The boiling point of water is ${boilingPoint} oC.\\nHuman body temperature is ${bodyTemp} oC.\\nThe gravity of earth is ${gravity} m / s2.`\n)\n</code></pre>"},{"location":"03-day/#comparison-operators","title":"Comparison Operators","text":"<p>In programming we compare values, we use comparison operators to compare two values. We check if a value is greater or less or equal to other value.</p> <p> Example: Comparison Operators</p> <pre><code>console.log(3 &gt; 2)              // true, because 3 is greater than 2\nconsole.log(3 &gt;= 2)             // true, because 3 is greater than 2\nconsole.log(3 &lt; 2)              // false,  because 3 is greater than 2\nconsole.log(2 &lt; 3)              // true, because 2 is less than 3\nconsole.log(2 &lt;= 3)             // true, because 2 is less than 3\nconsole.log(3 == 2)             // false, because 3 is not equal to 2\nconsole.log(3 != 2)             // true, because 3 is not equal to 2\nconsole.log(3 == '3')           // true, compare only value\nconsole.log(3 === '3')          // false, compare both value and data type\nconsole.log(3 !== '3')          // true, compare both value and data type\nconsole.log(3 != 3)             // false, compare only value\nconsole.log(3 !== 3)            // false, compare both value and data type\nconsole.log(0 == false)         // true, equivalent\nconsole.log(0 === false)        // false, not exactly the same\nconsole.log(0 == '')            // true, equivalent\nconsole.log(0 == ' ')           // true, equivalent\nconsole.log(0 === '')           // false, not exactly the same\nconsole.log(1 == true)          // true, equivalent\nconsole.log(1 === true)         // false, not exactly the same\nconsole.log(undefined == null)  // true\nconsole.log(undefined === null) // false\nconsole.log(NaN == NaN)         // false, not equal\nconsole.log(NaN === NaN)        // false\nconsole.log(typeof NaN)         // number\n\nconsole.log('mango'.length == 'avocado'.length)  // false\nconsole.log('mango'.length != 'avocado'.length)  // true\nconsole.log('mango'.length &lt; 'avocado'.length)   // true\nconsole.log('milk'.length == 'meat'.length)      // true\nconsole.log('milk'.length != 'meat'.length)      // false\nconsole.log('tomato'.length == 'potato'.length)  // true\nconsole.log('python'.length &gt; 'dragon'.length)   // false\n</code></pre> <p>Try to understand the above comparisons with some logic. Remembering without any logic might be difficult. JavaScript is somehow a wired kind of programming language. JavaScript code run and give you a result but unless you are good at it may not be the desired result.</p> <p>As rule of thumb, if a value is not true with == it will not be equal with ===. Using === is safer than using ==. The following link has an exhaustive list of comparison of data types.</p>"},{"location":"03-day/#logical-operators","title":"Logical Operators","text":"<p>The following symbols are the common logical operators: &amp;&amp;(ampersand) , ||(pipe) and !(negation). The &amp;&amp; operator gets true only if the two operands are true. The || operator gets true either of the operand is true. The ! operator negates true to false and false to true.</p> <pre><code>// &amp;&amp; ampersand operator example\n\nconst check = 4 &gt; 3 &amp;&amp; 10 &gt; 5         // true &amp;&amp; true -&gt; true\nconst check = 4 &gt; 3 &amp;&amp; 10 &lt; 5         // true &amp;&amp; false -&gt; false\nconst check = 4 &lt; 3 &amp;&amp; 10 &lt; 5         // false &amp;&amp; false -&gt; false\n\n// || pipe or operator, example\n\nconst check = 4 &gt; 3 || 10 &gt; 5         // true  || true -&gt; true\nconst check = 4 &gt; 3 || 10 &lt; 5         // true  || false -&gt; true\nconst check = 4 &lt; 3 || 10 &lt; 5         // false || false -&gt; false\n\n//! Negation examples\n\nlet check = 4 &gt; 3                     // true\nlet check = !(4 &gt; 3)                  //  false\nlet isLightOn = true\nlet isLightOff = !isLightOn           // false\nlet isMarried = !false                // true\n</code></pre>"},{"location":"03-day/#increment-operator","title":"Increment Operator","text":"<p>In JavaScript we use the increment operator to increase a value stored in a variable. The increment could be pre or post increment. Let us see each of them:</p> <ol> <li>Pre-increment</li> </ol> <pre><code>let count = 0\nconsole.log(++count)        // 1\nconsole.log(count)          // 1\n</code></pre> <ol> <li>Post-increment</li> </ol> <pre><code>let count = 0\nconsole.log(count++)        // 0\nconsole.log(count)          // 1\n</code></pre> <p>We use most of the time post-increment. At least you should remember how to use post-increment operator.</p>"},{"location":"03-day/#decrement-operator","title":"Decrement Operator","text":"<p>In JavaScript we use the decrement operator to decrease a value stored in a variable. The decrement could be pre or post decrement. Let us see each of them:</p> <ol> <li>Pre-decrement</li> </ol> <pre><code>let count = 0\nconsole.log(--count) // -1\nconsole.log(count)  // -1\n</code></pre> <ol> <li>Post-decrement</li> </ol> <pre><code>let count = 0\nconsole.log(count--) // 0\nconsole.log(count)   // -1\n</code></pre>"},{"location":"03-day/#ternary-operators","title":"Ternary Operators","text":"<p>Ternary operator allows to write a condition. Another way to write conditionals is using ternary operators. Look at the following examples:</p> <pre><code>let isRaining = true\nisRaining\n  ? console.log('You need a rain coat.')\n  : console.log('No need for a rain coat.')\nisRaining = false\n\nisRaining\n  ? console.log('You need a rain coat.')\n  : console.log('No need for a rain coat.')\n</code></pre> <pre><code>You need a rain coat.\nNo need for a rain coat.\n</code></pre> <pre><code>let number = 5\nnumber &gt; 0\n  ? console.log(`${number} is a positive number`)\n  : console.log(`${number} is a negative number`)\nnumber = -5\n\nnumber &gt; 0\n  ? console.log(`${number} is a positive number`)\n  : console.log(`${number} is a negative number`)\n</code></pre> <pre><code>5 is a positive number\n-5 is a negative number\n</code></pre>"},{"location":"03-day/#operator-precedence","title":"Operator Precedence","text":"<p>I would like to recommend you to read about operator precedence from this link</p>"},{"location":"03-day/#window-methods","title":"Window Methods","text":""},{"location":"03-day/#window-alert-method","title":"Window alert() method","text":"<p>As you have seen at very beginning alert() method displays an alert box with a specified message and an OK button. It is a builtin method and it takes on argument.</p> <pre><code>alert(message)\n</code></pre> <pre><code>alert('Welcome to 30DaysOfJavaScript')\n</code></pre> <p>Do not use too much alert because it is destructing and annoying, use it just to test.</p>"},{"location":"03-day/#window-prompt-method","title":"Window prompt() method","text":"<p>The window prompt methods display a prompt box with an input on your browser to take input values and the input data can be stored in a variable. The prompt() method takes two arguments. The second argument is optional.</p> <pre><code>prompt('required text', 'optional text')\n</code></pre> <pre><code>let number = prompt('Enter number', 'number goes here')\nconsole.log(number)\n</code></pre>"},{"location":"03-day/#window-confirm-method","title":"Window confirm() method","text":"<p>The confirm() method displays a dialog box with a specified message, along with an OK and a Cancel button. A confirm box is often used to ask permission from a user to execute something. Window confirm() takes a string as an argument. Clicking the OK yields true value, whereas clicking the Cancel button yields false value.</p> <pre><code>const agree = confirm('Are you sure you like to delete? ')\nconsole.log(agree) // result will be true or false based on what you click on the dialog box\n</code></pre> <p>These are not all the window methods we will have a separate section to go deep into window methods.</p>"},{"location":"03-day/#date-object","title":"Date Object","text":"<p>Time is an important thing. We like to know the time a certain activity or event. In JavaScript current time and date is created using JavaScript Date Object. The object we create using Date object provides many methods to work with date and time.The methods we use to get date and time information from a date object values are started with a word get because it provide the information. getFullYear(), getMonth(), getDate(), getDay(), getHours(), getMinutes, getSeconds(), getMilliseconds(), getTime(), getDay()</p> <p></p>"},{"location":"03-day/#creating-a-time-object","title":"Creating a time object","text":"<p>Once we create time object. The time object will provide information about time. Let us create a time object</p> <pre><code>const now = new Date()\nconsole.log(now) // Sat Jan 04 2020 00:56:41 GMT+0200 (Eastern European Standard Time)\n</code></pre> <p>We have created a time object and we can access any date time information from the object using the get methods we have mentioned on the table.</p>"},{"location":"03-day/#getting-full-year","title":"Getting full year","text":"<p>Let's extract or get the full year from a time object.</p> <pre><code>const now = new Date()\nconsole.log(now.getFullYear()) // 2020\n</code></pre>"},{"location":"03-day/#getting-month","title":"Getting month","text":"<p>Let's extract or get the month from a time object.</p> <pre><code>const now = new Date()\nconsole.log(now.getMonth()) // 0, because the month is January,  month(0-11)\n</code></pre>"},{"location":"03-day/#getting-date","title":"Getting date","text":"<p>Let's extract or get the date of the month from a time object.</p> <pre><code>const now = new Date()\nconsole.log(now.getDate()) // 4, because the day of the month is 4th,  day(1-31)\n</code></pre>"},{"location":"03-day/#getting-day","title":"Getting day","text":"<p>Let's extract or get the day of the week from a time object.</p> <pre><code>const now = new Date()\nconsole.log(now.getDay()) // 6, because the day is Saturday which is the 7th day\n//  Sunday is 0, Monday is 1 and Saturday is 6\n// Getting the weekday as a number (0-6)\n</code></pre>"},{"location":"03-day/#getting-hours","title":"Getting hours","text":"<p>Let's extract or get the hours from a time object.</p> <pre><code>const now = new Date()\nconsole.log(now.getHours()) // 0, because the time is 00:56:41\n</code></pre>"},{"location":"03-day/#getting-minutes","title":"Getting minutes","text":"<p>Let's extract or get the minutes from a time object.</p> <pre><code>const now = new Date()\nconsole.log(now.getMinutes()) // 56, because the time is 00:56:41\n</code></pre>"},{"location":"03-day/#getting-seconds","title":"Getting seconds","text":"<p>Let's extract or get the seconds from a time object.</p> <pre><code>const now = new Date()\nconsole.log(now.getSeconds()) // 41, because the time is 00:56:41\n</code></pre>"},{"location":"03-day/#getting-time","title":"Getting time","text":"<p>This method give time in milliseconds starting from January 1, 1970. It is also know as Unix time. We can get the unix time in two ways:</p> <ol> <li>Using getTime()</li> </ol> <pre><code>const now = new Date() //\nconsole.log(now.getTime()) // 1578092201341, this is the number of seconds passed from January 1, 1970 to January 4, 2020 00:56:41\n</code></pre> <ol> <li>Using Date.now()</li> </ol> <pre><code>const allSeconds = Date.now() //\nconsole.log(allSeconds) // 1578092201341, this is the number of seconds passed from January 1, 1970 to January 4, 2020 00:56:41\n\nconst timeInSeconds = new Date().getTime()\nconsole.log(allSeconds == timeInSeconds) // true\n</code></pre> <p>Let us format these values to a human readable time format. Example:</p> <pre><code>const now = new Date()\nconst year = now.getFullYear() // return year\nconst month = now.getMonth() + 1 // return month(0 - 11)\nconst date = now.getDate() // return date (1 - 31)\nconst hours = now.getHours() // return number (0 - 23)\nconst minutes = now.getMinutes() // return number (0 -59)\n\nconsole.log(`${date}/${month}/${year} ${hours}:${minutes}`) // 4/1/2020 0:56\n</code></pre> <p>\ud83c\udf15  You have boundless energy. You have just completed day 3 challenges and you are three steps a head in to your way to greatness. Now do some exercises for your brain and for your muscle.</p>"},{"location":"03-day/#day-3-exercises","title":"\ud83d\udcbb Day 3: Exercises","text":""},{"location":"03-day/#exercises-level-1","title":"Exercises: Level 1","text":"<ol> <li>Declare firstName, lastName, country, city, age, isMarried, year variable and assign value to it and use the typeof operator to check different data types.</li> <li>Check if type of '10' is equal to 10</li> <li>Check if parseInt('9.8') is equal to 10</li> <li>Boolean value is either true or false.</li> <li>Write three JavaScript statement which provide truthy value.</li> <li> <p>Write three JavaScript statement which provide falsy value.</p> </li> <li> <p>Figure out the result of the following comparison expression first without using console.log(). After you decide the result confirm it using console.log()</p> </li> <li>4 &gt; 3</li> <li>4 &gt;= 3</li> <li>4 &lt; 3</li> <li>4 &lt;= 3</li> <li>4 == 4</li> <li>4 === 4</li> <li>4 != 4</li> <li>4 !== 4</li> <li>4 != '4'</li> <li>4 == '4'</li> <li>4 === '4'</li> <li> <p>Find the length of python and jargon and make a falsy comparison statement.</p> </li> <li> <p>Figure out the result of the following expressions first without using console.log(). After you decide the result confirm it by using console.log()</p> </li> <li>4 &gt; 3 &amp;&amp; 10 &lt; 12</li> <li>4 &gt; 3 &amp;&amp; 10 &gt; 12</li> <li>4 &gt; 3 || 10 &lt; 12</li> <li>4 &gt; 3 || 10 &gt; 12</li> <li>!(4 &gt; 3)</li> <li>!(4 &lt; 3)</li> <li>!(false)</li> <li>!(4 &gt; 3 &amp;&amp; 10 &lt; 12)</li> <li>!(4 &gt; 3 &amp;&amp; 10 &gt; 12)</li> <li>!(4 === '4')</li> <li> <p>There is no 'on' in both dragon and python</p> </li> <li> <p>Use the Date object to do the following activities</p> </li> <li>What is the year today?</li> <li>What is the month today as a number?</li> <li>What is the date today?</li> <li>What is the day today as a number?</li> <li>What is the hours now?</li> <li>What is the minutes now?</li> <li>Find out the numbers of seconds elapsed from January 1, 1970 to now.</li> </ol>"},{"location":"03-day/#exercises-level-2","title":"Exercises: Level 2","text":"<ol> <li>Write a script that prompt the user to enter base and height of the triangle and calculate an area of a triangle (area = 0.5 x b x h).</li> </ol> <pre><code>Enter base: 20\nEnter height: 10\nThe area of the triangle is 100\n</code></pre> <ol> <li>Write a script that prompt the user to enter side a, side b, and side c of the triangle and and calculate the perimeter of triangle (perimeter = a + b + c)</li> </ol> <pre><code>Enter side a: 5\nEnter side b: 4\nEnter side c: 3\nThe perimeter of the triangle is 12\n</code></pre> <ol> <li>Get length and width using prompt and calculate an area of rectangle (area = length x width and the perimeter of rectangle (perimeter = 2 x (length + width))</li> <li>Get radius using prompt and calculate the area of a circle (area = pi x r x r) and circumference of a circle(c = 2 x pi x r) where pi = 3.14.</li> <li>Calculate the slope, x-intercept and y-intercept of y = 2x -2</li> <li>Slope is m = (y<sub>2</sub>-y<sub>1</sub>)/(x<sub>2</sub>-x<sub>1</sub>). Find the slope between point (2, 2) and point(6,10)</li> <li>Compare the slope of above two questions.</li> <li>Calculate the value of y (y = x<sup>2</sup> + 6x + 9). Try to use different x values and figure out at what x value y is 0.</li> <li> <p>Writ a script that prompt a user to enter hours and rate per hour. Calculate pay of the person?</p> <pre><code>Enter hours: 40\nEnter rate per hour: 28\nYour weekly earning is 1120\n</code></pre> </li> <li> <p>If the length of your name is greater than 7 say, your name is long else say your name is short.</p> </li> <li> <p>Compare your first name length and your family name length and you should get this output.</p> <pre><code>let firstName = 'Asabeneh'\nlet lastName = 'Yetayeh'\n</code></pre> <pre><code>Your first name, Asabeneh is longer than your family name, Yetayeh\n</code></pre> </li> <li> <p>Declare two variables myAge and yourAge and assign them initial values and myAge and yourAge.</p> </li> </ol> <pre><code>let myAge = 250\nlet yourAge = 25\n</code></pre> <pre><code>I am 225 years older than you.\n</code></pre> <ol> <li> <p>Using prompt get the year the user was born and if the user is 18 or above allow the user to drive if not tell the user to wait a certain amount of years.</p> <pre><code>Enter birth year: 1995\nYou are 25. You are old enough to drive\n\nEnter birth year: 2005\nYou are 15. You will be allowed to drive after 3 years.\n</code></pre> </li> <li> <p>Write a script that prompt the user to enter number of years. Calculate the number of seconds a person can live. Assume some one lives just hundred years</p> </li> </ol> <pre><code>Enter number of years you live: 100\nYou lived 3153600000 seconds.\n</code></pre> <ol> <li>Create a human readable time format using the Date time object</li> <li>YYYY-MM-DD HH:mm</li> <li>DD-MM-YYYY HH:mm</li> <li>DD/MM/YYYY HH:mm</li> </ol>"},{"location":"03-day/#exercises-level-3","title":"Exercises: Level 3","text":"<ol> <li>Create a human readable time format using the Date time object. The hour and the minute should be all the time two digits(7 hours should be 07 and 5 minutes should be 05 )</li> <li>YYY-MM-DD HH:mm eg. 20120-01-02 07:05</li> </ol>"},{"location":"04-day/","title":"\ud83d\udcd4 Day 4","text":""},{"location":"04-day/#conditionals","title":"Conditionals","text":"<p>Conditional statements are used for  make decisions based on different conditions. By default , statements in JavaScript script executed sequentially from top to bottom. If the processing logic require so, the sequential flow of execution can be altered in two ways:</p> <ul> <li>Conditional execution: a block of one or more statements will be executed if a certain expression is true</li> <li>Repetitive execution: a block of one or more statements will be repetitively executed as long as a certain expression is true. In this section, we will cover if, else , else if statements. The comparison and logical operators we learned in the previous sections will be useful in here.</li> </ul> <p>Conditions can be implementing using the following ways:</p> <ul> <li>if</li> <li>if else</li> <li>if else if else</li> <li>switch</li> <li>ternary operator</li> </ul>"},{"location":"04-day/#if","title":"If","text":"<p>In JavaScript and other programming languages the key word if is to used check if a condition is true and to execute the block code. To create an if condition, we need if keyword, condition inside a parenthesis and block of code inside a curly bracket({}).</p> <pre><code>// syntax\nif (condition) {\n  //this part of code runs for truthy condition\n}\n</code></pre> <p>Example:</p> <pre><code>let num = 3\nif (num &gt; 0) {\n  console.log(`${num} is a positive number`)\n}\n//  3 is a positive number\n</code></pre> <p>As you can see in the  condition example above, 3 is greater than 0, so it is a positive number. The condition was true and the block of code was executed. However, if the condition is false, we won't  see any results.</p> <pre><code>let isRaining = true\nif (isRaining) {\n  console.log('Remember to take your rain coat.')\n}\n</code></pre> <p>The same goes for the second condition, if isRaining is false the if block will not be executed and we do not see any output. In order to see the result of a falsy condition, we should have another block, which is going to be else.</p>"},{"location":"04-day/#if-else","title":"If Else","text":"<p>If condition is true the first block will be executed, if not the else condition will be executed.</p> <pre><code>// syntax\nif (condition) {\n  // this part of code runs for truthy condition\n} else {\n  // this part of code runs for false condition\n}\n</code></pre> <pre><code>let num = 3\nif (num &gt; 0) {\n  console.log(`${num} is a positive number`)\n} else {\n  console.log(`${num} is a negative number`)\n}\n//  3 is a positive number\n\nnum = -3\nif (num &gt; 0) {\n  console.log(`${num} is a positive number`)\n} else {\n  console.log(`${num} is a negative number`)\n}\n//  -3 is a negative number\n</code></pre> <pre><code>let isRaining = true\nif (isRaining) {\n  console.log('You need a rain coat.')\n} else {\n  console.log('No need for a rain coat.')\n}\n// You need a rain coat.\n\nisRaining = false\nif (isRaining) {\n  console.log('You need a rain coat.')\n} else {\n  console.log('No need for a rain coat.')\n}\n// No need for a rain coat.\n</code></pre> <p>The last condition is false, therefore the else block was executed. What if we have more than two conditions? In that case,  we would use else if conditions.</p>"},{"location":"04-day/#if-else-if-else","title":"If  Else if Else","text":"<p>On our daily life, we make decisions on daily basis. We make decisions not by checking  one or two conditions instead we make decisions based on multiple conditions. As similar to our daily life, programming is also full of conditions. We use else if when we have multiple conditions.</p> <pre><code>// syntax\nif (condition) {\n     // code\n} else if (condition) {\n   // code\n} else {\n    //  code\n\n}\n</code></pre> <p>Example:</p> <pre><code>let a = 0\nif (a &gt; 0) {\n  console.log(`${a} is a positive number`)\n} else if (a &lt; 0) {\n  console.log(`${a} is a negative number`)\n} else if (a == 0) {\n  console.log(`${a} is zero`)\n} else {\n  console.log(`${a} is not a number`)\n}\n</code></pre> <pre><code>// if else if else\nlet weather = 'sunny'\nif (weather === 'rainy') {\n  console.log('You need a rain coat.')\n} else if (weather === 'cloudy') {\n  console.log('It might be cold, you need a jacket.')\n} else if (weather === 'sunny') {\n  console.log('Go out freely.')\n} else {\n  console.log('No need for rain coat.')\n}\n</code></pre>"},{"location":"04-day/#switch","title":"Switch","text":"<p>Switch  is an alternative for if else if else else. The switch statement starts with a switch keyword followed by a parenthesis and code block. Inside the code block we will have different cases. Case block runs if the value in the switch statement parenthesis matches with the case value. The break statement is to terminate execution so the code execution  does not go down after the condition is satisfied.  The default block runs if all the cases don't satisfy the condition.</p> <pre><code>switch(caseValue){\n  case 1:\n    // code\n    break\n  case 2:\n   // code\n   break\n  case 3:\n   // code\n   break\n  default:\n   // code\n}\n</code></pre> <pre><code>let weather = 'cloudy'\nswitch (weather) {\n  case 'rainy':\n    console.log('You need a rain coat.')\n    break\n  case 'cloudy':\n    console.log('It might be cold, you need a jacket.')\n    break\n  case 'sunny':\n    console.log('Go out freely.')\n    break\n  default:\n    console.log(' No need for rain coat.')\n}\n\n// Switch More Examples\nlet dayUserInput = prompt('What day is today ?')\nlet day = dayUserInput.toLowerCase()\n\nswitch (day) {\n  case 'monday':\n    console.log('Today is Monday')\n    break\n  case 'tuesday':\n    console.log('Today is Tuesday')\n    break\n  case 'wednesday':\n    console.log('Today is Wednesday')\n    break\n  case 'thursday':\n    console.log('Today is Thursday')\n    break\n  case 'friday':\n    console.log('Today is Friday')\n    break\n  case 'saturday':\n    console.log('Today is Saturday')\n    break\n  case 'sunday':\n    console.log('Today is Sunday')\n    break\n  default:\n    console.log('It is not a week day.')\n}\n</code></pre> <p>// Examples to use conditions in the cases</p> <pre><code>let num = prompt('Enter number');\nswitch (true) {\n  case num &gt; 0:\n    console.log('Number is positive');\n    break;\n  case num == 0:\n    console.log('Numbers is zero');\n    break;\n  case num &lt; 0:\n    console.log('Number is negative');\n    break;\n  default:\n    console.log('Entered value was not a number');\n}\n</code></pre>"},{"location":"04-day/#ternary-operators","title":"Ternary Operators","text":"<p>Another way to write conditionals is using ternary operators. We have covered this in other sections, but we should also mention it here.</p> <pre><code>let isRaining = true\nisRaining\n  ? console.log('You need a rain coat.')\n  : console.log('No need for a rain coat.')\n</code></pre> <p>\ud83c\udf15  You are extraordinary and you have a remarkable potential. You have just completed day 4 challenges and you are four steps ahead to your way to greatness. Now do some exercises for your brain and  muscle.  </p>"},{"location":"04-day/#exercises","title":"\ud83d\udcbb Exercises","text":""},{"location":"04-day/#exercises-level-1","title":"Exercises: Level 1","text":"<ol> <li>Get user input using prompt(\u201cEnter your age:\u201d). If user is 18 or older , give feedback:'You are old enough to drive' but if not 18 give another feedback stating to  wait for the number of years he needs to turn 18.</li> </ol> <pre><code>Enter your age: 30\nYou are old enough to drive.\n\nEnter your age:15\nYou are left with 3 years to drive.\n</code></pre> <ol> <li>Compare the values of myAge and yourAge using if \u2026 else. Based on the comparison and log the result to console stating who is older (me or you). Use prompt(\u201cEnter your age:\u201d) to get the age as input.</li> </ol> <pre><code>Enter your age: 30\nYou are 5 years older than me.\n</code></pre> <ol> <li> <p>If a is greater than b return 'a is greater than b' else 'a is less than b'. Try to implement it in to ways</p> <ul> <li>using if else</li> <li>ternary operator.</li> </ul> <pre><code>  let a = 4\n  let b = 3\n</code></pre> <pre><code>  4 is greater than 3\n</code></pre> </li> <li> <p>Even numbers are divisible by 2 and the remainder is zero. How do you check, if a number is even or not using JavaScript?</p> <pre><code>Enter a number: 2\n2 is an even number\n\nEnter a number: 9\n9 is is an odd number.\n</code></pre> </li> </ol>"},{"location":"04-day/#exercises-level-2","title":"Exercises: Level 2","text":"<ol> <li>Write a code which  can give grades to students according to theirs scores:</li> <li>80-100, A</li> <li>70-89, B</li> <li>60-69, C</li> <li>50-59, D</li> <li>0-49, F</li> <li>Check if the season is Autumn, Winter, Spring or Summer.    If the user input is :</li> <li>September, October or November, the season is Autumn.</li> <li>December, January or February, the season is Winter.</li> <li>March, April or May, the season is Spring</li> <li>June, July or August, the season is Summer</li> <li>Check if a day is weekend day or a working day. Your script will take day as an input.</li> </ol> <pre><code>  What is the day  today? Saturday\n  Saturday is a weekend.\n\n  What is the day today? saturDaY\n  Saturday is a weekend.\n\n  What is the day today? Friday\n  Friday is a working day.\n\n  What is the day today? FrIDAy\n  Friday is a working day.\n</code></pre>"},{"location":"04-day/#exercises-level-3","title":"Exercises: Level 3","text":"<ol> <li>Write a program which tells the number of days in a month.</li> </ol> <pre><code>  Enter a month: January\n  January has 31 days.\n\n  Enter a month: JANUARY\n  January has 31 day\n\n  Enter a month: February\n  February has 28 days.\n\n  Enter a month: FEbruary\n  February has 28 days.\n</code></pre> <ol> <li>Write a program which tells the number of days in a month, now consider leap year.</li> </ol> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"05-day/","title":"\ud83d\udcd4 Day 5","text":""},{"location":"05-day/#arrays","title":"Arrays","text":"<p>In contrast to variables, an array can store multiple values. Each value in an array has an index, and each index has a reference in a memory address. Each value can be accessed by using their indexes. The index of an array starts from zero, and the  index of the last element is less by one from the length of the array.</p> <p>An array is a collection of different data types which are ordered and changeable(modifiable). An array allows storing duplicate elements and different data types. An array can be empty, or it may have different data type values.</p>"},{"location":"05-day/#how-to-create-an-empty-array","title":"How to create an empty array","text":"<p>In JavaScript, we can create an array in different ways. Let us see different ways to create an array. It is very common to use const instead of let to declare an array variable. If you ar using const it means you do not use that variable name again.</p> <ul> <li>Using Array constructor</li> </ul> <pre><code>// syntax\nconst arr = Array()\n// or\n// let arr = new Array()\nconsole.log(arr) // []\n</code></pre> <ul> <li>Using square brackets([])</li> </ul> <pre><code>// syntax\n// This the most recommended way to create an empty list\nconst arr = []\nconsole.log(arr)\n</code></pre>"},{"location":"05-day/#how-to-create-an-array-with-values","title":"How to create an array with values","text":"<p>Array with initial values. We use length property to find the length of an array.</p> <pre><code>const numbers = [0, 3.14, 9.81, 37, 98.6, 100] // array of numbers\nconst fruits = ['banana', 'orange', 'mango', 'lemon'] // array of strings, fruits\nconst vegetables = ['Tomato', 'Potato', 'Cabbage', 'Onion', 'Carrot'] // array of strings, vegetables\nconst animalProducts = ['milk', 'meat', 'butter', 'yoghurt'] // array of strings, products\nconst webTechs = ['HTML', 'CSS', 'JS', 'React', 'Redux', 'Node', 'MongDB'] // array of web technologies\nconst countries = ['Finland', 'Denmark', 'Sweden', 'Norway', 'Iceland'] // array of strings, countries\n\n// Print the array and its length\n\nconsole.log('Numbers:', numbers)\nconsole.log('Number of numbers:', numbers.length)\n\nconsole.log('Fruits:', fruits)\nconsole.log('Number of fruits:', fruits.length)\n\nconsole.log('Vegetables:', vegetables)\nconsole.log('Number of vegetables:', vegetables.length)\n\nconsole.log('Animal products:', animalProducts)\nconsole.log('Number of animal products:', animalProducts.length)\n\nconsole.log('Web technologies:', webTechs)\nconsole.log('Number of web technologies:', webTechs.length)\n\nconsole.log('Countries:', countries)\nconsole.log('Number of countries:', countries.length)\n</code></pre> <pre><code>Numbers: [0, 3.14, 9.81, 37, 98.6, 100]\nNumber of numbers: 6\nFruits: ['banana', 'orange', 'mango', 'lemon']\nNumber of fruits: 4\nVegetables: ['Tomato', 'Potato', 'Cabbage', 'Onion', 'Carrot']\nNumber of vegetables: 5\nAnimal products: ['milk', 'meat', 'butter', 'yoghurt']\nNumber of animal products: 4\nWeb technologies: ['HTML', 'CSS', 'JS', 'React', 'Redux', 'Node', 'MongDB']\nNumber of web technologies: 7\nCountries: ['Finland', 'Estonia', 'Denmark', 'Sweden', 'Norway']\nNumber of countries: 5\n</code></pre> <ul> <li>Array can have items of different data types</li> </ul> <pre><code>const arr = [\n    'Asabeneh',\n    250,\n    true,\n    { country: 'Finland', city: 'Helsinki' },\n    { skills: ['HTML', 'CSS', 'JS', 'React', 'Python'] }\n] // arr containing different data types\nconsole.log(arr)\n</code></pre>"},{"location":"05-day/#creating-an-array-using-split","title":"Creating an array using split","text":"<p>As we have seen in the earlier section, we can split a string at different positions, and we can change to an array. Let us see the examples below.</p> <pre><code>let js = 'JavaScript'\nconst charsInJavaScript = js.split('')\n\nconsole.log(charsInJavaScript) // [\"J\", \"a\", \"v\", \"a\", \"S\", \"c\", \"r\", \"i\", \"p\", \"t\"]\n\nlet companiesString = 'Facebook, Google, Microsoft, Apple, IBM, Oracle, Amazon'\nconst companies = companiesString.split(',')\n\nconsole.log(companies) // [\"Facebook\", \" Google\", \" Microsoft\", \" Apple\", \" IBM\", \" Oracle\", \" Amazon\"]\nlet txt =\n  'I love teaching and empowering people. I teach HTML, CSS, JS, React, Python.'\nconst words = txt.split(' ')\n\nconsole.log(words)\n// the text has special characters think how you can just get only the words\n// [\"I\", \"love\", \"teaching\", \"and\", \"empowering\", \"people.\", \"I\", \"teach\", \"HTML,\", \"CSS,\", \"JS,\", \"React,\", \"Python\"]\n</code></pre>"},{"location":"05-day/#accessing-array-items-using-index","title":"Accessing array items using index","text":"<p>We access each element in an array using their index. An array index starts from 0. The picture below clearly shows the index of each element in the array.</p> <p></p> <pre><code>const fruits = ['banana', 'orange', 'mango', 'lemon']\nlet firstFruit = fruits[0] // we are accessing the first item using its index\n\nconsole.log(firstFruit) // banana\n\nsecondFruit = fruits[1]\nconsole.log(secondFruit) // orange\n\nlet lastFruit = fruits[3]\nconsole.log(lastFruit) // lemon\n// Last index can be calculated as follows\n\nlet lastIndex = fruits.length - 1\nlastFruit = fruits[lastIndex]\n\nconsole.log(lastFruit)  // lemon\n</code></pre> <pre><code>const numbers = [0, 3.14, 9.81, 37, 98.6, 100]  // set of numbers\n\nconsole.log(numbers.length)  // =&gt; to know the size of the array, which is 6\nconsole.log(numbers)         // -&gt; [0, 3.14, 9.81, 37, 98.6, 100]\nconsole.log(numbers[0])      //  -&gt; 0\nconsole.log(numbers[5])      //  -&gt; 100\n\nlet lastIndex = numbers.length - 1;\nconsole.log(numbers[lastIndex]) // -&gt; 100\n</code></pre> <pre><code>const webTechs = [\n  'HTML',\n  'CSS',\n  'JavaScript',\n  'React',\n  'Redux',\n  'Node',\n  'MongoDB'\n] // List of web technologies\n\nconsole.log(webTechs)        // all the array items\nconsole.log(webTechs.length) // =&gt; to know the size of the array, which is 7\nconsole.log(webTechs[0])     //  -&gt; HTML\nconsole.log(webTechs[6])     //  -&gt; MongoDB\n\nlet lastIndex = webTechs.length - 1\nconsole.log(webTechs[lastIndex]) // -&gt; MongoDB\n</code></pre> <pre><code>const countries = [\n  'Albania',\n  'Bolivia',\n  'Canada',\n  'Denmark',\n  'Ethiopia',\n  'Finland',\n  'Germany',\n  'Hungary',\n  'Ireland',\n  'Japan',\n  'Kenya'\n] // List of countries\n\nconsole.log(countries)      // -&gt; all countries in array\nconsole.log(countries[0])   //  -&gt; Albania\nconsole.log(countries[10])  //  -&gt; Kenya\n\nlet lastIndex = countries.length - 1;\nconsole.log(countries[lastIndex]) //  -&gt; Kenya\n</code></pre> <pre><code>const shoppingCart = [\n  'Milk',\n  'Mango',\n  'Tomato',\n  'Potato',\n  'Avocado',\n  'Meat',\n  'Eggs',\n  'Sugar'\n] // List of food products\n\nconsole.log(shoppingCart) // -&gt; all shoppingCart in array\nconsole.log(shoppingCart[0]) //  -&gt; Milk\nconsole.log(shoppingCart[7]) //  -&gt; Sugar\n\nlet lastIndex = shoppingCart.length - 1;\nconsole.log(shoppingCart[lastIndex]) //  -&gt; Sugar\n</code></pre>"},{"location":"05-day/#modifying-array-element","title":"Modifying array element","text":"<p>An array is mutable(modifiable). Once an array is created, we can modify the contents of the array elements.</p> <pre><code>const numbers = [1, 2, 3, 4, 5]\nnumbers[0] = 10      // changing 1 at index 0 to 10\nnumbers[1] = 20      // changing  2 at index 1 to 20\n\nconsole.log(numbers) // [10, 20, 3, 4, 5]\n\nconst countries = [\n  'Albania',\n  'Bolivia',\n  'Canada',\n  'Denmark',\n  'Ethiopia',\n  'Finland',\n  'Germany',\n  'Hungary',\n  'Ireland',\n  'Japan',\n  'Kenya'\n]\n\ncountries[0] = 'Afghanistan'  // Replacing Albania by Afghanistan\nlet lastIndex = countries.length - 1\ncountries[lastIndex] = 'Korea' // Replacing Kenya by Korea\n\nconsole.log(countries)\n</code></pre> <pre><code>[\"Afghanistan\", \"Bolivia\", \"Canada\", \"Denmark\", \"Ethiopia\", \"Finland\", \"Germany\", \"Hungary\", \"Ireland\", \"Japan\", \"Korea\"]\n</code></pre>"},{"location":"05-day/#methods-to-manipulate-array","title":"Methods to manipulate array","text":"<p>There are different methods to manipulate an array. These are some of the available methods to deal with arrays:Array, length, concat, indexOf, slice, splice, join, toString, includes, lastIndexOf, isArray, fill, push, pop, shift, unshift</p>"},{"location":"05-day/#array-constructor","title":"Array Constructor","text":"<p>Array:To create an array.</p> <pre><code>const arr = Array() // creates an an empty array\nconsole.log(arr)\n\nconst eightEmptyValues = Array(8) // it creates eight empty values\nconsole.log(eightEmptyValues) // [empty x 8]\n</code></pre>"},{"location":"05-day/#creating-static-values-with-fill","title":"Creating static values with fill","text":"<p>fill: Fill all the array elements with a static value</p> <pre><code>const arr = Array() // creates an an empty array\nconsole.log(arr)\n\nconst eightXvalues = Array(8).fill('X') // it creates eight element values filled with 'X'\nconsole.log(eightXvalues) // ['X', 'X','X','X','X','X','X','X']\n\nconst eight0values = Array(8).fill(0) // it creates eight element values filled with '0'\nconsole.log(eight0values) // [0, 0, 0, 0, 0, 0, 0, 0]\n\nconst four4values = Array(4).fill(4) // it creates 4 element values filled with '4'\nconsole.log(four4values) // [4, 4, 4, 4]\n</code></pre>"},{"location":"05-day/#concatenating-array-using-concat","title":"Concatenating array using concat","text":"<p>concat:To concatenate two arrays.</p> <pre><code>const firstList = [1, 2, 3]\nconst secondList = [4, 5, 6]\nconst thirdList = firstList.concat(secondList)\n\nconsole.log(thirdList) // [1, 2, 3, 4, 5, 6]\n</code></pre> <pre><code>const fruits = ['banana', 'orange', 'mango', 'lemon']                 // array of fruits\nconst vegetables = ['Tomato', 'Potato', 'Cabbage', 'Onion', 'Carrot'] // array of vegetables\nconst fruitsAndVegetables = fruits.concat(vegetables)                 // concatenate the two arrays\n\nconsole.log(fruitsAndVegetables)\n</code></pre> <pre><code>[\"banana\", \"orange\", \"mango\", \"lemon\", \"Tomato\", \"Potato\", \"Cabbage\", \"Onion\", \"Carrot\"]\n</code></pre>"},{"location":"05-day/#getting-array-length","title":"Getting array length","text":"<p>Length:To know the size of the array</p> <pre><code>const numbers = [1, 2, 3, 4, 5]\nconsole.log(numbers.length) // -&gt; 5 is the size of the array\n</code></pre>"},{"location":"05-day/#getting-index-an-element-in-arr-array","title":"Getting index an element in arr array","text":"<p>indexOf:To check if an item exist in an array. If it exists it returns the index else it returns -1.</p> <pre><code>const numbers = [1, 2, 3, 4, 5]\n\nconsole.log(numbers.indexOf(5)) // -&gt; 4\nconsole.log(numbers.indexOf(0)) // -&gt; -1\nconsole.log(numbers.indexOf(1)) // -&gt; 0\nconsole.log(numbers.indexOf(6)) // -&gt; -1\n</code></pre> <p>Check an element if it exist in an array.</p> <ul> <li>Check items in a list</li> </ul> <pre><code>// let us check if a banana exist in the array\n\nconst fruits = ['banana', 'orange', 'mango', 'lemon']\nlet index = fruits.indexOf('banana')  // 0\n\nif(index === -1){\n   console.log('This fruit does not exist in the array')  \n} else {\n    console.log('This fruit does exist in the array')\n}\n// This fruit does exist in the array\n\n// we can use also ternary here\nindex === -1 ? console.log('This fruit does not exist in the array'): console.log('This fruit does exist in the array')\n\n// let us check if an avocado exist in the array\nlet indexOfAvocado = fruits.indexOf('avocado')  // -1, if the element not found index is -1\nif(indexOfAvocado === -1){\n   console.log('This fruit does not exist in the array')  \n} else {\n    console.log('This fruit does exist in the array')\n}\n// This fruit does not exist in the array\n</code></pre>"},{"location":"05-day/#getting-last-index-of-an-element-in-array","title":"Getting last index of an element in array","text":"<p>lastIndexOf: It gives the position of the last item in the array. If it exist, it returns the index else it returns -1.</p> <pre><code>const numbers = [1, 2, 3, 4, 5, 3, 1, 2]\n\nconsole.log(numbers.lastIndexOf(2)) // 7\nconsole.log(numbers.lastIndexOf(0)) // -1\nconsole.log(numbers.lastIndexOf(1)) //  6\nconsole.log(numbers.lastIndexOf(4)) //  3\nconsole.log(numbers.lastIndexOf(6)) // -1\n</code></pre> <p>includes:To check if an item exist in an array. If it exist it returns the true else it returns false.</p> <pre><code>const numbers = [1, 2, 3, 4, 5]\n\nconsole.log(numbers.includes(5)) // true\nconsole.log(numbers.includes(0)) // false\nconsole.log(numbers.includes(1)) // true\nconsole.log(numbers.includes(6)) // false\n\nconst webTechs = [\n  'HTML',\n  'CSS',\n  'JavaScript',\n  'React',\n  'Redux',\n  'Node',\n  'MongoDB'\n] // List of web technologies\n\nconsole.log(webTechs.includes('Node'))  // true\nconsole.log(webTechs.includes('C'))     // false\n</code></pre>"},{"location":"05-day/#checking-array","title":"Checking array","text":"<p>Array.isArray:To check if the data type is an array</p> <pre><code>const numbers = [1, 2, 3, 4, 5]\nconsole.log(Array.isArray(numbers)) // true\n\nconst number = 100\nconsole.log(Array.isArray(number)) // false\n</code></pre>"},{"location":"05-day/#converting-array-to-string","title":"Converting array to string","text":"<p>toString:Converts array to string</p> <pre><code>const numbers = [1, 2, 3, 4, 5]\nconsole.log(numbers.toString()) // 1,2,3,4,5\n\nconst names = ['Asabeneh', 'Mathias', 'Elias', 'Brook']\nconsole.log(names.toString()) // Asabeneh,Mathias,Elias,Brook\n</code></pre>"},{"location":"05-day/#joining-array-elements","title":"Joining array elements","text":"<p>join: It is used to join the elements of the array, the argument we passed in the join method will be joined in the array and return as a string. By default, it joins with a comma, but we can pass different string parameter which can be joined between the items.</p> <pre><code>const numbers = [1, 2, 3, 4, 5]\nconsole.log(numbers.join()) // 1,2,3,4,5\n\nconst names = ['Asabeneh', 'Mathias', 'Elias', 'Brook']\n\nconsole.log(names.join()) // Asabeneh,Mathias,Elias,Brook\nconsole.log(names.join('')) //AsabenehMathiasEliasBrook\nconsole.log(names.join(' ')) //Asabeneh Mathias Elias Brook\nconsole.log(names.join(', ')) //Asabeneh, Mathias, Elias, Brook\nconsole.log(names.join(' # ')) //Asabeneh # Mathias # Elias # Brook\n\nconst webTechs = [\n  'HTML',\n  'CSS',\n  'JavaScript',\n  'React',\n  'Redux',\n  'Node',\n  'MongoDB'\n] // List of web technologies\n\nconsole.log(webTechs.join())       // \"HTML,CSS,JavaScript,React,Redux,Node,MongoDB\"\nconsole.log(webTechs.join(' # '))  // \"HTML # CSS # JavaScript # React # Redux # Node # MongoDB\"\n</code></pre>"},{"location":"05-day/#slice-array-elements","title":"Slice array elements","text":"<p>Slice: To cut out a multiple items in range. It takes two parameters:starting and ending position. It doesn't include the ending position.</p> <pre><code>  const numbers = [1,2,3,4,5]\n\n  console.log(numbers.slice()) // -&gt; it copies all  item\n  console.log(numbers.slice(0)) // -&gt; it copies all  item\n  console.log(numbers.slice(0, numbers.length)) // it copies all  item\n  console.log(numbers.slice(1,4)) // -&gt; [2,3,4] // it doesn't include the ending position\n</code></pre>"},{"location":"05-day/#splice-method-in-array","title":"Splice method in array","text":"<p>Splice: It takes three parameters:Starting position, number of times to be removed and number of items to be added.</p> <pre><code>  const numbers = [1, 2, 3, 4, 5]\n  numbers.splice()\n  console.log(numbers)                // -&gt; remove all items\n</code></pre> <pre><code>  const numbers = [1, 2, 3, 4, 5]\n    numbers.splice(0,1)\n  console.log(numbers)            // remove the first item\n</code></pre> <pre><code>  const numbers = [1, 2, 3, 4, 5, 6]\n    numbers.splice(3, 3, 7, 8, 9)\n  console.log(numbers.splice(3, 3, 7, 8, 9))  // -&gt; [1, 2, 3, 7, 8, 9] //it removes three item and replace three items\n</code></pre>"},{"location":"05-day/#adding-item-to-an-array-using-push","title":"Adding item to an array using push","text":"<p>Push: adding item in the end. To add item to the end of an existing array we use the push method.</p> <pre><code>// syntax\nconst arr  = ['item1', 'item2','item3']\narr.push('new item')\nconsole.log(arr)\n// ['item1', 'item2','item3','new item']\n</code></pre> <pre><code>const numbers = [1, 2, 3, 4, 5]\nnumbers.push(6)\nconsole.log(numbers) // -&gt; [1,2,3,4,5,6]\n\nnumbers.pop() // -&gt; remove one item from the end\nconsole.log(numbers) // -&gt; [1,2,3,4,5]\n</code></pre> <pre><code>let fruits = ['banana', 'orange', 'mango', 'lemon']\nfruits.push('apple')\nconsole.log(fruits)    // ['banana', 'orange', 'mango', 'lemon', 'apple']\n\nfruits.push('lime')\nconsole.log(fruits)   // ['banana', 'orange', 'mango', 'lemon', 'apple', 'lime']\n</code></pre>"},{"location":"05-day/#removing-the-end-element-using-pop","title":"Removing the end element using pop","text":"<p>pop: Removing item in the end.</p> <pre><code>const numbers = [1, 2, 3, 4, 5]\nnumbers.pop() // -&gt; remove one item from the end\nconsole.log(numbers) // -&gt; [1,2,3,4]\n</code></pre>"},{"location":"05-day/#removing-an-element-from-the-beginning","title":"Removing an element from the beginning","text":"<p>shift: Removing one array element in the beginning of the array.</p> <pre><code>const numbers = [1, 2, 3, 4, 5]\nnumbers.shift() // -&gt; remove one item from the beginning\nconsole.log(numbers) // -&gt; [2,3,4,5]\n</code></pre>"},{"location":"05-day/#add-an-element-from-the-beginning","title":"Add an element from the beginning","text":"<p>unshift: Adding array element in the beginning of the array.</p> <pre><code>const numbers = [1, 2, 3, 4, 5]\nnumbers.unshift(0) // -&gt; add one item from the beginning\nconsole.log(numbers) // -&gt; [0,1,2,3,4,5]\n</code></pre>"},{"location":"05-day/#reversing-array-order","title":"Reversing array order","text":"<p>reverse: reverse the order of an array.</p> <pre><code>const numbers = [1, 2, 3, 4, 5]\nnumbers.reverse() // -&gt; reverse array order\nconsole.log(numbers) // [5, 4, 3, 2, 1]\n\nnumbers.reverse()\nconsole.log(numbers) // [1, 2, 3, 4, 5]\n</code></pre>"},{"location":"05-day/#sorting-elements-in-array","title":"Sorting elements in array","text":"<p>sort: arrange array elements in ascending order. Sort takes a call back function, we will see how we use sort with a call back function in the coming sections.</p> <pre><code>const webTechs = [\n  'HTML',\n  'CSS',\n  'JavaScript',\n  'React',\n  'Redux',\n  'Node',\n  'MongoDB'\n]\n\nwebTechs.sort()\nconsole.log(webTechs) // [\"CSS\", \"HTML\", \"JavaScript\", \"MongoDB\", \"Node\", \"React\", \"Redux\"]\n\nwebTechs.reverse() // after sorting we can reverse it\nconsole.log(webTechs) // [\"Redux\", \"React\", \"Node\", \"MongoDB\", \"JavaScript\", \"HTML\", \"CSS\"]\n</code></pre>"},{"location":"05-day/#array-of-arrays","title":"Array of arrays","text":"<p>Array can store different data types including an array itself. Let us create an array of arrays</p> <pre><code>const firstNums = [1, 2, 3]\nconst secondNums = [1, 4, 9]\n\nconst arrayOfArray =  [[1, 2, 3], [1, 2, 3]]\nconsole.log(arrayOfArray[0]) // [1, 2, 3]\n\n const frontEnd = ['HTML', 'CSS', 'JS', 'React', 'Redux']\n const backEnd = ['Node','Express', 'MongoDB']\n const fullStack = [frontEnd, backEnd]\n console.log(fullStack)   // [[\"HTML\", \"CSS\", \"JS\", \"React\", \"Redux\"], [\"Node\", \"Express\", \"MongoDB\"]]\n console.log(fullStack.length)  // 2\n console.log(fullStack[0])  // [\"HTML\", \"CSS\", \"JS\", \"React\", \"Redux\"]\n console.log(fullStack[1]) // [\"Node\", \"Express\", \"MongoDB\"]\n</code></pre> <p>\ud83c\udf15  You are diligent and you have already achieved quite a lot. You have just completed day 5 challenges and you are 5 steps a head in to your way to greatness. Now do some exercises for your brain and for your muscle.</p>"},{"location":"05-day/#exercise","title":"\ud83d\udcbb Exercise","text":""},{"location":"05-day/#exercise-level-1","title":"Exercise: Level 1","text":"<pre><code>const countries = [\n  'Albania',\n  'Bolivia',\n  'Canada',\n  'Denmark',\n  'Ethiopia',\n  'Finland',\n  'Germany',\n  'Hungary',\n  'Ireland',\n  'Japan',\n  'Kenya'\n]\n\nconst webTechs = [\n  'HTML',\n  'CSS',\n  'JavaScript',\n  'React',\n  'Redux',\n  'Node',\n  'MongoDB'\n]\n</code></pre> <ol> <li>Declare an empty array;</li> <li>Declare an array with more than 5 number of elements</li> <li>Find the length of your array</li> <li>Get the first item, the middle item and the last item of the array</li> <li>Declare an array called mixedDataTypes, put different data types in the array and find the length of the array. The array size should  be greater than 5</li> <li>Declare an array variable name itCompanies and assign initial values Facebook, Google, Microsoft, Apple, IBM, Oracle and Amazon</li> <li>Print the array using console.log()</li> <li>Print the number of companies in the array</li> <li>Print the first company, middle and last company</li> <li>Print out each company</li> <li>Change each company name  to uppercase one by one and print them out</li> <li>Print the array like as a sentence: Facebook, Google, Microsoft, Apple, IBM,Oracle and Amazon are big IT companies.</li> <li>Check if a certain company exists in the itCompanies array. If it exist return the company else return a company is not found</li> <li>Filter out companies which have more than one 'o' without the filter method</li> <li>Sort the array using sort() method</li> <li>Reverse the array using reverse() method</li> <li>Slice out the first 3 companies from the array</li> <li>Slice out the last 3 companies from the array</li> <li>Slice out the middle IT company or companies from the array</li> <li>Remove the first IT company from the array</li> <li>Remove the middle IT company or companies from the array</li> <li>Remove the last IT company from the array</li> <li>Remove all IT companies</li> </ol>"},{"location":"05-day/#exercise-level-2","title":"Exercise: Level 2","text":"<ol> <li>Create a separate countries.js file and store the countries array in to this file, create a separate file web_techs.js and store the webTechs array in to this file. Access both file in main.js file</li> <li> <p>First remove all the punctuations and change the string to array and count the number of words in the array</p> <pre><code>let text =\n'I love teaching and empowering people. I teach HTML, CSS, JS, React, Python.'\nconsole.log(words)\nconsole.log(words.length)\n</code></pre> <pre><code>[\"I\", \"love\", \"teaching\", \"and\", \"empowering\", \"people\", \"I\", \"teach\", \"HTML\", \"CSS\", \"JS\", \"React\", \"Python\"]\n\n13\n</code></pre> </li> <li> <p>In the following shopping cart add, remove, edit items</p> <pre><code>const shoppingCart = ['Milk', 'Coffee', 'Tea', 'Honey']\n</code></pre> </li> <li> <p>add 'Meat' in the beginning of your shopping cart if it has not been already added</p> </li> <li>add Sugar at the end of you shopping cart if it has not been already added</li> <li>remove 'Honey' if you are allergic to honey</li> <li>modify Tea to 'Green Tea'</li> <li>In countries array check if 'Ethiopia' exists in the array if it exists print 'ETHIOPIA'. If it does not exist add to the countries list.</li> <li>In the webTechs array check if Sass exists in the array  and if it exists print 'Sass is a CSS preprocess'. If it does not exist add Sass to the array and print the array.</li> <li> <p>Concatenate the following two variables and store it in a fullStack variable.</p> <pre><code>const frontEnd = ['HTML', 'CSS', 'JS', 'React', 'Redux']\nconst backEnd = ['Node','Express', 'MongoDB']\n\nconsole.log(fullStack)\n</code></pre> <pre><code>[\"HTML\", \"CSS\", \"JS\", \"React\", \"Redux\", \"Node\", \"Express\", \"MongoDB\"]\n</code></pre> </li> </ol>"},{"location":"05-day/#exercise-level-3","title":"Exercise: Level 3","text":"<ol> <li> <p>The following is an array of 10 students ages:</p> <pre><code>const ages = [19, 22, 19, 24, 20, 25, 26, 24, 25, 24]\n</code></pre> <ul> <li>Sort the array and find the min and max age</li> <li>Find the median age(one middle item or two middle items divided by two)</li> <li>Find the average age(all items divided by number of items)</li> <li>Find the range of the ages(max minus min)</li> <li>Compare the value of (min - average) and (max - average), use abs() method 1.Slice the first ten countries from the countries array</li> <li>Find the middle country(ies) in the countries array</li> <li>Divide the countries array into two equal arrays if it is even.  If countries array is not even , one more country for the first half.</li> </ul> </li> </ol> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"06-day/","title":"\ud83d\udcd4 Day 6","text":""},{"location":"06-day/#loops","title":"Loops","text":"<p>Most of the activities we do in life are full of repetitions. Imagine if I ask you to print out from 0 to 100 using console.log(). To implement this simple task it may take you 2 to 5 minutes, such kind of tedious and repetitive task can be carried out using loop. If you prefer watching the videos, you can checkout the video tutorials</p> <p>In programming languages to carry out repetitive task we use different kinds of loops. The following examples are the commonly used loops in JavaScript and other programming languages.</p>"},{"location":"06-day/#for-loop","title":"for Loop","text":"<pre><code>// For loop structure\nfor(initialization, condition, increment/decrement){\n  // code goes here\n}\n</code></pre> <pre><code>for(let i = 0; i &lt;= 5; i++){\n  console.log(i)\n}\n\n// 0 1 2 3 4 5\n</code></pre> <pre><code>for(let i = 5; i &gt;= 0; i--){\n  console.log(i)\n}\n\n// 5 4 3 2 1 0\n</code></pre> <pre><code>for(let i = 0; i &lt;= 5; i++){\n  console.log(`${i} * ${i} = ${i * i}`)\n}\n</code></pre> <pre><code>0 * 0 = 0\n1 * 1 = 1\n2 * 2 = 4\n3 * 3 = 9\n4 * 4 = 16\n5 * 5 = 25\n</code></pre> <pre><code>const countries = ['Finland', 'Sweden', 'Denmark', 'Norway', 'Iceland']\nconst newArr = []\nfor(let i = 0; i &lt; countries.length; i++){\n  newArr.push(countries[i].toUpperCase())\n}\n\n// [\"FINLAND\", \"SWEDEN\", \"DENMARK\", \"NORWAY\", \"ICELAND\"]\n</code></pre> <p>Adding all elements in the array</p> <pre><code>const numbers = [1, 2, 3, 4, 5]\nlet sum = 0\nfor(let i = 0; i &lt; numbers.length; i++){\n  sum  = sum + numbers[i]  // can be shorten, sum += numbers[i]\n\n}\n\nconsole.log(sum)  // 15\n</code></pre> <p>Creating a new array based on the existing array</p> <pre><code>const numbers = [1, 2, 3, 4, 5]\nconst newArr = []\nlet sum = 0\nfor(let i = 0; i &lt; numbers.length; i++){\n  newArr.push( numbers[i] ** 2)\n\n}\n\nconsole.log(newArr)  // [1, 4, 9, 16, 25]\n</code></pre> <pre><code>const countries = ['Finland', 'Sweden', 'Norway', 'Denmark', 'Iceland']\nconst newArr = []\nfor(let i = 0; i &lt; countries.length; i++){\n  newArr.push(countries[i].toUpperCase())\n}\n\nconsole.log(newArr)  // [\"FINLAND\", \"SWEDEN\", \"NORWAY\", \"DENMARK\", \"ICELAND\"]\n</code></pre>"},{"location":"06-day/#while-loop","title":"while loop","text":"<pre><code>let i = 0\nwhile (i &lt;= 5) {\n  console.log(i)\n  i++\n}\n\n// 0 1 2 3 4 5\n</code></pre>"},{"location":"06-day/#do-while-loop","title":"do while loop","text":"<pre><code>let i = 0\ndo {\n  console.log(i)\n  i++\n} while (i &lt;= 5)\n\n// 0 1 2 3 4 5\n</code></pre>"},{"location":"06-day/#for-of-loop","title":"for of loop","text":"<p>We use for of loop for arrays. It is very hand way to iterate through an array if we are not interested in the index of each element in the array.</p> <pre><code>for (const element of arr) {\n  // code goes here\n}\n</code></pre> <pre><code>const numbers = [1, 2, 3, 4, 5]\n\nfor (const num of numbers) {\n  console.log(num)\n}\n\n// 1 2 3 4 5\n\nfor (const num of numbers) {\n  console.log(num * num)\n}\n\n// 1 4 9 16 25\n\n// adding all the numbers in the array\nlet sum = 0\nfor (const num of numbers) {\n  sum = sum + num  \n    // can be also shorten like this, sum += num\n  // after this we will use the shorter synthax(+=, -=, *=, /= etc)\n}\nconsole.log(sum) // 15\n\nconst webTechs = [\n  'HTML',\n  'CSS',\n  'JavaScript',\n  'React',\n  'Redux',\n  'Node',\n  'MongoDB'\n]\n\nfor (const tech of webTechs) {\n  console.log(tech.toUpperCase())\n}\n\n// HTML CSS JAVASCRIPT REACT NODE MONGODB\n\nfor (const tech of webTechs) {\n  console.log(tech[0]) // get only the first letter of each element,  H C J R N M\n}\n</code></pre> <pre><code>const countries = ['Finland', 'Sweden', 'Norway', 'Denmark', 'Iceland']\nconst newArr = []\nfor(const country of countries){\n  newArr.push(country.toUpperCase())\n}\n\nconsole.log(newArr)  // [\"FINLAND\", \"SWEDEN\", \"NORWAY\", \"DENMARK\", \"ICELAND\"]\n</code></pre>"},{"location":"06-day/#break","title":"break","text":"<p>Break is used to interrupt a loop.</p> <pre><code>for(let i = 0; i &lt;= 5; i++){\n  if(i == 3){\n    break\n  }\n  console.log(i)\n}\n\n// 0 1 2\n</code></pre> <p>The above code stops if 3 found in the iteration process.</p>"},{"location":"06-day/#continue","title":"continue","text":"<p>We use the keyword continue to skip a certain iterations. </p> <pre><code>for(let i = 0; i &lt;= 5; i++){\n  if(i == 3){\n    continue\n  }\n  console.log(i)\n}\n\n// 0 1 2 4 5\n</code></pre> <p>\ud83c\udf15 You are so brave, you made it to this far. Now, you have gained the power to automate repetitive and tedious tasks. You have just completed day 6 challenges and you are 6 steps a head in to your way to greatness. Now do some exercises for your brain and for your muscle.</p>"},{"location":"06-day/#exercisesday-6","title":"\ud83d\udcbb Exercises:Day 6","text":""},{"location":"06-day/#exercises-level-1","title":"Exercises: Level 1","text":"<pre><code>const countries = [\n  'Albania',\n  'Bolivia',\n  'Canada',\n  'Denmark',\n  'Ethiopia',\n  'Finland',\n  'Germany',\n  'Hungary',\n  'Ireland',\n  'Japan',\n  'Kenya'\n]\n\nconst webTechs = [\n  'HTML',\n  'CSS',\n  'JavaScript',\n  'React',\n  'Redux',\n  'Node',\n  'MongoDB'\n]\n\nconst mernStack = ['MongoDB', 'Express', 'React', 'Node']\n</code></pre> <ol> <li>Iterate 0 to 10 using for loop, do the same using while and do while loop</li> <li>Iterate 10 to 0 using for loop, do the same using while and do while loop</li> <li>Iterate 0 to n using for loop</li> <li>Write a loop that makes the following pattern using console.log():</li> </ol> <pre><code>    #\n    ##\n    ###\n    ####\n    #####\n    ######\n    #######\n</code></pre> <ol> <li>Use loop to print the following pattern:</li> </ol> <pre><code>0 x 0 = 0\n1 x 1 = 1\n2 x 2 = 4\n3 x 3 = 9\n4 x 4 = 16\n5 x 5 = 25\n6 x 6 = 36\n7 x 7 = 49\n8 x 8 = 64\n9 x 9 = 81\n10 x 10 = 100\n</code></pre> <ol> <li>Using loop print the following pattern</li> </ol> <pre><code> i    i^2   i^3\n 0    0     0\n 1    1     1\n 2    4     8\n 3    9     27\n 4    16    64\n 5    25    125\n 6    36    216\n 7    49    343\n 8    64    512\n 9    81    729\n 10   100   1000\n</code></pre> <ol> <li>Use for loop to iterate from 0 to 100 and print only even numbers</li> <li>Use for loop to iterate from 0 to 100 and print only odd numbers</li> <li>Use for loop to iterate from 0 to 100 and print only prime numbers</li> <li> <p>Use for loop to iterate from 0 to 100 and print the sum of all numbers.</p> <pre><code>The sum of all numbers from 0 to 100 is 5050.\n</code></pre> </li> <li> <p>Use for loop to iterate from 0 to 100 and print the sum of all evens and the sum of all odds.</p> <pre><code>The sum of all evens from 0 to 100 is 2550. And the sum of all odds from 0 to 100 is 2500.\n</code></pre> </li> <li> <p>Use for loop to iterate from 0 to 100 and print the sum of all evens and the sum of all odds. Print sum of evens and sum of odds as array</p> <pre><code>  [2550, 2500]\n</code></pre> </li> <li> <p>Develop a small script which generate array of 5 random numbers</p> </li> <li>Develop a small script which generate array of 5 random numbers and the numbers must be unique</li> <li> <p>Develop a small script which generate a six characters random id:</p> <pre><code>5j2khz\n</code></pre> </li> </ol>"},{"location":"06-day/#exercises-level-2","title":"Exercises: Level 2","text":"<ol> <li> <p>Develop a small script which generate any number of characters random id:</p> <pre><code>  fe3jo1gl124g\n</code></pre> <pre><code>  xkqci4utda1lmbelpkm03rba\n</code></pre> </li> <li> <p>Write a script which generates a random hexadecimal number.</p> <pre><code>'#ee33df'\n</code></pre> </li> <li> <p>Write a script which generates a random rgb color number.</p> <pre><code>rgb(240,180,80)\n</code></pre> </li> <li> <p>Using the above countries array, create the following new array.</p> <pre><code>[\"ALBANIA\", \"BOLIVIA\", \"CANADA\", \"DENMARK\", \"ETHIOPIA\", \"FINLAND\", \"GERMANY\", \"HUNGARY\", \"IRELAND\", \"JAPAN\", \"KENYA\"]\n</code></pre> </li> <li> <p>Using the above countries array, create an array for countries length'.</p> <pre><code>[7, 7, 6, 7, 8, 7, 7, 7, 7, 5, 5]\n</code></pre> </li> <li> <p>Use the countries array to create the following array of arrays:</p> <pre><code>  [\n  ['Albania', 'ALB', 7],\n  ['Bolivia', 'BOL', 7],\n  ['Canada', 'CAN', 6],\n  ['Denmark', 'DEN', 7],\n  ['Ethiopia', 'ETH', 8],\n  ['Finland', 'FIN', 7],\n  ['Germany', 'GER', 7],\n  ['Hungary', 'HUN', 7],\n  ['Ireland', 'IRE', 7],\n  ['Iceland', 'ICE', 7],\n  ['Japan', 'JAP', 5],\n  ['Kenya', 'KEN', 5]\n]\n</code></pre> </li> <li> <p>In above countries array, check if there is a country or countries containing the word 'land'. If there are countries containing 'land', print it as array. If there is no country containing the word 'land', print 'All these countries are without land'.</p> <pre><code>['Finland','Ireland', 'Iceland']\n</code></pre> </li> <li> <p>In above countries array, check if there is  a country or countries end with a substring 'ia'. If there are countries end with, print it as array. If there is no country containing the word 'ai', print 'These are countries ends without ia'.</p> <pre><code>['Albania', 'Bolivia','Ethiopia']\n</code></pre> </li> <li> <p>Using the above countries array, find the country containing the biggest number of characters.</p> <pre><code>Ethiopia\n</code></pre> </li> <li> <p>Using the above countries array, find the country containing only 5 characters.</p> <pre><code>['Japan', 'Kenya']\n</code></pre> </li> <li> <p>Find the longest word in the webTechs array</p> </li> <li> <p>Use the webTechs array to create the following array of arrays:</p> <pre><code>[[\"HTML\", 4], [\"CSS\", 3],[\"JavaScript\", 10],[\"React\", 5],[\"Redux\", 5],[\"Node\", 4],[\"MongoDB\", 7]]\n</code></pre> </li> <li> <p>An application created using MongoDB, Express, React and Node is called a MERN stack app. Create the acronym MERN by using the array mernStack</p> </li> <li>Iterate through the array, [\"HTML\", \"CSS\", \"JS\", \"React\", \"Redux\", \"Node\", \"Express\", \"MongoDB\"] using a for loop or for of loop and print out the items.</li> <li>This is a fruit array , ['banana', 'orange', 'mango', 'lemon'] reverse the order using loop without using a reverse method.</li> <li> <p>Print all the elements of array as shown below.</p> <pre><code>  const fullStack = [\n    ['HTML', 'CSS', 'JS', 'React'],\n    ['Node', 'Express', 'MongoDB']\n  ]\n````\n\n```sh\n  HTML\n  CSS\n  JS\n  REACT\n  NODE\n  EXPRESS\n  MONGODB\n</code></pre> </li> </ol>"},{"location":"06-day/#exercises-level-3","title":"Exercises: Level 3","text":"<ol> <li>Copy countries array(Avoid mutation)</li> <li>Arrays are mutable. Create a copy of array which does not modify the original. Sort the copied array and store in a variable sortedCountries</li> <li>Sort the webTechs array and mernStack array</li> <li>Extract all the countries contain the word 'land' from the countries array and print it as array</li> <li>Find the country containing the hightest number of characters in the countries array</li> <li>Extract all the countries contain the word 'land' from the countries array and print it as array</li> <li>Extract all the countries containing only four characters from the countries array and print it as array</li> <li>Extract all the countries containing two or more words from the countries array and print it as array</li> <li>Reverse the countries array and capitalize each country and stored it as an array</li> </ol> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"07-day/","title":"\ud83d\udcd4 Day 7","text":""},{"location":"07-day/#functions","title":"Functions","text":"<p>So far we have seen many builtin JavaScript functions. In this section, we will focus on custom functions. What is a function? Before we start making functions, lets understand what function is and why we need function?</p> <p>A function is a reusable block of code or programming statements designed to perform a certain task. A function is declared by a function key word followed by a name, followed by parentheses (). A parentheses can take a parameter. If a function take a parameter it will be called with argument. A function can also take a default parameter. To store a data to a function, a function has to return certain data types. To get the value we call or invoke a function. Function makes code:</p> <ul> <li>clean and easy to read</li> <li>reusable</li> <li>easy to test</li> </ul> <p>A function can be declared or created in couple of ways:</p> <ul> <li>Declaration function</li> <li>Expression function</li> <li>Anonymous function</li> <li>Arrow function</li> </ul>"},{"location":"07-day/#function-declaration","title":"Function Declaration","text":"<p>Let us see how to declare a function and how to call a function.</p> <pre><code>//declaring a function without a parameter\nfunction functionName() {\n  // code goes here\n}\nfunctionName() // calling function by its name and with parentheses\n</code></pre>"},{"location":"07-day/#function-without-a-parameter-and-return","title":"Function without a parameter and return","text":"<p>Function can be declared without a parameter.</p> <p>Example:</p> <pre><code>// function without parameter,  a function which make a number square\nfunction square() {\n  let num = 2\n  let sq = num * num\n  console.log(sq)\n}\n\nsquare() // 4\n\n// function without parameter\nfunction addTwoNumbers() {\n  let numOne = 10\n  let numTwo = 20\n  let sum = numOne + numTwo\n\n  console.log(sum)\n}\n\naddTwoNumbers() // a function has to be called by its name to be executed \n</code></pre> <pre><code>  function printFullName (){\n      let firstName = 'Asabeneh'\n      let lastName = 'Yetayeh'\n      let space = ' '\n      let fullName = firstName + space + lastName\n      console.log(fullName)\n}\n\nprintFullName() // calling a function\n</code></pre>"},{"location":"07-day/#function-returning-value","title":"Function returning value","text":"<p>Function can also return values, if a function does not return values the value of the function is undefined. Let us write the above functions with return. From now on, we return value to a function instead of printing it.</p> <pre><code>function printFullName (){\n      let firstName = 'Asabeneh'\n      let lastName = 'Yetayeh'\n      let space = ' '\n      let fullName = firstName + space + lastName\n      return fullName\n}\nconsole.log(printFullName())\n</code></pre> <pre><code>  function addTwoNumbers() {\n      let numOne = 2\n      let numTwo = 3\n      let total = numOne + numTwo\n      return total\n\n  }\n\nconsole.log(addTwoNumbers())\n</code></pre>"},{"location":"07-day/#function-with-a-parameter","title":"Function with a parameter","text":"<p>In a function we can pass different data types(number, string, boolean, object, function) as a parameter.</p> <pre><code>// function with one parameter\nfunction functionName(parm1) {\n  //code goes her\n}\nfunctionName(parm1) // during calling or invoking one argument needed\n\nfunction areaOfCircle(r) {\n  let area = Math.PI * r * r\n  return area\n}\n\nconsole.log(areaOfCircle(10)) // should be called with one argument\n\nfunction square(number) {\n  return number * number\n}\n\nconsole.log(square(10))\n</code></pre>"},{"location":"07-day/#function-with-two-parameters","title":"Function with two parameters","text":"<pre><code>// function with two parameters\nfunction functionName(parm1, parm2) {\n  //code goes her\n}\nfunctionName(parm1, parm2) // during calling or invoking two arguments needed\n// Function without parameter doesn't take input, so lets make a function with parameters\nfunction sumTwoNumbers(numOne, numTwo) {\n  let sum = numOne + numTwo\n  console.log(sum)\n}\nsumTwoNumbers(10, 20) // calling functions\n// If a function doesn't return it doesn't store data, so it should return\n\nfunction sumTwoNumbers(numOne, numTwo) {\n  let sum = numOne + numTwo\n  return sum\n}\n\nconsole.log(sumTwoNumbers(10, 20))\nfunction printFullName(firstName, lastName) {\n  return `${firstName} ${lastName}`\n}\nconsole.log(printFullName('Asabeneh', 'Yetayeh'))\n</code></pre>"},{"location":"07-day/#function-with-many-parameters","title":"Function with many parameters","text":"<pre><code>// function with multiple parameters\nfunction functionName(parm1, parm2, parm3,...){\n  //code goes here\n}\nfunctionName(parm1,parm2,parm3,...) // during calling or invoking three arguments needed\n\n\n// this function takes array as a parameter and sum up the numbers in the array\nfunction sumArrayValues(arr) {\n  let sum = 0;\n  for (let i = 0; i &lt; arr.length; i++) {\n    sum = sum + arr[i];\n  }\n  return sum;\n}\nconst numbers = [1, 2, 3, 4, 5];\n    //calling a function\nconsole.log(sumArrayValues(numbers));\n\n\n    const areaOfCircle = (radius) =&gt; {\n      let area = Math.PI * radius * radius;\n      return area;\n    }\nconsole.log(areaOfCircle(10))\n</code></pre>"},{"location":"07-day/#function-with-unlimited-number-of-parameters","title":"Function with unlimited number of parameters","text":"<p>Sometimes we do not know how many arguments the user going to pass. Therefore, we should know how to write a function which can take unlimited number of arguments. The way we do it has a significant difference between a function declaration(regular function) and arrow function. Let us see examples both in function declaration and arrow function.</p>"},{"location":"07-day/#unlimited-number-of-parameters-in-regular-function","title":"Unlimited number of parameters in regular function","text":"<p>A function declaration provides a function scoped arguments array like object. Any thing we passed as argument in the function can be accessed from arguments object inside the functions. Let us see an example</p> <pre><code>// Let us access the arguments object\n\u200b\nfunction sumAllNums() {\n  console.log(arguments)\n}\n\nsumAllNums(1, 2, 3, 4)\n// Arguments(4)\u00a0[1, 2, 3, 4, callee: \u0192, Symbol(Symbol.iterator): \u0192]\n</code></pre> <pre><code>// function declaration\n\u200b\nfunction sumAllNums() {\n  let sum = 0\n  for (let i = 0; i &lt; arguments.length; i++) {\n    sum += arguments[i]\n  }\n  return sum\n}\n\nconsole.log(sumAllNums(1, 2, 3, 4)) // 10\nconsole.log(sumAllNums(10, 20, 13, 40, 10))  // 93\nconsole.log(sumAllNums(15, 20, 30, 25, 10, 33, 40))  // 173\n</code></pre>"},{"location":"07-day/#unlimited-number-of-parameters-in-arrow-function","title":"Unlimited number of parameters in arrow function","text":"<p>Arrow function does not have the function scoped arguments object. To implement a function which takes unlimited number of arguments in an arrow function we use spread operator followed by any parameter name.  Any thing we passed as argument in the function can be accessed as array in the arrow function. Let us see an example</p> <pre><code>// Let us access the arguments object\n\u200b\nconst sumAllNums = (...args) =&gt; {\n  // console.log(arguments), arguments object not found in arrow function\n  // instead we use a parameter followed by spread operator (...)\n  console.log(args)\n}\n\nsumAllNums(1, 2, 3, 4)\n// [1, 2, 3, 4]\n</code></pre> <pre><code>// function declaration\n\u200b\nconst sumAllNums = (...args) =&gt; {\n  let sum = 0\n  for (const element of args) {\n    sum += element\n  }\n  return sum\n}\n\nconsole.log(sumAllNums(1, 2, 3, 4)) // 10\nconsole.log(sumAllNums(10, 20, 13, 40, 10))  // 93\nconsole.log(sumAllNums(15, 20, 30, 25, 10, 33, 40))  // 173\n</code></pre>"},{"location":"07-day/#anonymous-function","title":"Anonymous Function","text":"<p>Anonymous function or without name</p> <pre><code>const anonymousFun = function() {\n  console.log(\n    'I am an anonymous function and my value is stored in anonymousFun'\n  )\n}\n</code></pre>"},{"location":"07-day/#expression-function","title":"Expression Function","text":"<p>Expression functions are anonymous functions. After we create a function without a name and we assign it to a variable. To return a value from the function we should call the variable. Look at the example below.</p> <pre><code>// Function expression\nconst square = function(n) {\n  return n * n\n}\n\nconsole.log(square(2)) // -&gt; 4\n</code></pre>"},{"location":"07-day/#self-invoking-functions","title":"Self Invoking Functions","text":"<p>Self invoking functions are anonymous functions which do not need to be called to return a value.</p> <pre><code>(function(n) {\n  console.log(n * n)\n})(2) // 4, but instead of just printing if we want to return and store the data, we do as shown below\n\nlet squaredNum = (function(n) {\n  return n * n\n})(10)\n\nconsole.log(squaredNum)\n</code></pre>"},{"location":"07-day/#arrow-function","title":"Arrow Function","text":"<p>Arrow function is an alternative to write a function, however function declaration and arrow function have some minor differences.</p> <p>Arrow function uses arrow instead of the keyword function to declare a function. Let us see both function declaration and arrow function.</p> <pre><code>// This is how we write normal or declaration function\n// Let us change this declaration function to an arrow function\nfunction square(n) {\n  return n * n\n}\n\nconsole.log(square(2)) // 4\n\nconst square = n =&gt; {\n  return n * n\n}\n\nconsole.log(square(2))  // -&gt; 4\n\n// if we have only one line in the code block, it can be written as follows, explicit return\nconst square = n =&gt; n * n  // -&gt; 4\n</code></pre> <pre><code>const changeToUpperCase = arr =&gt; {\n  const newArr = []\n  for (const element of arr) {\n    newArr.push(element.toUpperCase())\n  }\n  return newArr\n}\n\nconst countries = ['Finland', 'Sweden', 'Norway', 'Denmark', 'Iceland']\nconsole.log(changeToUpperCase(countries))\n\n// [\"FINLAND\", \"SWEDEN\", \"NORWAY\", \"DENMARK\", \"ICELAND\"]\n</code></pre> <pre><code>const printFullName = (firstName, lastName) =&gt; {\n  return `${firstName} ${lastName}`\n}\n\nconsole.log(printFullName('Asabeneh', 'Yetayeh'))\n</code></pre> <p>The above function has only the return statement, therefore, we can explicitly return it as follows.</p> <pre><code>const printFullName = (firstName, lastName) =&gt; `${firstName} ${lastName}`\n\nconsole.log(printFullName('Asabeneh', 'Yetayeh'))\n</code></pre>"},{"location":"07-day/#function-with-default-parameters","title":"Function with default parameters","text":"<p>Sometimes we pass default values to parameters, when we invoke the function if we do not pass an argument the default value will be used. Both function declaration and arrow function can have a default value or values.</p> <pre><code>// syntax\n// Declaring a function\nfunction functionName(param = value) {\n  //codes\n}\n\n// Calling function\nfunctionName()\nfunctionName(arg)\n</code></pre> <p>Example:</p> <pre><code>function greetings(name = 'Peter') {\n  let message = `${name}, welcome to 30 Days Of JavaScript!`\n  return message\n}\n\nconsole.log(greetings())\nconsole.log(greetings('Asabeneh'))\n</code></pre> <pre><code>function generateFullName(firstName = 'Asabeneh', lastName = 'Yetayeh') {\n  let space = ' '\n  let fullName = firstName + space + lastName\n  return fullName\n}\n\nconsole.log(generateFullName())\nconsole.log(generateFullName('David', 'Smith'))\n</code></pre> <pre><code>function calculateAge(birthYear, currentYear = 2019) {\n  let age = currentYear - birthYear\n  return age\n}\n\nconsole.log('Age: ', calculateAge(1819))\n</code></pre> <pre><code>function weightOfObject(mass, gravity = 9.81) {\n  let weight = mass * gravity + ' N' // the value has to be changed to string first\n  return weight\n}\n\nconsole.log('Weight of an object in Newton: ', weightOfObject(100)) // 9.81 gravity at the surface of Earth\nconsole.log('Weight of an object in Newton: ', weightOfObject(100, 1.62)) // gravity at surface of Moon\n</code></pre> <p>Let us see how we write the above functions with arrow functions</p> <pre><code>// syntax\n// Declaring a function\nconst functionName = (param = value) =&gt; {\n  //codes\n}\n\n// Calling function\nfunctionName()\nfunctionName(arg)\n</code></pre> <p>Example:</p> <pre><code>const greetings = (name = 'Peter') =&gt; {\n  let message = name + ', welcome to 30 Days Of JavaScript!'\n  return message\n}\n\nconsole.log(greetings())\nconsole.log(greetings('Asabeneh'))\n</code></pre> <pre><code>const generateFullName = (firstName = 'Asabeneh', lastName = 'Yetayeh') =&gt; {\n  let space = ' '\n  let fullName = firstName + space + lastName\n  return fullName\n}\n\nconsole.log(generateFullName())\nconsole.log(generateFullName('David', 'Smith'))\n</code></pre> <pre><code>const calculateAge = (birthYear, currentYear = 2019) =&gt; currentYear - birthYear\nconsole.log('Age: ', calculateAge(1819))\n</code></pre> <pre><code>const weightOfObject = (mass, gravity = 9.81) =&gt; mass * gravity + ' N'\n\nconsole.log('Weight of an object in Newton: ', weightOfObject(100)) // 9.81 gravity at the surface of Earth\nconsole.log('Weight of an object in Newton: ', weightOfObject(100, 1.62)) // gravity at surface of Moon\n</code></pre>"},{"location":"07-day/#function-declaration-versus-arrow-function","title":"Function declaration versus Arrow function","text":"<p>It Will be covered in other section.</p> <p>\ud83c\udf15 You are a rising star, now you knew function . Now, you are super charged with the power of functions. You have just completed day 7 challenges and you are 7 steps a head in to your way to greatness. Now do some exercises for your brain and for your muscle.</p>"},{"location":"07-day/#exercises","title":"\ud83d\udcbb Exercises","text":""},{"location":"07-day/#exercises-level-1","title":"Exercises: Level 1","text":"<ol> <li>Declare a function fullName and it print out your full name.</li> <li>Declare a function fullName and now it takes firstName, lastName as a parameter and it returns your full - name.</li> <li>Declare a function addNumbers and it takes two two parameters and it returns sum.</li> <li>An area of a rectangle is calculated as follows: area = length x width. Write a function which calculates areaOfRectangle.</li> <li>A perimeter of a rectangle is calculated as follows: perimeter= 2x(length + width). Write a function which calculates perimeterOfRectangle.</li> <li>A volume of a rectangular prism is calculated as follows: volume = length x width x height. Write a function which calculates volumeOfRectPrism.</li> <li>Area of a circle is calculated as follows: area = \u03c0 x r x r. Write a function which calculates areaOfCircle</li> <li>Circumference of a circle is calculated as follows: circumference = 2\u03c0r. Write a function which calculates circumOfCircle</li> <li>Density of a substance is calculated as follows:density= mass/volume. Write a function which calculates density.</li> <li>Speed is calculated by dividing the total distance covered by a moving object divided by the total amount of time taken. Write a function which calculates a speed of a moving object, speed.</li> <li>Weight of a substance is calculated as follows: weight = mass x gravity. Write a function which calculates weight.</li> <li>Temperature in oC can be converted to oF using this formula: oF = (oC x 9/5) + 32. Write a function which convert oC to oF convertCelsiusToFahrenheit.</li> <li> <p>Body mass index(BMI) is calculated as follows: bmi = weight in Kg / (height x height) in m2. Write a function which calculates bmi. BMI is used to broadly define different weight groups in adults 20 years old or older.Check if a person is underweight, normal, overweight or obese based the information given below.</p> <ul> <li>The same groups apply to both men and women.</li> <li>Underweight: BMI is less than 18.5</li> <li>Normal weight: BMI is 18.5 to 24.9</li> <li>Overweight: BMI is 25 to 29.9</li> <li>Obese: BMI is 30 or more</li> </ul> </li> <li> <p>Write a function called checkSeason, it takes a month parameter and returns the season:Autumn, Winter, Spring or Summer.</p> </li> <li> <p>Math.max returns its largest argument. Write a function findMax that takes three arguments and returns their maximum with out using Math.max method.</p> <pre><code>console.log(findMax(0, 10, 5))\n10\nconsole.log(findMax(0, -10, -2))\n0\n</code></pre> </li> </ol>"},{"location":"07-day/#exercises-level-2","title":"Exercises: Level 2","text":"<ol> <li>Linear equation is calculated as follows: ax + by + c = 0. Write a function which calculates value of a linear equation, solveLinEquation.</li> <li> <p>Quadratic equation is calculated as follows: ax2 + bx + c = 0. Write a function which calculates value or values of a quadratic equation, solveQuadEquation.</p> <pre><code>console.log(solveQuadratic()) // {0}\nconsole.log(solveQuadratic(1, 4, 4)) // {-2}\nconsole.log(solveQuadratic(1, -1, -2)) // {2, -1}\nconsole.log(solveQuadratic(1, 7, 12)) // {-3, -4}\nconsole.log(solveQuadratic(1, 0, -4)) //{2, -2}\nconsole.log(solveQuadratic(1, -1, 0)) //{1, 0}\n</code></pre> </li> <li> <p>Declare a function name printArray. It takes array as a parameter and it prints out each value of the array.</p> </li> <li> <p>Write a function name showDateTime which shows time in this format: 08/01/2020 04:08 using the Date object.</p> <pre><code>showDateTime()\n08/01/2020 04:08\n</code></pre> </li> <li> <p>Declare a function name swapValues. This function swaps value of x to y.</p> <pre><code>swapValues(3, 4) // x =&gt; 4, y=&gt;3\nswapValues(4, 5) // x = 5, y = 4\n</code></pre> </li> <li> <p>Declare a function name reverseArray. It takes array as a parameter and it returns the reverse of the array (don't use method).</p> <pre><code>console.log(reverseArray([1, 2, 3, 4, 5]))\n//[5, 4, 3, 2, 1]\nconsole.log(reverseArray(['A', 'B', 'C']))\n//['C', 'B', 'A']\n</code></pre> </li> <li> <p>Declare a function name capitalizeArray. It takes array as a parameter and it returns the - capitalizedarray.</p> </li> <li>Declare a function name addItem. It takes an item parameter and it returns an array after adding the item</li> <li>Declare a function name removeItem. It takes an index parameter and it returns an array after removing an item</li> <li>Declare a function name sumOfNumbers. It takes a number parameter and it adds all the numbers in that range.</li> <li>Declare a function name sumOfOdds. It takes a number parameter and it adds all the odd numbers in that - range.</li> <li>Declare a function name sumOfEven. It takes a number parameter and it adds all the even numbers in that - range.</li> <li> <p>Declare a function name evensAndOdds . It takes a positive integer as parameter and it counts number of evens and odds in the number.</p> <pre><code>evensAndOdds(100);\nThe number of odds are 50.\nThe number of evens are 51.\n</code></pre> </li> <li> <p>Write a function which takes any number of arguments and return the sum of the arguments</p> <pre><code>sum(1, 2, 3) // -&gt; 6\nsum(1, 2, 3, 4) // -&gt; 10\n</code></pre> </li> <li> <p>Writ a function which generates a randomUserIp.</p> </li> <li>Write a function which generates a randomMacAddress</li> <li> <p>Declare a function name randomHexaNumberGenerator. When this function is called it generates a random hexadecimal number. The function return the hexadecimal number.</p> <pre><code>console.log(randomHexaNumberGenerator());\n'#ee33df'\n</code></pre> </li> <li> <p>Declare a function name userIdGenerator. When this function is called it generates seven character id. The function return the id.</p> <pre><code>console.log(userIdGenerator());\n41XTDbE\n</code></pre> </li> </ol>"},{"location":"07-day/#exercises-level-3","title":"Exercises: Level 3","text":"<ol> <li> <p>Modify the userIdGenerator function. Declare a function name userIdGeneratedByUser. It doesn\u2019t take any parameter but it takes two inputs using prompt(). One of the input is the number of characters and the second input is the number of ids which are supposed to be generated.</p> <pre><code>userIdGeneratedByUser()\n'kcsy2\nSMFYb\nbWmeq\nZXOYh\n2Rgxf\n'\nuserIdGeneratedByUser()\n'1GCSgPLMaBAVQZ26\nYD7eFwNQKNs7qXaT\nycArC5yrRupyG00S\nUbGxOFI7UXSWAyKN\ndIV0SSUTgAdKwStr\n'\n</code></pre> </li> <li> <p>Write a function name rgbColorGenerator and it generates rgb colors.</p> <pre><code>rgbColorGenerator()\nrgb(125,244,255)\n</code></pre> </li> <li> <p>Write a function arrayOfHexaColors which return any number of hexadecimal colors in an array.</p> </li> <li>Write a function arrayOfRgbColors which return any number of RGB colors in an array.</li> <li>Write a function convertHexaToRgb which converts hexa color to rgb and it returns an rgb color.</li> <li>Write a function convertRgbToHexa which converts rgb to hexa color and it returns an hexa color.</li> <li> <p>Write a function generateColors which can generate any number of hexa or rgb colors.</p> <pre><code>console.log(generateColors('hexa', 3)) // ['#a3e12f', '#03ed55', '#eb3d2b']\nconsole.log(generateColors('hexa', 1)) // '#b334ef'\nconsole.log(generateColors('rgb', 3)) // ['rgb(5, 55, 175)', 'rgb(50, 105, 100)', 'rgb(15, 26, 80)']\nconsole.log(generateColors('rgb', 1)) // 'rgb(33,79, 176)'\n</code></pre> </li> <li> <p>Call your function shuffleArray, it takes an array as a parameter and it returns a shuffled array</p> </li> <li>Call your function factorial, it takes a whole number as a parameter and it return a factorial of the number</li> <li>Call your function isEmpty, it takes a parameter and it checks if it is empty or not</li> <li>Call your function sum, it takes any number of arguments and it returns the sum.</li> <li>Write a function called sumOfArrayItems, it takes an array parameter and return the sum of all the items. Check if all the array items are number types. If not give return reasonable feedback.</li> <li>Write a function called average, it takes an array parameter and returns the average of the items. Check if all the array items are number types. If not give return reasonable feedback.</li> <li> <p>Write a function called modifyArray takes array as parameter and modifies the fifth item of the array and return the array. If the array length is less than five it return 'item not found'.</p> <pre><code>console.log(modifyArray(['Avocado', 'Tomato', 'Potato','Mango', 'Lemon','Carrot']);\n</code></pre> <pre><code>['Avocado', 'Tomato', 'Potato','Mango', 'LEMON', 'Carrot']\n</code></pre> <pre><code>console.log(modifyArray(['Google', 'Facebook','Apple', 'Amazon','Microsoft',  'IBM']);\n</code></pre> <pre><code>['Google', 'Facebook','Apple', 'Amazon','MICROSOFT',  'IBM']\n</code></pre> <pre><code>console.log(modifyArray(['Google', 'Facebook','Apple', 'Amazon']);\n</code></pre> <pre><code>  'Not Found'\n</code></pre> </li> <li> <p>Write a function called isPrime, which checks if a number is prime number.</p> </li> <li>Write a functions which checks if all items are unique in the array.</li> <li>Write a function which checks if all the items of the array are the same data type.</li> <li>JavaScript variable name does not support special characters or symbols except \\$ or _. Write a function isValidVariable which check if a variable is valid or invalid variable.</li> <li> <p>Write a function which returns array of seven random numbers in a range of 0-9. All the numbers must be unique.</p> <pre><code>sevenRandomNumbers()\n[(1, 4, 5, 7, 9, 8, 0)]\n</code></pre> </li> <li> <p>Write a function called reverseCountries, it takes countries array and first it copy the array and returns the reverse of the original array</p> </li> </ol> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"08-day/","title":"\ud83d\udcd4 Day 8","text":""},{"location":"08-day/#scope","title":"Scope","text":"<p>Variable is the fundamental part in programming. We declare variable to store different data types. To declare a variable we use the key word var, let and const. A variable can be declared at different scope. In this section, we will see the scope variables, scope of variables when we use var or let. Variables scopes can be:</p> <ul> <li>Global</li> <li>Local</li> </ul> <p>Variable can be declared globally or locally  scope. We will see both global and local scope. Anything declared without let, var or const is scoped at global level.</p> <p>Let us imagine that we have a scope.js file.</p>"},{"location":"08-day/#window-global-object","title":"Window Global Object","text":"<p>Without using console.log() open your browser and check, you will see the value of a and b if you write a or b on the browser. That means a and b are already available in the window.</p> <pre><code>//scope.js\na = 'JavaScript' // declaring a variable without let or const make it available in window object and this found anywhere\nb = 10 // this is a global scope variable and found in the window object\nfunction letsLearnScope() {\n  console.log(a, b)\n  if (true) {\n    console.log(a, b)\n  }\n}\nconsole.log(a, b) // accessible\n</code></pre>"},{"location":"08-day/#global-scope","title":"Global scope","text":"<p>A globally declared variable can be accessed every where in the same file. But the term global is relative. It can be global to the file or it can be global relative to some block of codes.</p> <pre><code>//scope.js\nlet a = 'JavaScript' // is a global scope it will be found anywhere in this file\nlet b = 10 // is a global scope it will be found anywhere in this file\nfunction letsLearnScope() {\n  console.log(a, b) // JavaScript 10, accessible\n  if (true) {\n    let a = 'Python'\n    let b = 100\n    console.log(a, b) // Python 100\n  }\n  console.log(a, b)\n}\nletsLearnScope()\nconsole.log(a, b) // JavaScript 10, accessible\n</code></pre>"},{"location":"08-day/#local-scope","title":"Local scope","text":"<p>A variable declared as local can be accessed only in certain block code.</p> <ul> <li>Block Scope</li> <li>Function Scope</li> </ul> <pre><code>//scope.js\nlet a = 'JavaScript' // is a global scope it will be found anywhere in this file\nlet b = 10 // is a global scope it will be found anywhere in this file\n// Function scope\nfunction letsLearnScope() {\n  console.log(a, b) // JavaScript 10, accessible\n  let value = false\n// block scope\n  if (true) {\n    // we can access from the function and outside the function but \n    // variables declared inside the if will not be accessed outside the if block\n    let a = 'Python'\n    let b = 20\n    let c = 30\n    let d = 40\n    value = !value\n    console.log(a, b, c, value) // Python 20 30 true\n  }\n  // we can not access c because c's scope is only the if block\n  console.log(a, b, value) // JavaScript 10 true\n}\nletsLearnScope()\nconsole.log(a, b) // JavaScript 10, accessible\n</code></pre> <p>Now, you have an understanding of scope. A variable declared with var only scoped to function but variable declared with let or const is block scope(function block, if block, loop block, etc). Block in JavaScript is a code in between two curly brackets ({}).</p> <pre><code>//scope.js\nfunction letsLearnScope() {\n  var gravity = 9.81\n  console.log(gravity)\n\n}\n// console.log(gravity), Uncaught ReferenceError: gravity is not defined\n\nif (true){\n  var gravity = 9.81\n  console.log(gravity) // 9.81\n}\nconsole.log(gravity)  // 9.81\n\nfor(var i = 0; i &lt; 3; i++){\n  console.log(i) // 0, 1, 2\n}\nconsole.log(i) // 3\n</code></pre> <p>In ES6 and above there is let and const, so you will not suffer from the sneakiness of var. When we use let our variable is block scoped and it will not infect other parts of our code.</p> <pre><code>//scope.js\nfunction letsLearnScope() {\n  // you can use let or const, but gravity is constant I prefer to use const\n  const gravity = 9.81\n  console.log(gravity)\n\n}\n// console.log(gravity), Uncaught ReferenceError: gravity is not defined\n\nif (true){\n  const  gravity = 9.81\n  console.log(gravity) // 9.81\n}\n// console.log(gravity), Uncaught ReferenceError: gravity is not defined\n\nfor(let i = 0; i &lt; 3; i++){\n  console.log(i) // 0, 1, 2\n}\n// console.log(i), Uncaught ReferenceError: i is not defined\n</code></pre> <p>The scope let and const are the same. The difference is only reassigning. We can not change or reassign the value of the <code>const</code> variable. I would strongly suggest you to use let and const, by using let and const you will write clean code and avoid hard to debug mistakes. As a rule of thumb, you can use let for any value which change, const for any constant value, and for an array, object, arrow function and function expression.</p>"},{"location":"08-day/#object","title":"\ud83d\udcd4 Object","text":"<p>Everything can be an object and objects do have properties and properties have values, so an object is a key value pair. The order of the key is not reserved, or there is no order. To create an object literal, we use two curly brackets.</p>"},{"location":"08-day/#creating-an-empty-object","title":"Creating an empty object","text":"<p>An empty object</p> <pre><code>const person = {}\n</code></pre>"},{"location":"08-day/#creating-an-objecting-with-values","title":"Creating an objecting with values","text":"<p>Now, the person object has firstName, lastName, age, location, skills and isMarried properties. The value of properties or keys could be a string, number, boolean, an object, null, undefined or a function.</p> <p>Let us see some examples of object. Each key has a value in the object.</p> <pre><code>const rectangle = {\n  length: 20,\n  width: 20\n}\nconsole.log(rectangle) // {length: 20, width: 20}\n\nconst person = {\n  firstName: 'Asabeneh',\n  lastName: 'Yetayeh',\n  age: 250,\n  country: 'Finland',\n  city: 'Helsinki',\n  skills: [\n    'HTML',\n    'CSS',\n    'JavaScript',\n    'React',\n    'Node',\n    'MongoDB',\n    'Python',\n    'D3.js'\n  ],\n  isMarried: true\n}\nconsole.log(person)\n</code></pre>"},{"location":"08-day/#getting-values-from-an-object","title":"Getting values from an object","text":"<p>We can access values of object using two methods:</p> <ul> <li>using . followed by key name if the key-name is a one word</li> <li>using square bracket and a quote</li> </ul> <pre><code>const person = {\n  firstName: 'Asabeneh',\n  lastName: 'Yetayeh',\n  age: 250,\n  country: 'Finland',\n  city: 'Helsinki',\n  skills: [\n    'HTML',\n    'CSS',\n    'JavaScript',\n    'React',\n    'Node',\n    'MongoDB',\n    'Python',\n    'D3.js'\n  ],\n  getFullName: function() {\n    return `${this.firstName}${this.lastName}`\n  },\n  'phone number': '+3584545454545'\n}\n\n// accessing values using .\nconsole.log(person.firstName)\nconsole.log(person.lastName)\nconsole.log(person.age)\nconsole.log(person.location) // undefined\n\n// value can be accessed using square bracket and key name\nconsole.log(person['firstName'])\nconsole.log(person['lastName'])\nconsole.log(person['age'])\nconsole.log(person['age'])\nconsole.log(person['location']) // undefined\n\n// for instance to access the phone number we only use the square bracket method\nconsole.log(person['phone number'])\n</code></pre>"},{"location":"08-day/#creating-object-methods","title":"Creating object methods","text":"<p>Now, the person object has getFullName properties. The getFullName is function inside the person object and we call it an object method. The this key word refers to the object itself. We can use the word this to access the values of different properties of the object. We can not use an arrow function as object method because the word this refers to the window inside an arrow function instead of the object itself. Example of object:</p> <pre><code>const person = {\n  firstName: 'Asabeneh',\n  lastName: 'Yetayeh',\n  age: 250,\n  country: 'Finland',\n  city: 'Helsinki',\n  skills: [\n    'HTML',\n    'CSS',\n    'JavaScript',\n    'React',\n    'Node',\n    'MongoDB',\n    'Python',\n    'D3.js'\n  ],\n  getFullName: function() {\n    return `${this.firstName} ${this.lastName}`\n  }\n}\n\nconsole.log(person.getFullName())\n// Asabeneh Yetayeh\n</code></pre>"},{"location":"08-day/#setting-new-key-for-an-object","title":"Setting new key for an object","text":"<p>An object is a mutable data structure and we can modify the content of an object after it gets created.</p> <p>Setting a new keys in an object</p> <pre><code>const person = {\n  firstName: 'Asabeneh',\n  lastName: 'Yetayeh',\n  age: 250,\n  country: 'Finland',\n  city: 'Helsinki',\n  skills: [\n    'HTML',\n    'CSS',\n    'JavaScript',\n    'React',\n    'Node',\n    'MongoDB',\n    'Python',\n    'D3.js'\n  ],\n  getFullName: function() {\n    return `${this.firstName} ${this.lastName}`\n  }\n}\nperson.nationality = 'Ethiopian'\nperson.country = 'Finland'\nperson.title = 'teacher'\nperson.skills.push('Meteor')\nperson.skills.push('SasS')\nperson.isMarried = true\n\nperson.getPersonInfo = function() {\n  let skillsWithoutLastSkill = this.skills\n    .splice(0, this.skills.length - 1)\n    .join(', ')\n  let lastSkill = this.skills.splice(this.skills.length - 1)[0]\n\n  let skills = `${skillsWithoutLastSkill}, and ${lastSkill}`\n  let fullName = this.getFullName()\n  let statement = `${fullName} is a ${this.title}.\\nHe lives in ${this.country}.\\nHe teaches ${skills}.`\n  return statement\n}\nconsole.log(person)\nconsole.log(person.getPersonInfo())\n</code></pre> <pre><code>Asabeneh Yetayeh is a teacher.\nHe lives in Finland.\nHe teaches HTML, CSS, JavaScript, React, Node, MongoDB, Python, D3.js, Meteor, and SasS.\n</code></pre>"},{"location":"08-day/#object-methods","title":"Object Methods","text":"<p>There are different methods to manipulate an object. Let us see some of the available methods.</p> <p>Object.assign: To copy an object without modifying the original object</p> <pre><code>const person = {\n  firstName: 'Asabeneh',\n  age: 250,\n  country: 'Finland',\n  city:'Helsinki',\n  skills: ['HTML', 'CSS', 'JS'],\n  title: 'teacher',\n  address: {\n    street: 'Heitamienkatu 16',\n    pobox: 2002,\n    city: 'Helsinki'\n  },\n  getPersonInfo: function() {\n    return `I am ${this.firstName} and I live in ${this.city}, ${this.country}. I am ${this.age}.`\n  }\n}\n\n//Object methods: Object.assign, Object.keys, Object.values, Object.entries\n//hasOwnProperty\n\nconst copyPerson = Object.assign({}, person)\nconsole.log(copyPerson)\n</code></pre>"},{"location":"08-day/#getting-object-keys-using-objectkeys","title":"Getting object keys using Object.keys()","text":"<p>Object.keys: To get the keys or properties of an object as an array</p> <pre><code>const keys = Object.keys(copyPerson)\nconsole.log(keys) //['firstName', 'age', 'country','city', 'skills','title', 'address', 'getPersonInfo']\nconst address = Object.keys(copyPerson.address)\nconsole.log(address) //['street', 'pobox', 'city']\n</code></pre>"},{"location":"08-day/#getting-object-values-using-objectvalues","title":"Getting object values using Object.values()","text":"<p>Object.values:To get values of an object as an array</p> <pre><code>const values = Object.values(copyPerson)\nconsole.log(values)\n</code></pre>"},{"location":"08-day/#getting-object-keys-and-values-using-objectentries","title":"Getting object keys and values using Object.entries()","text":"<p>Object.entries:To get the keys and values in an array</p> <pre><code>const entries = Object.entries(copyPerson)\nconsole.log(entries)\n</code></pre>"},{"location":"08-day/#checking-properties-using-hasownproperty","title":"Checking properties using hasOwnProperty()","text":"<p>hasOwnProperty: To check if a specific key or property exist in an object</p> <pre><code>console.log(copyPerson.hasOwnProperty('name'))\nconsole.log(copyPerson.hasOwnProperty('score'))\n</code></pre> <p>\ud83c\udf15 You are astonishing. Now, you are super charged with the power of objects. You have just completed day 8 challenges and you are 8 steps a head in to your way to greatness. Now do some exercises for your brain and for your muscle.</p>"},{"location":"08-day/#exercises","title":"\ud83d\udcbb Exercises","text":""},{"location":"08-day/#exercises-level-1","title":"Exercises: Level 1","text":"<ol> <li>Create an empty object called dog</li> <li>Print the the dog object on the console</li> <li>Add name, legs, color, age and bark properties for the dog object. The bark property is a method which return woof woof</li> <li>Get name, legs, color, age and bark value from the dog object</li> <li>Set new properties the dog object: breed, getDogInfo</li> </ol>"},{"location":"08-day/#exercises-level-2","title":"Exercises: Level 2","text":"<ol> <li>Find the person who has many skills in the users object.</li> <li>Count logged in users, count users having greater than equal to 50 points from the following object.</li> </ol> <pre><code> const users = {\n   Alex: {\n     email: \"alex@alex.com\",\n     skills: [\"HTML\", \"CSS\", \"JavaScript\"],\n     age: 20,\n     isLoggedIn: false,\n     points: 30\n   },\n   Asab: {\n     email: \"asab@asab.com\",\n     skills: [\"HTML\", \"CSS\", \"JavaScript\", \"Redux\", \"MongoDB\", \"Express\", \"React\", \"Node\"],\n     age: 25,\n     isLoggedIn: false,\n     points: 50\n   },\n   Brook: {\n     email: \"daniel@daniel.com\",\n     skills: [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Redux\"],\n     age: 30,\n     isLoggedIn: true,\n     points: 50\n   },\n   Daniel: {\n     email: \"daniel@alex.com\",\n     skills: [\"HTML\", \"CSS\", \"JavaScript\", \"Python\"],\n     age: 20,\n     isLoggedIn: false,\n     points: 40\n   },\n   John: {\n     email: \"john@john.com\",\n     skills: [\"HTML\", \"CSS\", \"JavaScript\", \"React\", \"Redux\", \"Node.js\"],\n     age: 20,\n     isLoggedIn: true,\n     points: 50\n   },\n   Thomas: {\n     email: \"thomas@thomas.com\",\n     skills: [\"HTML\", \"CSS\", \"JavaScript\", \"React\"],\n     age: 20,\n     isLoggedIn: false,\n     points: 40\n   },\n   Paul: {\n     email: \"paul@paul.com\",\n     skills: [\"HTML\", \"CSS\", \"JavaScript\", \"MongoDB\", \"Express\", \"React\", \"Node\"],\n     age: 20,\n     isLoggedIn: false,\n     points: 40\n   }\n }\n</code></pre> <ol> <li>Find people who are MERN stack developer from the users object</li> <li>Set your name in the users object without modifying the original users object</li> <li>Get all keys or properties of users object</li> <li>Get all the values of users object</li> <li>Use the countries object to print a country name, capital, populations and languages.</li> </ol>"},{"location":"08-day/#exercises-level-3","title":"Exercises: Level 3","text":"<ol> <li>Create an object literal called personAccount. It has firstName, lastName, incomes, expenses properties and it has totalIncome, totalExpense, accountInfo,addIncome, addExpense and accountBalance methods. Incomes is a set of incomes and its description and expenses is a set of incomes and its description.</li> <li>**** Questions:2, 3 and 4 are based on the following two arrays:users and products ()</li> </ol> <pre><code>    const users = [\n    {\n        _id: 'ab12ex',\n        username: 'Alex',\n        email: 'alex@alex.com',\n        password: '123123',\n        createdAt:'08/01/2020 9:00 AM',\n        isLoggedIn: false\n    },\n    {\n        _id: 'fg12cy',\n        username: 'Asab',\n        email: 'asab@asab.com',\n        password: '123456',\n        createdAt:'08/01/2020 9:30 AM',\n        isLoggedIn: true\n    },\n    {\n        _id: 'zwf8md',\n        username: 'Brook',\n        email: 'brook@brook.com',\n        password: '123111',\n        createdAt:'08/01/2020 9:45 AM',\n        isLoggedIn: true\n    },\n    {\n        _id: 'eefamr',\n        username: 'Martha',\n        email: 'martha@martha.com',\n        password: '123222',\n        createdAt:'08/01/2020 9:50 AM',\n        isLoggedIn: false\n    },\n    {\n        _id: 'ghderc',\n        username: 'Thomas',\n        email: 'thomas@thomas.com',\n        password: '123333',\n        createdAt:'08/01/2020 10:00 AM',\n        isLoggedIn: false\n    }\n    ];\n\n    const products = [\n  {\n    _id: 'eedfcf',\n    name: 'mobile phone',\n    description: 'Huawei Honor',\n    price: 200,\n    ratings: [\n      { userId: 'fg12cy', rate: 5 },\n      { userId: 'zwf8md', rate: 4.5 }\n    ],\n    likes: []\n  },\n  {\n    _id: 'aegfal',\n    name: 'Laptop',\n    description: 'MacPro: System Darwin',\n    price: 2500,\n    ratings: [],\n    likes: ['fg12cy']\n  },\n  {\n    _id: 'hedfcg',\n    name: 'TV',\n    description: 'Smart TV:Procaster',\n    price: 400,\n    ratings: [{ userId: 'fg12cy', rate: 5 }],\n    likes: ['fg12cy']\n  }\n]\n</code></pre> <p>Imagine you are getting the above users collection from a MongoDB database.     a. Create a function called signUp which allows user to add to the collection. If user exists, inform the user that he has already an account.     b. Create a function called signIn which allows user to sign in to the application  </p> <ol> <li> <p>The products array has three elements and each of them has six properties.     a. Create a function called rateProduct which rates the product     b. Create a function called averageRating which calculate the average rating of a product  </p> </li> <li> <p>Create a function called likeProduct. This function will helps to like to the product if it is not liked and remove like if it was liked.</p> </li> </ol> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"09-day/","title":"\ud83d\udcd4 Day 9","text":""},{"location":"09-day/#higher-order-function","title":"Higher Order Function","text":"<p>Higher order functions are functions which take other function as a parameter or return a function as a value. The function passed as a parameter is called callback.</p>"},{"location":"09-day/#callback","title":"Callback","text":"<p>A callback is a function which can be passed as parameter to other function. See the example below.</p> <pre><code>// a callback function, the name of the function could be any name\nconst callback = (n) =&gt; {\n  return n ** 2\n}\n\u200b\n// function that takes other function as a callback\nfunction cube(callback, n) {\n  return callback(n) * n\n}\n\u200b\nconsole.log(cube(callback, 3))\n</code></pre>"},{"location":"09-day/#returning-function","title":"Returning function","text":"<p>Higher order functions return function as a value \u200b <pre><code>// Higher order function returning an other function\nconst higherOrder = n =&gt; {\n  const doSomething = m =&gt; {\n    const doWhatEver = t =&gt; {\n      return 2 * n + 3 * m + t\n    }\n    return doWhatEver\n  }\n  return doSomething\n}\nconsole.log(higherOrder(2)(3)(10))\n</code></pre></p> <p>Let us see were we use call back functions. For instance the forEach method uses call back.</p> <pre><code>const numbers = [1, 2, 3, 4, 5]\nconst sumArray = arr =&gt; {\n  let sum = 0\n  const callback = function(element) {\n    sum += element\n  }\n  arr.forEach(callback)\n  return sum\n\n}\nconsole.log(sumArray(numbers))\n</code></pre> <pre><code>15\n</code></pre> <p>The above example can be simplified as follows:</p> <pre><code>const numbers = [1, 2, 3, 4]\n\u200b\nconst sumArray = arr =&gt; {\n  let sum = 0\n  arr.forEach(function(element) {\n    sum += element\n  })\n  return sum\n\n}\nconsole.log(sumArray(numbers))\n</code></pre> <pre><code>15\n</code></pre>"},{"location":"09-day/#setting-time","title":"Setting time","text":"<p>In JavaScript we can execute some activities in a certain interval of time or we can schedule(wait) for some time to execute some activities.</p> <ul> <li>setInterval</li> <li>setTimeout</li> </ul>"},{"location":"09-day/#setting-interval-using-a-setinterval-function","title":"Setting Interval using a setInterval function","text":"<p>In JavaScript, we use setInterval higher order function to do some activity continuously with in some interval of time. The setInterval global method take a callback function and a duration as a parameter. The duration is in milliseconds and the callback will be always called in that interval of time.</p> <pre><code>// syntax\nfunction callback() {\n  // code goes here\n}\nsetInterval(callback, duration)\n</code></pre> <pre><code>function sayHello() {\n  console.log('Hello')\n}\nsetInterval(sayHello, 1000) // it prints hello in every second, 1000ms is 1s\n</code></pre>"},{"location":"09-day/#setting-a-time-using-a-settimeout","title":"Setting a time using a setTimeout","text":"<p>In JavaScript, we use setTimeout higher order function to execute some action at some time in the future. The setTimeout global method take a callback function and a duration as a parameter. The duration is in milliseconds and the callback wait for that amount of time.</p> <pre><code>// syntax\nfunction callback() {\n  // code goes here\n}\nsetTimeout(callback, duration) // duration in milliseconds\n</code></pre> <pre><code>function sayHello() {\n  console.log('Hello')\n}\nsetTimeout(sayHello, 2000) // it prints hello after it waits for 2 seconds.\n</code></pre>"},{"location":"09-day/#functional-programming","title":"Functional Programming","text":"<p>Instead of writing regular loop, latest version of JavaScript introduced lots of built in methods which can help us to solve complicated problems. All builtin methods take callback function. In this section, we will see forEach, map, filter, reduce, find, every, some, and sort.</p>"},{"location":"09-day/#foreach","title":"forEach","text":"<p>forEach: Iterate an array elements. We use forEach only with arrays. It takes a callback function with elements, index parameter and array itself. The index and the array optional.</p> <pre><code>arr.forEach(function (element, index, arr) {\n  console.log(index, element, arr)\n})\n// The above code can be written using arrow function\narr.forEach((element, index, arr) =&gt; {\n  console.log(index, element, arr)\n})\n// The above code can be written using arrow function and explicit return\narr.forEach((element, index, arr) =&gt; console.log(index, element, arr))\n</code></pre> <pre><code>let sum = 0;\nconst numbers = [1, 2, 3, 4, 5];\nnumbers.forEach(num =&gt; console.log(num))\nconsole.log(sum)\n</code></pre> <pre><code>1\n2\n3\n4\n5\n</code></pre> <pre><code>let sum = 0;\nconst numbers = [1, 2, 3, 4, 5];\nnumbers.forEach(num =&gt; sum += num)\n\nconsole.log(sum)\n</code></pre> <pre><code>15\n</code></pre> <pre><code>const countries = ['Finland', 'Denmark', 'Sweden', 'Norway', 'Iceland']\ncountries.forEach((element) =&gt; console.log(element.toUpperCase()))\n</code></pre> <pre><code>FINLAND\nDENMARK\nSWEDEN\nNORWAY\nICELAND\n</code></pre>"},{"location":"09-day/#map","title":"map","text":"<p>map: Iterate an array elements and modify the array elements. It takes a callback function with elements,  index , array parameter and return a new array.</p> <pre><code>const modifiedArray = arr.map(function (element, index, arr) {\n  return element\n})\n</code></pre> <pre><code>/*Arrow function and explicit return\nconst modifiedArray = arr.map((element,index) =&gt; element);\n*/\n//Example\nconst numbers = [1, 2, 3, 4, 5]\nconst numbersSquare = numbers.map((num) =&gt; num * num)\n\nconsole.log(numbersSquare)\n</code></pre> <pre><code>[1, 4, 9, 16, 25]\n</code></pre> <pre><code>const names = ['Asabeneh', 'Mathias', 'Elias', 'Brook']\nconst namesToUpperCase = names.map((name) =&gt; name.toUpperCase())\nconsole.log(namesToUpperCase)\n</code></pre> <pre><code>['ASABENEH', 'MATHIAS', 'ELIAS', 'BROOK']\n</code></pre> <pre><code>const countries = [\n  'Albania',\n  'Bolivia',\n  'Canada',\n  'Denmark',\n  'Ethiopia',\n  'Finland',\n  'Germany',\n  'Hungary',\n  'Ireland',\n  'Japan',\n  'Kenya',\n]\nconst countriesToUpperCase = countries.map((country) =&gt; country.toUpperCase())\nconsole.log(countriesToUpperCase)\n\n/*\n// Arrow function\nconst countriesToUpperCase = countries.map((country) =&gt; {\n  return country.toUpperCase();\n})\n//Explicit return arrow function\nconst countriesToUpperCase = countries.map(country =&gt; country.toUpperCase());\n*/\n</code></pre> <pre><code>['ALBANIA', 'BOLIVIA', 'CANADA', 'DENMARK', 'ETHIOPIA', 'FINLAND', 'GERMANY', 'HUNGARY', 'IRELAND', 'JAPAN', 'KENYA']\n</code></pre> <pre><code>const countriesFirstThreeLetters = countries.map((country) =&gt;\n  country.toUpperCase().slice(0, 3)\n)\n</code></pre> <pre><code>\u00a0[\"ALB\", \"BOL\", \"CAN\", \"DEN\", \"ETH\", \"FIN\", \"GER\", \"HUN\", \"IRE\", \"JAP\", \"KEN\"]\n</code></pre>"},{"location":"09-day/#filter","title":"filter","text":"<p>Filter: Filter out items which full fill filtering conditions and return a new array.</p> <pre><code>//Filter countries containing land\nconst countriesContainingLand = countries.filter((country) =&gt;\n  country.includes('land')\n)\nconsole.log(countriesContainingLand)\n</code></pre> <pre><code>['Finland', 'Ireland']\n</code></pre> <pre><code>const countriesEndsByia = countries.filter((country) =&gt; country.endsWith('ia'))\nconsole.log(countriesEndsByia)\n</code></pre> <pre><code>['Albania', 'Bolivia','Ethiopia']\n</code></pre> <pre><code>const countriesHaveFiveLetters = countries.filter(\n  (country) =&gt; country.length === 5\n)\nconsole.log(countriesHaveFiveLetters)\n</code></pre> <pre><code>['Japan', 'Kenya']\n</code></pre> <pre><code>const scores = [\n  { name: 'Asabeneh', score: 95 },\n   { name: 'Lidiya', score: 98 },\n  { name: 'Mathias', score: 80 },\n  { name: 'Elias', score: 50 },\n  { name: 'Martha', score: 85 },\n  { name: 'John', score: 100 },\n]\n\nconst scoresGreaterEighty = scores.filter((score) =&gt; score.score &gt; 80)\nconsole.log(scoresGreaterEighty)\n</code></pre> <pre><code>[{name: 'Asabeneh', score: 95}, { name: 'Lidiya', score: 98 },{name: 'Martha', score: 85},{name: 'John', score: 100}]\n</code></pre>"},{"location":"09-day/#reduce","title":"reduce","text":"<p>reduce: Reduce takes a callback function. The call back function takes accumulator,  current, and optional initial value as a parameter and returns a single value. It is a good practice to define an initial value for the accumulator value. If we do not specify this parameter, by default accumulator will get array <code>first value</code>. If our array is an empty array, then <code>Javascript</code> will throw an error.</p> <pre><code>arr.reduce((acc, cur) =&gt; {\n  // some operations goes here before returning a value\n return \n}, initialValue)\n</code></pre> <pre><code>const numbers = [1, 2, 3, 4, 5]\nconst sum = numbers.reduce((acc, cur) =&gt; acc + cur, 0)\n\nconsole.log(sum)\n</code></pre> <pre><code>15\n</code></pre>"},{"location":"09-day/#every","title":"every","text":"<p>every: Check if all the elements are similar in one aspect. It returns boolean</p> <pre><code>const names = ['Asabeneh', 'Mathias', 'Elias', 'Brook']\nconst areAllStr = names.every((name) =&gt; typeof name === 'string') // Are all strings?\n\nconsole.log(areAllStr)\n</code></pre> <pre><code>true\n</code></pre> <pre><code>const bools = [true, true, true, true]\nconst areAllTrue = bools.every((b) =&gt; b === true) // Are all true? \n\nconsole.log(areAllTrue) // true\n</code></pre> <pre><code>true\n</code></pre>"},{"location":"09-day/#find","title":"find","text":"<p>find: Return the first element which satisfies the condition</p> <pre><code>const ages = [24, 22, 25, 32, 35, 18]\nconst age = ages.find((age) =&gt; age &lt; 20)\n\nconsole.log(age)\n</code></pre> <pre><code>18\n</code></pre> <pre><code>const names = ['Asabeneh', 'Mathias', 'Elias', 'Brook']\nconst result = names.find((name) =&gt; name.length &gt; 7)\nconsole.log(result)\n</code></pre> <pre><code>Asabeneh\n</code></pre> <pre><code>const scores = [\n  { name: 'Asabeneh', score: 95 },\n  { name: 'Mathias', score: 80 },\n  { name: 'Elias', score: 50 },\n  { name: 'Martha', score: 85 },\n  { name: 'John', score: 100 },\n]\n\nconst score = scores.find((user) =&gt; user.score &gt; 80)\nconsole.log(score)\n</code></pre> <pre><code>{ name: \"Asabeneh\", score: 95 }\n</code></pre>"},{"location":"09-day/#findindex","title":"findIndex","text":"<p>findIndex: Return the position of the first element which satisfies the condition</p> <pre><code>const names = ['Asabeneh', 'Mathias', 'Elias', 'Brook']\nconst ages = [24, 22, 25, 32, 35, 18]\n\nconst result = names.findIndex((name) =&gt; name.length &gt; 7)\nconsole.log(result) // 0\n\nconst age = ages.findIndex((age) =&gt; age &lt; 20)\nconsole.log(age) // 5\n</code></pre>"},{"location":"09-day/#some","title":"some","text":"<p>some: Check if some of the elements are similar in one aspect. It returns boolean</p> <pre><code>const names = ['Asabeneh', 'Mathias', 'Elias', 'Brook']\nconst bools = [true, true, true, true]\n\nconst areSomeTrue = bools.some((b) =&gt;  b === true)\n\nconsole.log(areSomeTrue) //true\n</code></pre> <pre><code>const areAllStr = names.some((name) =&gt; typeof name === 'number') // Are all strings ?\nconsole.log(areAllStr) // false\n</code></pre>"},{"location":"09-day/#sort","title":"sort","text":"<p>sort: The sort methods arranges the array elements either ascending or descending order. By default, the sort() method sorts values as strings.This works well for string array items but not for numbers. If number values are sorted as strings and it give us wrong result. Sort method modify the original array. It is recommended to copy the original data before you start using sort method.</p>"},{"location":"09-day/#sorting-string-values","title":"Sorting string values","text":"<pre><code>const products = ['Milk', 'Coffee', 'Sugar', 'Honey', 'Apple', 'Carrot']\nconsole.log(products.sort()) // ['Apple', 'Carrot', 'Coffee', 'Honey', 'Milk', 'Sugar']\n//Now the original products array  is also sorted\n</code></pre>"},{"location":"09-day/#sorting-numeric-values","title":"Sorting Numeric values","text":"<p>As you can see in the example below, 100 came first after sorted in ascending order. Sort converts items to string , since '100' and other numbers compared, 1 which the beginning of the string '100' became the smallest. To avoid this, we use a compare call back function inside the sort method, which return a negative, zero or positive.</p> <pre><code>const numbers = [9.81, 3.14, 100, 37]\n// Using sort method to sort number items provide a wrong result. see below\nconsole.log(numbers.sort()) //[100, 3.14, 37, 9.81]\nnumbers.sort(function (a, b) {\n  return a - b\n})\n\nconsole.log(numbers) // [3.14, 9.81, 37, 100]\n\nnumbers.sort(function (a, b) {\n  return b - a\n})\nconsole.log(numbers) //[100, 37, 9.81, 3.14]\n</code></pre>"},{"location":"09-day/#sorting-object-arrays","title":"Sorting Object Arrays","text":"<p>Whenever we sort objects in an array, we use the object key to compare. Let us see the example below.</p> <pre><code>objArr.sort(function (a, b) {\n  if (a.key &lt; b.key) return -1\n  if (a.key &gt; b.key) return 1\n  return 0\n})\n\n// or\n\nobjArr.sort(function (a, b) {\n  if (a['key'] &lt; b['key']) return -1\n  if (a['key'] &gt; b['key']) return 1\n  return 0\n})\n\nconst users = [\n  { name: 'Asabeneh', age: 150 },\n  { name: 'Brook', age: 50 },\n  { name: 'Eyob', age: 100 },\n  { name: 'Elias', age: 22 },\n]\nusers.sort((a, b) =&gt; {\n  if (a.age &lt; b.age) return -1\n  if (a.age &gt; b.age) return 1\n  return 0\n})\nconsole.log(users) // sorted ascending\n// [{\u2026}, {\u2026}, {\u2026}, {\u2026}]\n</code></pre> <p>\ud83c\udf15 You are doing great.Never give up because great things take time. You have just completed day 9 challenges and you are 9 steps a head in to your way to greatness. Now do some exercises for your brain and for your muscle.</p>"},{"location":"09-day/#exercises","title":"\ud83d\udcbb Exercises","text":""},{"location":"09-day/#exercises-level-1","title":"Exercises: Level 1","text":"<pre><code>const countries = ['Finland', 'Sweden', 'Denmark', 'Norway', 'IceLand']\nconst names = ['Asabeneh', 'Mathias', 'Elias', 'Brook']\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nconst products = [\n  { product: 'banana', price: 3 },\n  { product: 'mango', price: 6 },\n  { product: 'potato', price: ' ' },\n  { product: 'avocado', price: 8 },\n  { product: 'coffee', price: 10 },\n  { product: 'tea', price: '' },\n]\n</code></pre> <ol> <li>Explain the difference between forEach, map, filter, and reduce.</li> <li>Define a callback function before you use it in forEach, map, filter or reduce.</li> <li>Use forEach to console.log each country in the countries array.</li> <li>Use forEach to console.log each name in the names array.</li> <li>Use forEach to console.log each number in the numbers array.</li> <li>Use map to create a new array by changing each country to uppercase in the countries array.</li> <li>Use map to create an array of countries length from countries array.</li> <li>Use map to create a new array by changing each number to square in the numbers array</li> <li>Use map to change to each name to uppercase in the names array</li> <li>Use map to map the products array to its corresponding prices.</li> <li>Use filter to filter out countries containing land.</li> <li>Use filter to filter out countries having six character.</li> <li>Use filter to filter out countries containing six letters and more in the country array.</li> <li>Use filter to filter out country start with 'E';</li> <li>Use filter to filter out only prices with values.</li> <li>Declare a function called getStringLists which takes an array as a parameter and then returns an array only with string items.</li> <li>Use reduce to sum all the numbers in the numbers array.</li> <li>Use reduce to concatenate all the countries and to produce this sentence: Estonia, Finland, Sweden, Denmark, Norway, and IceLand are north European countries</li> <li>Explain the difference between some and every</li> <li>Use some to check if some names' length greater than seven in names array</li> <li>Use every to check if all the countries contain the word land</li> <li>Explain the difference between find and findIndex.</li> <li>Use find to find the first country containing only six letters in the countries array</li> <li>Use findIndex to find the position of the first country containing only six letters in the countries array</li> <li>Use findIndex to find the position of Norway if it doesn't exist in the array you will get -1.</li> <li>Use findIndex to find the position of Russia if it doesn't exist in the array you will get -1.</li> </ol>"},{"location":"09-day/#exercises-level-2","title":"Exercises: Level 2","text":"<ol> <li>Find the total price of products by chaining two or more array iterators(eg. arr.map(callback).filter(callback).reduce(callback))</li> <li>Find the sum of price of products using only reduce reduce(callback))</li> <li>Declare a function called categorizeCountries which returns an array of countries which have some common pattern(you find the countries array in this repository as countries.js(eg 'land', 'ia', 'island','stan')).</li> <li>Create a function which return an array of objects, which is the letter and the number of times the letter use to start with a name of a country.</li> <li>Declare a getFirstTenCountries function and return an array of ten countries. Use different functional programming to work on the countries.js array</li> <li>Declare a getLastTenCountries function which which returns the last ten countries in the countries array.</li> <li>Find out which letter is used many times as initial for a country name from the countries array (eg. Finland, Fiji, France etc)</li> </ol>"},{"location":"09-day/#exercises-level-3","title":"Exercises: Level 3","text":"<ol> <li>Use the countries information, in the data folder. Sort countries by name, by capital, by population</li> <li>*** Find the 10 most spoken languages:</li> </ol> <pre><code>// Your output should look like this\nconsole.log(mostSpokenLanguages(countries, 10))\n[\n{country: 'English',count:91},\n{country: 'French',count:45},\n{country: 'Arabic',count:25},\n{country: 'Spanish',count:24},\n{country:'Russian',count:9},\n{country:'Portuguese', count:9},\n{country:'Dutch',count:8},\n{country:'German',count:7},\n{country:'Chinese',count:5},\n{country:'Swahili',count:4}\n]\n\n// Your output should look like this\nconsole.log(mostSpokenLanguages(countries, 3))\n[\n{country: 'English',count: 91},\n{country: 'French',count: 45},\n{country: 'Arabic',count: 25},\n]```\n</code></pre> <ol> <li>*** Use countries_data.js file create a function which create the ten most populated countries</li> </ol> <pre><code>console.log(mostPopulatedCountries(countries, 10))\n\n[\n{country: 'China', population: 1377422166},\n{country: 'India', population: 1295210000},\n{country: 'United States of America', population: 323947000},\n{country: 'Indonesia', population: 258705000},\n{country: 'Brazil', population: 206135893},\n{country: 'Pakistan', population: 194125062},\n{country: 'Nigeria', population: 186988000},\n{country: 'Bangladesh', population: 161006790},\n{country: 'Russian Federation', population: 146599183},\n{country: 'Japan', population: 126960000}\n]\n\nconsole.log(mostPopulatedCountries(countries, 3))\n[\n{country: 'China', population: 1377422166},\n{country: 'India', population: 1295210000},\n{country: 'United States of America', population: 323947000}\n]\n```\n</code></pre> <ol> <li>*** Try to develop a program which calculate measure of central tendency of a sample(mean, median, mode) and measure of variability(range, variance, standard deviation). In addition to those measures find the min, max, count, percentile, and frequency distribution of the sample. You can create an object called statistics and create all the functions which do statistical calculations as method for the statistics object. Check the output below.</li> </ol> <pre><code>const ages = [31, 26, 34, 37, 27, 26, 32, 32, 26, 27, 27, 24, 32, 33, 27, 25, 26, 38, 37, 31, 34, 24, 33, 29, 26]\n\nconsole.log('Count:', statistics.count()) // 25\nconsole.log('Sum: ', statistics.sum()) // 744\nconsole.log('Min: ', statistics.min()) // 24\nconsole.log('Max: ', statistics.max()) // 38\nconsole.log('Range: ', statistics.range() // 14\nconsole.log('Mean: ', statistics.mean()) // 30\nconsole.log('Median: ',statistics.median()) // 29\nconsole.log('Mode: ', statistics.mode()) // {'mode': 26, 'count': 5}\nconsole.log('Variance: ',statistics.var()) // 17.5\nconsole.log('Standard Deviation: ', statistics.std()) // 4.2\nconsole.log('Variance: ',statistics.var()) // 17.5\nconsole.log('Frequency Distribution: ',statistics.freqDist()) # [(20.0, 26), (16.0, 27), (12.0, 32), (8.0, 37), (8.0, 34), (8.0, 33), (8.0, 31), (8.0, 24), (4.0, 38), (4.0, 29), (4.0, 25)]\n</code></pre> <pre><code>console.log(statistics.describe())\nCount: 25\nSum:  744\nMin:  24\nMax:  38\nRange:  14\nMean:  30\nMedian:  29\nMode:  (26, 5)\nVariance:  17.5\nStandard Deviation:  4.2\nFrequency Distribution: [(20.0, 26), (16.0, 27), (12.0, 32), (8.0, 37), (8.0, 34), (8.0, 33), (8.0, 31), (8.0, 24), (4.0, 38), (4.0, 29), (4.0, 25)]\n</code></pre> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"10-day/","title":"\ud83d\udcd4 Day 10","text":""},{"location":"10-day/#set","title":"Set","text":"<p>Set is  a collection of elements. Set can only contains unique elements. Let us see how to create a set in the section below.</p>"},{"location":"10-day/#creating-an-empty-set","title":"Creating an empty set","text":"<pre><code>const companies = new Set()\nconsole.log(companies)\n</code></pre> <pre><code>Set(0) {}\n</code></pre>"},{"location":"10-day/#creating-set-from-array","title":"Creating set from array","text":"<pre><code>const languages = [\n  'English',\n  'Finnish',\n  'English',\n  'French',\n  'Spanish',\n  'English',\n  'French',\n]\n\nconst setOfLanguages = new Set(languages)\nconsole.log(setOfLanguages)\n</code></pre> <pre><code>Set(4)\u00a0{\"English\", \"Finnish\", \"French\", \"Spanish\"}\n</code></pre> <p>Set is an iterable object and we can iterate through each elements.</p> <pre><code>const languages = [\n  'English',\n  'Finnish',\n  'English',\n  'French',\n  'Spanish',\n  'English',\n  'French',\n]\n\nconst setOfLanguages = new Set(languages)\n\nfor (const language of setOfLanguages) {\n  console.log(language)\n}\n</code></pre> <pre><code>  English\n  Finnish\n  French\n  Spanish\n</code></pre>"},{"location":"10-day/#adding-an-element-to-a-set","title":"Adding an element to a set","text":"<pre><code>const companies = new Set() // creating an empty set\nconsole.log(companies.size) // 0\n\ncompanies.add('Google') // add element to the set\ncompanies.add('Facebook')\ncompanies.add('Amazon')\ncompanies.add('Oracle')\ncompanies.add('Microsoft')\nconsole.log(companies.size) // 5 elements in the set\nconsole.log(companies)\n</code></pre> <pre><code>Set(5)\u00a0{\"Google\", \"Facebook\", \"Amazon\", \"Oracle\", \"Microsoft\"}\n</code></pre> <p>We can also use loop to add element to a set.</p> <pre><code>const companies = ['Google', 'Facebook', 'Amazon', 'Oracle', 'Microsoft']\nsetOfCompanies = new Set()\nfor (const company of companies) {\n  setOfCompanies.add(company)\n}\n</code></pre> <pre><code>Set(5)\u00a0{\"Google\", \"Facebook\", \"Amazon\", \"Oracle\", \"Microsoft\"}\n</code></pre>"},{"location":"10-day/#deleting-an-element-a-set","title":"Deleting an element a set","text":"<p>We can delete an element from a set using a delete method.</p> <pre><code>console.log(companies.delete('Google'))\nconsole.log(companies.size) // 4 elements left in the set\n</code></pre>"},{"location":"10-day/#checking-an-element-in-the-set","title":"Checking an element in the set","text":"<p>The has method can help to know if a certain element exists in a set.</p> <pre><code>console.log(companies.has('Apple')) // false\nconsole.log(companies.has('Facebook')) // true\n</code></pre>"},{"location":"10-day/#clearing-the-set","title":"Clearing the set","text":"<p>It removes all the elements from a set.</p> <pre><code>companies.clear()\nconsole.log(companies)\n</code></pre> <pre><code>Set(0) {}\n</code></pre> <p>See the example below to learn how to use set.</p> <pre><code>const languages = [\n  'English',\n  'Finnish',\n  'English',\n  'French',\n  'Spanish',\n  'English',\n  'French',\n]\nconst langSet = new Set(languages)\nconsole.log(langSet) // Set(4)\u00a0{\"English\", \"Finnish\", \"French\", \"Spanish\"}\nconsole.log(langSet.size) // 4\n\nconst counts = []\nconst count = {}\n\nfor (const l of langSet) {\n  const filteredLang = languages.filter((lng) =&gt; lng === l)\n  console.log(filteredLang) // [\"English\", \"English\", \"English\"]\n  counts.push({ lang: l, count: filteredLang.length })\n}\nconsole.log(counts)\n</code></pre> <pre><code>[\n  { lang: 'English', count: 3 },\n  { lang: 'Finnish', count: 1 },\n  { lang: 'French', count: 2 },\n  { lang: 'Spanish', count: 1 },\n]\n</code></pre> <p>Other use case of set. For instance to count unique item in an array.</p> <pre><code>const numbers = [5, 3, 2, 5, 5, 9, 4, 5]\nconst setOfNumbers = new Set(numbers)\n\nconsole.log(setOfNumbers)\n</code></pre> <pre><code>Set(5)\u00a0{5, 3, 2, 9, 4}\n</code></pre>"},{"location":"10-day/#union-of-sets","title":"Union of sets","text":"<p>To find a union to two sets can be achieved using spread operator. Lets find the union of set A and set B (A U B)</p> <pre><code>let a = [1, 2, 3, 4, 5]\nlet b = [3, 4, 5, 6]\nlet c = [...a, ...b]\n\nlet A = new Set(a)\nlet B = new Set(b)\nlet C = new Set(c)\n\nconsole.log(C)\n</code></pre> <pre><code>Set(6)\u00a0{1, 2, 3, 4, 5,6}\n</code></pre>"},{"location":"10-day/#intersection-of-sets","title":"Intersection of sets","text":"<p>To find an intersection of two sets can be achieved using filter. Lets find the intersection of set A and set B (A \u2229 B)</p> <pre><code>let a = [1, 2, 3, 4, 5]\nlet b = [3, 4, 5, 6]\n\nlet A = new Set(a)\nlet B = new Set(b)\n\nlet c = a.filter((num) =&gt; B.has(num))\nlet C = new Set(c)\n\nconsole.log(C)\n</code></pre> <pre><code>Set(3)\u00a0{3, 4, 5}\n</code></pre>"},{"location":"10-day/#difference-of-sets","title":"Difference of sets","text":"<p>To find an the difference between two sets can be achieved using filter. Lets find the different of set A and set B (A \\ B)</p> <pre><code>let a = [1, 2, 3, 4, 5]\nlet b = [3, 4, 5, 6]\n\nlet A = new Set(a)\nlet B = new Set(b)\n\nlet c = a.filter((num) =&gt; !B.has(num))\nlet C = new Set(c)\n\nconsole.log(C)\n</code></pre> <pre><code>Set(2)\u00a0{1, 2}\n</code></pre>"},{"location":"10-day/#map","title":"Map","text":""},{"location":"10-day/#creating-an-empty-map","title":"Creating an empty Map","text":"<pre><code>const map = new Map()\nconsole.log(map)\n</code></pre> <pre><code>Map(0)\u00a0{}\n</code></pre>"},{"location":"10-day/#creating-an-map-from-array","title":"Creating an Map from array","text":"<pre><code>countries = [\n  ['Finland', 'Helsinki'],\n  ['Sweden', 'Stockholm'],\n  ['Norway', 'Oslo'],\n]\nconst map = new Map(countries)\nconsole.log(map)\nconsole.log(map.size)\n</code></pre> <pre><code>Map(3)\u00a0{\"Finland\" =&gt; \"Helsinki\", \"Sweden\" =&gt; \"Stockholm\", \"Norway\" =&gt; \"Oslo\"}\n3\n</code></pre>"},{"location":"10-day/#adding-values-to-the-map","title":"Adding values to the Map","text":"<pre><code>const countriesMap = new Map()\nconsole.log(countriesMap.size) // 0\ncountriesMap.set('Finland', 'Helsinki')\ncountriesMap.set('Sweden', 'Stockholm')\ncountriesMap.set('Norway', 'Oslo')\nconsole.log(countriesMap)\nconsole.log(countriesMap.size)\n</code></pre> <pre><code>Map(3)\u00a0{\"Finland\" =&gt; \"Helsinki\", \"Sweden\" =&gt; \"Stockholm\", \"Norway\" =&gt; \"Oslo\"}\n3\n</code></pre>"},{"location":"10-day/#getting-a-value-from-map","title":"Getting a value from Map","text":"<pre><code>console.log(countriesMap.get('Finland'))\n</code></pre> <pre><code>Helsinki\n</code></pre>"},{"location":"10-day/#checking-key-in-map","title":"Checking key in Map","text":"<p>Check if a key exists in a map using has method. It returns true or false.</p> <pre><code>console.log(countriesMap.has('Finland'))\n</code></pre> <pre><code>true\n</code></pre> <p>Getting all values from map using loop</p> <pre><code>for (const country of countriesMap) {\n  console.log(country)\n}\n</code></pre> <pre><code>(2)\u00a0[\"Finland\", \"Helsinki\"]\n(2)\u00a0[\"Sweden\", \"Stockholm\"]\n(2)\u00a0[\"Norway\", \"Oslo\"]\n</code></pre> <pre><code>for (const [country, city] of countriesMap){\n console.log(country, city)\n}\n</code></pre> <pre><code>Finland Helsinki\nSweden Stockholm\nNorway Oslo\n</code></pre> <p>\ud83c\udf15 You established a big milestone, you are unstoppable. Keep going! You have just completed day 10 challenges and you are 10 steps a head in to your way to greatness. Now do some exercises for your brain and for your muscle.</p>"},{"location":"10-day/#exercises","title":"Exercises","text":""},{"location":"10-day/#exerciseslevel-1","title":"Exercises:Level 1","text":"<pre><code>const a = [4, 5, 8, 9]\nconst b = [3, 4, 5, 7]\nconst countries = ['Finland', 'Sweden', 'Norway']\n</code></pre> <ol> <li>create an empty set</li> <li>Create a set containing 0 to 10 using loop</li> <li>Remove an element from a set</li> <li>Clear a set</li> <li>Create a set of 5 string elements from array</li> <li>Create a map of countries and number of characters of a country</li> </ol>"},{"location":"10-day/#exerciseslevel-2","title":"Exercises:Level 2","text":"<ol> <li>Find a union b</li> <li>Find a intersection b</li> <li>Find a with b</li> </ol>"},{"location":"10-day/#exerciseslevel-3","title":"Exercises:Level 3","text":"<ol> <li> <p>How many languages are there in the countries object file.</p> </li> <li> <p>*** Use the countries data to find the 10 most spoken languages:</p> </li> </ol> <pre><code>   // Your output should look like this\n   console.log(mostSpokenLanguages(countries, 10))\n   [\n     { English: 91 },\n     { French: 45 },\n     { Arabic: 25 },\n     { Spanish: 24 },\n     { Russian: 9 },\n     { Portuguese: 9 },\n     { Dutch: 8 },\n     { German: 7 },\n     { Chinese: 5 },\n     { Swahili: 4 },\n     { Serbian: 4 }\n   ]\n\n  // Your output should look like this\n  console.log(mostSpokenLanguages(countries, 3))\n  [\n  {English:91},\n  {French:45},\n  {Arabic:25}\n  ]\n</code></pre> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"11-day/","title":"\ud83d\udcd8 Day 11","text":""},{"location":"11-day/#destructuring-and-spread","title":"Destructuring and Spread","text":"<p>Destructuring is a way to unpack arrays, and objects and assigning to a distinct variable.</p>"},{"location":"11-day/#destructing-arrays","title":"Destructing Arrays","text":"<pre><code>  const numbers = [1, 2, 3]\n  let [numOne, numTwo, numThree] = numbers\n\n  console.log(numOne, numTwo, numThree)\n</code></pre> <pre><code>  1 2 3\n</code></pre> <pre><code>  const names = ['Asabeneh', 'Brook', 'David', 'John']\n  let [firstPerson, secondPerson, thirdPerson, fourthPerson] = names\n\n  console.log(firstPerson, secondPerson,thirdPerson, fourthPerson)\n</code></pre> <pre><code>Asabeneh Brook David John\n</code></pre> <pre><code>  const scientificConstants = [2.72, 3.14, 9.81, 37, 100]\n  let [e, pi, gravity, bodyTemp, boilingTemp] = scientificConstants\n\n  console.log(e,pi,gravity, bodyTemp, boilingTemp)\n</code></pre> <pre><code>2.72 3.14 9.81 37 100\n</code></pre> <pre><code>const fullStack = [\n  ['HTML', 'CSS', 'JS', 'React'],\n  ['Node', 'Express', 'MongoDB']\n]\nconst [frontEnd, backEnd] = fullStack\n\nconsole.log(frontEnd)\nconsole.log(backEnd)\n</code></pre> <pre><code>[\"HTML\", \"CSS\", \"JS\", \"React\"]\n[\"Node\", \"Express\", \"MongoDB\"]\n</code></pre> <p>If we like to skip on of the values in the array we use additional comma. The comma helps to omit the value at that specific index</p> <pre><code>  const numbers = [1, 2, 3]\n  let [numOne, , numThree] = numbers //2 is omitted\n\n  console.log(numOne, numThree)\n</code></pre> <pre><code>1 3\n</code></pre> <pre><code>  const names = ['Asabeneh', 'Brook', 'David', 'John']\n  let [, secondPerson, , fourthPerson] = names // first and third person is omitted\n\n  console.log(secondPerson, fourthPerson)\n</code></pre> <pre><code>Brook John\n</code></pre> <p>We can use default value in case the value of array for that index is undefined:</p> <pre><code>const names = [undefined, 'Brook', 'David']\nlet [\n  firstPerson = 'Asabeneh',\n  secondPerson,\n  thirdPerson,\n  fourthPerson = 'John'\n] = names\n\nconsole.log(firstPerson, secondPerson, thirdPerson, fourthPerson)  \n</code></pre> <pre><code>Asabeneh Brook David John\n</code></pre> <p>We can not assign variable to all the elements in the array. We can destructure few of the first and we can get the remaining as array using spread operator(...).</p> <pre><code>const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlet [num1, num2, num3, ...rest] = nums\n\nconsole.log(num1, num2, num3)\nconsole.log(rest)\n</code></pre> <pre><code>1 2 3\n[4, 5, 6, 7, 8, 9, 10]\n</code></pre>"},{"location":"11-day/#destructuring-during-iteration","title":"Destructuring during iteration","text":"<pre><code>const countries = [['Finland', 'Helsinki'], ['Sweden', 'Stockholm'], ['Norway', 'Oslo']]\n\nfor (const [country, city] of countries) {\nconsole.log(country, city)\n}\n</code></pre> <pre><code>Finland Helsinki\nSweden Stockholm\nNorway Oslo\n</code></pre> <pre><code>const fullStack = [\n  ['HTML', 'CSS', 'JS', 'React'],\n  ['Node', 'Express', 'MongoDB']\n]\n\nfor(const [first, second, third] of fullStack) {\nconsole.log(first, second, third)\n}\n</code></pre> <pre><code>HTML CSS JS\nNode Express MongoDB\n</code></pre>"},{"location":"11-day/#destructuring-object","title":"Destructuring Object","text":"<p>When we destructure the name of the variable we use to destructure should be exactly the same as the key or property of the object. See the example below.</p> <pre><code>const rectangle = {\n  width: 20,\n  height: 10,\n  area: 200\n}\nlet { width, height, area, perimeter } = rectangle\n\nconsole.log(width, height, area, perimeter)\n</code></pre> <pre><code>20 10 200 undefined\n</code></pre>"},{"location":"11-day/#renaming-during-structuring","title":"Renaming during structuring","text":"<pre><code>const rectangle = {\n  width: 20,\n  height: 10,\n  area: 200\n}\nlet { width: w, height: h, area: a, perimeter: p } = rectangle\n\nconsole.log(w, h, a, p)\n</code></pre> <pre><code>20 10 200 undefined\n</code></pre> <p>If the key is not found in the object the variable will be assigned to undefined. Sometimes the key might not be in the object, in that case we can give a default value during declaration. See the example.</p> <pre><code>const rectangle = {\n  width: 20,\n  height: 10,\n  area: 200\n}\nlet { width, height, area, perimeter = 60 } = rectangle\n\nconsole.log(width, height, area, perimeter) //20 10 200 60\n//Let us modify the object:width to 30 and perimeter to 80\n</code></pre> <pre><code>const rectangle = {\n  width: 30,\n  height: 10,\n  area: 200,\n  perimeter: 80\n}\nlet { width, height, area, perimeter = 60 } = rectangle\nconsole.log(width, height, area, perimeter) //30 10 200 80\n</code></pre> <p>Destructuring keys as a function parameters. Let us create a function which takes a rectangle object and it returns a perimeter of a rectangle.</p>"},{"location":"11-day/#object-parameter-without-destructuring","title":"Object parameter without destructuring","text":"<pre><code>// Without destructuring\nconst rect = {\n  width: 20,\n  height: 10\n}\nconst calculatePerimeter = rectangle =&gt; {\n  return 2 * (rectangle.width + rectangle.height)\n}\n\nconsole.log(calculatePerimeter(rect)) // 60\n//with destructuring\n</code></pre> <pre><code>//Another Example\nconst person = {\n  firstName: 'Asabeneh',\n  lastName: 'Yetayeh',\n  age: 250,\n  country: 'Finland',\n  job: 'Instructor and Developer',\n  skills: [\n    'HTML',\n    'CSS',\n    'JavaScript',\n    'React',\n    'Redux',\n    'Node',\n    'MongoDB',\n    'Python',\n    'D3.js'\n  ],\n  languages: ['Amharic', 'English', 'Suomi(Finnish)']\n}\n// Let us create a function which give information about the person object without destructuring\n\nconst getPersonInfo = obj =&gt; {\n  const skills = obj.skills\n  const formattedSkills = skills.slice(0, -1).join(', ')\n  const languages = obj.languages\n  const formattedLanguages = languages.slice(0, -1).join(', ')\n\n  personInfo = `${obj.firstName} ${obj.lastName} lives in ${obj.country}. He is  ${\n    obj.age\n  } years old. He is an ${obj.job}. He teaches ${formattedSkills} and ${\n    skills[skills.length - 1]\n  }. He speaks ${formattedLanguages} and a little bit of ${languages[2]}.`\n\n  return personInfo\n}\n\nconsole.log(getPersonInfo(person))\n</code></pre>"},{"location":"11-day/#object-parameter-with-destructuring","title":"Object parameter with destructuring","text":"<pre><code>const calculatePerimeter = ({ width, height }) =&gt; {\n  return 2 * (width + height)\n}\n\nconsole.log(calculatePerimeter(rect)) // 60\n</code></pre> <pre><code>// Let us create a function which give information about the person object with destructuring\nconst getPersonInfo = ({\n  firstName,\n  lastName,\n  age,\n  country,\n  job,\n  skills,\n  languages\n}) =&gt; {\n  const formattedSkills = skills.slice(0, -1).join(', ')\n  const formattedLanguages = languages.slice(0, -1).join(', ')\n\n  personInfo = `${firstName} ${lastName} lives in ${country}. He is ${age} years old. He is an ${job}. He teaches ${formattedSkills} and ${\n    skills[skills.length - 1]\n  }. He speaks ${formattedLanguages} and a little bit of ${languages[2]}.`\n\n  return personInfo\n}\nconsole.log(getPersonInfo(person))\n/*\nAsabeneh Yetayeh lives in Finland. He is  250 years old. He is an Instructor and Developer. He teaches HTML, CSS, JavaScript, React, Redux, Node, MongoDB, Python and D3.js. He speaks Amharic, English and a little bit of Suomi(Finnish)\n*/\n</code></pre>"},{"location":"11-day/#destructuring-object-during-iteration","title":"Destructuring object during iteration","text":"<pre><code>const todoList = [\n{\n  task:'Prepare JS Test',\n  time:'4/1/2020 8:30',\n  completed:true\n},\n{\n  task:'Give JS Test',\n  time:'4/1/2020 10:00',\n  completed:false\n},\n{\n  task:'Assess Test Result',\n  time:'4/1/2020 1:00',\n  completed:false\n}\n]\n\nfor (const {task, time, completed} of todoList){\n  console.log(task, time, completed)\n}\n</code></pre> <pre><code>Prepare JS Test 4/1/2020 8:30 true\nGive JS Test 4/1/2020 10:00 false\nAssess Test Result 4/1/2020 1:00 false\n</code></pre>"},{"location":"11-day/#spread-or-rest-operator","title":"Spread or Rest Operator","text":"<p>When we destructure an array we use the spread operator(...) to get the rest elements as array. In addition to that we use spread operator to spread array elements to another array.</p>"},{"location":"11-day/#spread-operator-to-get-the-rest-of-array-elements","title":"Spread operator to get the rest of array elements","text":"<pre><code>const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlet [num1, num2, num3, ...rest] = nums\n\u200b\nconsole.log(num1, num2, num3)\nconsole.log(rest)\n</code></pre> <pre><code>1 2 3\n[4, 5, 6, 7, 8, 9, 10]\n</code></pre> <pre><code>const countries = [\n  'Germany',\n  'France',\n  'Belgium',\n  'Finland',\n  'Sweden',\n  'Norway',\n  'Denmark',\n  'Iceland'\n]\n\nlet [gem, fra, , ...nordicCountries] = countries\n\nconsole.log(gem)\nconsole.log(fra)\nconsole.log(nordicCountries)\n</code></pre> <pre><code>Germany\nFrance\n[\"Finland\", \"Sweden\", \"Norway\", \"Denmark\", \"Iceland\"]\n</code></pre>"},{"location":"11-day/#spread-operator-to-copy-array","title":"Spread operator to copy array","text":"<pre><code>const evens = [0, 2, 4, 6, 8, 10]\nconst evenNumbers = [...evens]\n\nconst odds = [1, 3, 5, 7, 9]\nconst oddNumbers = [...odds]\n\nconst wholeNumbers = [...evens, ...odds]\n\nconsole.log(evenNumbers)\nconsole.log(oddNumbers)\nconsole.log(wholeNumbers)\n</code></pre> <pre><code>[0, 2, 4, 6, 8, 10]\n[1, 3, 5, 7, 9]\n[0, 2, 4, 6, 8, 10, 1, 3, 5, 7, 9]\n</code></pre> <pre><code>const frontEnd = ['HTML', 'CSS', 'JS', 'React']\nconst backEnd = ['Node', 'Express', 'MongoDB']\nconst fullStack = [...frontEnd, ...backEnd]\n\nconsole.log(fullStack)\n</code></pre> <pre><code>[\"HTML\", \"CSS\", \"JS\", \"React\", \"Node\", \"Express\", \"MongoDB\"]\n</code></pre>"},{"location":"11-day/#spread-operator-to-copy-object","title":"Spread operator to copy object","text":"<p>We can copy an object using a spread operator</p> <pre><code>const user = {\n  name:'Asabeneh',\n  title:'Programmer',\n  country:'Finland',\n  city:'Helsinki'\n}\n\nconst copiedUser = {...user}\nconsole.log(copiedUser)\n</code></pre> <pre><code>{name: \"Asabeneh\", title: \"Programmer\", country: \"Finland\", city: \"Helsinki\"}\n</code></pre> <p>Modifying or changing the object while copying</p> <pre><code>const user = {\n  name:'Asabeneh',\n  title:'Programmer',\n  country:'Finland',\n  city:'Helsinki'\n}\n\nconst copiedUser = {...user, title:'instructor'}\nconsole.log(copiedUser)\n</code></pre> <pre><code>{name: \"Asabeneh\", title: \"instructor\", country: \"Finland\", city: \"Helsinki\"}\n</code></pre>"},{"location":"11-day/#spread-operator-with-arrow-function","title":"Spread operator with arrow function","text":"<p>Whenever we like to write an arrow function which takes unlimited number of arguments we use a spread operator. If we use a spread operator as a parameter, the argument passed when we invoke a function will change to an array.</p> <pre><code>const sumAllNums = (...args) =&gt; {\n  console.log(args)\n}\n\nsumAllNums(1, 2, 3, 4, 5)\n</code></pre> <pre><code>[1, 2, 3, 4, 5]\n</code></pre> <pre><code>const sumAllNums = (...args) =&gt; {\n  let sum = 0\n  for (const num of args){\n    sum += num\n  }\n  return sum\n\n}\n\nconsole.log(sumAllNums(1, 2, 3, 4, 5))\n</code></pre> <pre><code>15\n</code></pre> <p>\ud83c\udf15 You achieved quite a lot so far. Now, your level of JavaScript is upper intermediate. Keep going! You have just completed day 11 challenges and you are 11 steps a head in to your way to greatness. Now do some exercises for your brain and for your muscle.</p>"},{"location":"11-day/#exercises","title":"Exercises","text":""},{"location":"11-day/#exercises-level-1","title":"Exercises: Level 1","text":"<pre><code>const constants = [2.72, 3.14, 9.81, 37, 100]\nconst countries = ['Finland', 'Estonia', 'Sweden', 'Denmark', 'Norway']\nconst rectangle = {\n  width: 20,\n  height: 10,\n  area: 200,\n  perimeter: 60\n}\nconst users = [\n{\n  name:'Brook',\n  scores:75,\n  skills:['HTM', 'CSS', 'JS'],\n  age:16\n},\n{\n  name:'Alex',\n  scores:80,\n  skills:['HTM', 'CSS', 'JS'],\n  age:18\n},\n{\n  name:'David',\n  scores:75,\n  skills:['HTM', 'CSS'],\n  age:22\n},\n{\n  name:'John',\n  scores:85,\n  skills:['HTML'],\n  age:25\n},\n{\n  name:'Sara',\n  scores:95,\n  skills:['HTM', 'CSS', 'JS'],\n  age: 26\n},\n{\n  name:'Martha',\n  scores:80,\n  skills:['HTM', 'CSS', 'JS'],\n  age:18\n},\n{\n  name:'Thomas',\n  scores:90,\n  skills:['HTM', 'CSS', 'JS'],\n  age:20\n}\n]\n</code></pre> <ol> <li>Destructure and assign the elements of constants array to e, pi, gravity, humanBodyTemp, waterBoilingTemp.</li> <li>Destructure and assign the elements of countries array to fin, est, sw, den, nor</li> <li>Destructure the rectangle object by its properties or keys.</li> </ol>"},{"location":"11-day/#exercises-level-2","title":"Exercises: Level 2","text":"<ol> <li>Iterate through the users array and get all the keys of the object using destructuring</li> <li>Find the persons who have less than two skills</li> </ol>"},{"location":"11-day/#exercises-level-3","title":"Exercises: Level 3","text":"<ol> <li>Destructure the countries object print name, capital, population and languages of all countries</li> <li>A junior developer structure student name, skills and score in array of arrays which may not easy to read. Destructure the following array name to name, skills array to skills, scores array to scores, JavaScript score to jsScore and React score to reactScore variable in one line.</li> </ol> <pre><code>  const student = ['David', ['HTM', 'CSS', 'JS', 'React'], [98, 85, 90, 95]]\n  console.log(name, skills, jsScore, reactScore)\n</code></pre> <pre><code>David (4)\u00a0[\"HTM\", \"CSS\", \"JS\", \"React\"] 90 95\n</code></pre> <ol> <li>Write a function called convertArrayToObject which can convert the array to a structure object.</li> </ol> <pre><code>    const students = [\n        ['David', ['HTM', 'CSS', 'JS', 'React'], [98, 85, 90, 95]],\n        ['John', ['HTM', 'CSS', 'JS', 'React'], [85, 80, 85, 80]]\n      ]\n\n    console.log(convertArrayToObject(students))\n    [\n      {\n        name: 'David',\n        skills: ['HTM','CSS','JS','React'],\n        scores: [98,85,90,95]\n      },\n      {\n        name: 'John',\n        skills: ['HTM','CSS','JS','React'],\n        scores: [85, 80,85,80]\n      }\n    ]\n</code></pre> <ol> <li> <p>Copy the student object to newStudent without mutating the original object. In the new object add the following ?</p> </li> <li> <p>Add Bootstrap with level 8 to the front end skill sets</p> </li> <li>Add Express with level 9 to the back end skill sets</li> <li>Add SQL with level 8 to the data base skill sets</li> <li>Add SQL without level to the data science skill sets</li> </ol> <pre><code>    const student = {\n      name: 'David',\n      age: 25,\n      skills: {\n        frontEnd: [\n          { skill: 'HTML', level: 10 },\n          { skill: 'CSS', level: 8 },\n          { skill: 'JS', level: 8 },\n          { skill: 'React', level: 9 }\n        ],\n        backEnd: [\n          { skill: 'Node',level: 7 },\n          { skill: 'GraphQL', level: 8 },\n        ],\n        dataBase:[\n          { skill: 'MongoDB', level: 7.5 },\n        ],\n        dataScience:['Python', 'R', 'D3.js']\n      }\n    }\n  ```\n\n The copied object output should look like this:\n\n```js\n    {\n    name: 'David',\n    age: 25,\n    skills: {\n      frontEnd: [\n        {skill: 'HTML',level: 10},\n        {skill: 'CSS',level: 8},\n        {skill: 'JS',level: 8},\n        {skill: 'React',level: 9},\n        {skill: 'BootStrap',level: 8}\n      ],\n      backEnd: [\n        {skill: 'Node',level: 7},\n        {skill: 'GraphQL',level: 8},\n        {skill: 'Express',level: 9}\n      ],\n      dataBase: [\n        { skill: 'MongoDB',level: 7.5},\n        { skill: 'SQL',level: 8}\n      ],\n      dataScience: ['Python','R','D3.js','SQL']\n    }\n  }\n</code></pre> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"12-day/","title":"\ud83d\udcd8 Day 12","text":""},{"location":"12-day/#regular-expressions","title":"Regular Expressions","text":"<p>A regular expression or RegExp is a small programming language that helps to find pattern in data. A RegExp can be used to check if some pattern exists in a different data types. To use RegExp in JavaScript either we use RegExp constructor or we can declare a RegExp pattern using two forward slashes followed by a flag. We can create a pattern in two ways.</p> <p>To declare a string we use a single quote, double quote a backtick to declare a regular expression we use two forward slashes and an optional flag. The flag could be g, i, m, s, u or y.</p>"},{"location":"12-day/#regexp-parameters","title":"RegExp parameters","text":"<p>A regular expression takes two parameters. One required search pattern and an optional flag.</p>"},{"location":"12-day/#pattern","title":"Pattern","text":"<p>A pattern could be a text or any form of pattern which some sort of similarity. For instance the word spam in an email could be a pattern we are interested to look for in an email or a phone number format number might be our interest to look for.</p>"},{"location":"12-day/#flags","title":"Flags","text":"<p>Flags are optional parameters in a regular expression which determine the type of searching. Let us see some of the flags:</p> <ul> <li>g: a global flag which means looking for a pattern in whole text</li> <li>i: case insensitive flag(it searches for both lowercase and uppercase)</li> <li>m: multiline</li> </ul>"},{"location":"12-day/#creating-a-pattern-with-regexp-constructor","title":"Creating a pattern with RegExp Constructor","text":"<p>Declaring regular expression without global flag and case insensitive flag.</p> <pre><code>// without flag\nlet pattern = 'love'\nlet regEx = new RegExp(pattern)\n</code></pre> <p>Declaring regular expression with global flag and case insensitive flag.</p> <pre><code>let pattern = 'love'\nlet flag = 'gi'\nlet regEx = new RegExp(pattern, flag)\n</code></pre> <p>Declaring a regex pattern using RegExp object. Writing the pattern and the flag inside the RegExp constructor</p> <pre><code>let regEx = new RegExp('love','gi')\n</code></pre>"},{"location":"12-day/#creating-a-pattern-without-regexp-constructor","title":"Creating a pattern without RegExp Constructor","text":"<p>Declaring regular expression with global flag and case insensitive flag.</p> <pre><code>let regEx= /love/gi\n</code></pre> <p>The above regular expression is the same as the one which we created with RegExp constructor</p> <pre><code>let regEx= new RegExp('love','gi')\n</code></pre>"},{"location":"12-day/#regexpp-object-methods","title":"RegExpp Object Methods","text":"<p>Let us see some of RegExp methods</p>"},{"location":"12-day/#testing-for-a-match","title":"Testing for  a match","text":"<p>test():Tests for a match in a string. It returns true or false.</p> <pre><code>const str = 'I love JavaScript'\nconst pattern = /love/\nconst result = pattern.test(str)\nconsole.log(result)\n</code></pre> <pre><code>true\n</code></pre>"},{"location":"12-day/#array-containing-all-of-the-match","title":"Array containing all of the match","text":"<p>match():Returns an array containing all of the matches, including capturing groups, or null if no match is found. If we do not use a global flag, match() returns an array containing the pattern, index, input and group.</p> <pre><code>const str = 'I love JavaScript'\nconst pattern = /love/\nconst result = str.match(pattern)\nconsole.log(result)\n</code></pre> <pre><code>[\"love\", index: 2, input: \"I love JavaScript\", groups: undefined]\n</code></pre> <pre><code>const str = 'I love JavaScript'\nconst pattern = /love/g\nconst result = str.match(pattern)\nconsole.log(result)\n</code></pre> <pre><code>[\"love\"]\n</code></pre> <p>search(): Tests for a match in a string. It returns the index of the match, or -1 if the search fails.</p> <pre><code>const str = 'I love JavaScript'\nconst pattern = /love/g\nconst result = str.search(pattern)\nconsole.log(result)\n</code></pre> <pre><code>2\n</code></pre>"},{"location":"12-day/#replacing-a-substring","title":"Replacing a substring","text":"<p>replace(): Executes a search for a match in a string, and replaces the matched substring with a replacement substring.</p> <pre><code>const txt = 'Python is the most beautiful language that a human begin has ever created.\\\nI recommend python for a first programming language'\n\nmatchReplaced = txt.replace(/Python|python/, 'JavaScript')\nconsole.log(matchReplaced)\n</code></pre> <pre><code>JavaScript is the most beautiful language that a human begin has ever created.I recommend python for a first programming language\n</code></pre> <pre><code>const txt = 'Python is the most beautiful language that a human begin has ever created.\\\nI recommend python for a first programming language'\n\nmatchReplaced = txt.replace(/Python|python/g, 'JavaScript')\nconsole.log(matchReplaced)\n</code></pre> <pre><code>JavaScript is the most beautiful language that a human begin has ever created.I recommend JavaScript for a first programming language\n</code></pre> <pre><code>const txt = 'Python is the most beautiful language that a human begin has ever created.\\\nI recommend python for a first programming language'\n\nmatchReplaced = txt.replace(/Python/gi, 'JavaScript')\nconsole.log(matchReplaced)\n</code></pre> <pre><code>JavaScript is the most beautiful language that a human begin has ever created.I recommend JavaScript for a first programming language\n</code></pre> <pre><code>const txt = '%I a%m te%%a%%che%r% a%n%d %% I l%o%ve te%ach%ing.\\\nT%he%re i%s n%o%th%ing as m%ore r%ewarding a%s e%duc%at%i%ng a%n%d e%m%p%ow%er%ing \\\np%e%o%ple.\\\nI fo%und te%a%ching m%ore i%n%t%er%%es%ting t%h%an any other %jobs.\\\nD%o%es thi%s m%ot%iv%a%te %y%o%u to b%e a t%e%a%cher.'\n\nmatches = txt.replace(/%/g, '')\nconsole.log(matches)  \n</code></pre> <pre><code>I am teacher and  I love teaching.There is nothing as more rewarding as educating and empowering people.I found teaching more interesting than any other jobs.Does this motivate you to be a teacher.\n</code></pre> <ul> <li>A set of characters</li> <li>[a-c] means, a or b or c</li> <li>[a-z] means, any letter a to z</li> <li>[A-Z] means, any character A to Z</li> <li>[0-3] means, 0 or 1 or 2 or 3</li> <li>[0-9] means any number 0 to 9</li> <li>[A-Za-z0-9] any character which is a to z, A to Z, 0 to 9</li> <li>\\:  uses to escape special characters</li> <li>\\d mean: match where the string contains digits (numbers from 0-9)</li> <li>\\D mean: match where the string does not contain digits</li> <li>. : any character except new line character(\\n)</li> <li>^: starts with</li> <li>r'^substring' eg r'^love', a sentence which starts with a word love</li> <li>r'[^abc] mean not a, not b, not c.</li> <li>$: ends with</li> <li>r'substring$' eg r'love$', sentence ends with a word love</li> <li>*: zero or more times</li> <li>r'[a]*' means a optional or it can occur many times.</li> <li>+: one or more times</li> <li>r'[a]+' means at least once or more times</li> <li>?: zero or one times</li> <li>r'[a]?' means zero times or once</li> <li>\\b: word bounder, matches with the beginning or ending of a word</li> <li>{3}: Exactly 3 characters</li> <li>{3,}: At least 3 characters</li> <li>{3,8}: 3 to 8 characters</li> <li>|: Either or</li> <li>r'apple|banana' mean either of an apple or a banana</li> <li>(): Capture and group</li> </ul> <p></p> <p>Let's use example to clarify the above meta characters</p>"},{"location":"12-day/#square-bracket","title":"Square Bracket","text":"<p>Let's use square bracket to include lower and upper case</p> <pre><code>const pattern = '[Aa]pple' // this square bracket means either A or a\nconst txt = 'Apple and banana are fruits. An old cliche says an apple a day keeps the  doctor way has been replaced by a banana a day keeps the doctor far far away. '\nconst matches = txt.match(pattern)\n\nconsole.log(matches)  \n</code></pre> <pre><code>[\"Apple\", index: 0, input: \"Apple and banana are fruits. An old cliche says an apple a day keeps the  doctor way has been replaced by a banana a day keeps the doctor far far away.\", groups: undefined]\n</code></pre> <pre><code>const pattern = /[Aa]pple/g // this square bracket means either A or a\nconst txt = 'Apple and banana are fruits. An old cliche says an apple a day a doctor way has been replaced by a banana a day keeps the doctor far far away. '\nconst matches = txt.match(pattern)\n\nconsole.log(matches)  \n</code></pre> <pre><code>[\"Apple\", \"apple\"]\n</code></pre> <p>If we want to look for the banana, we write the pattern as follows:</p> <pre><code>const pattern = /[Aa]pple|[Bb]anana/g // this square bracket mean either A or a\nconst txt = 'Apple and banana are fruits. An old cliche says an apple a day a doctor way has been replaced by a banana a day keeps the doctor far far away. Banana is easy to eat too.'\nconst matches = txt.match(pattern)\n\nconsole.log(matches)  \n</code></pre> <pre><code>[\"Apple\", \"banana\", \"apple\", \"banana\", \"Banana\"]\n</code></pre> <p>Using the square bracket and or operator , we manage to extract Apple, apple, Banana and banana.</p>"},{"location":"12-day/#escape-character-in-regexp","title":"Escape character(\\) in RegExp","text":"<pre><code>const pattern = /\\d/g  // d is a special character which means digits\nconst txt = 'This regular expression example was made in January 12,  2020.'\nconst matches = txt. match(pattern)\n\nconsole.log(matches)  // [\"1\", \"2\", \"2\", \"0\", \"2\", \"0\"], this is not what we want\n</code></pre> <pre><code>const pattern = /\\d+/g  // d is a special character which means digits\nconst txt = 'This regular expression example was made in January 12,  2020.'\nconst matches = txt. match(pattern)\n\nconsole.log(matches)  // [\"12\", \"2020\"], this is not what we want\n</code></pre>"},{"location":"12-day/#one-or-more-times","title":"One or more times(+)","text":"<pre><code>const pattern = /\\d+/g  // d is a special character which means digits\nconst txt = 'This regular expression example was made in January 12,  2020.'\nconst matches = txt. match(pattern)\nconsole.log(matches)  // [\"12\", \"2020\"], this is not what we want\n</code></pre>"},{"location":"12-day/#period","title":"Period(.)","text":"<pre><code>const pattern = /[a]./g  // this square bracket means a and . means any character except new line\nconst txt = 'Apple and banana are fruits'\nconst matches = txt.match(pattern)\n\nconsole.log(matches)  // [\"an\", \"an\", \"an\", \"a \", \"ar\"]\n</code></pre> <pre><code>const pattern = /[a].+/g  // . any character, + any character one or more times \nconst txt = 'Apple and banana are fruits'\nconst matches = txt.match(pattern)\n\nconsole.log(matches)  // ['and banana are fruits']\n</code></pre>"},{"location":"12-day/#zero-or-more-times","title":"Zero or more times","text":"<p>Zero or many times. The pattern may not occur or it can occur many times.</p> <pre><code>const pattern = /[a].*/g  //. any character, + any character one or more times \nconst txt = 'Apple and banana are fruits'\nconst matches = txt.match(pattern)\n\nconsole.log(matches)  // ['and banana are fruits']\n</code></pre>"},{"location":"12-day/#zero-or-one-times","title":"Zero or one times(?)","text":"<p>Zero or one times. The pattern may not occur or it may occur once.</p> <pre><code>const txt = 'I am not sure if there is a convention how to write the word e-mail.\\\nSome people write it email others may write it as Email or E-mail.'\nconst pattern = /[Ee]-?mail/g  // ? means optional\nmatches = txt.match(pattern)\n\nconsole.log(matches)  // [\"e-mail\", \"email\", \"Email\", \"E-mail\"]\n</code></pre>"},{"location":"12-day/#quantifier-in-regexp","title":"Quantifier in RegExp","text":"<p>We can specify the length of the substring we look for in a text, using a curly bracket. Let us see, how ot use RegExp quantifiers. Imagine, we are interested in substring that their length are 4 characters</p> <pre><code>const txt = 'This regular expression example was made in December 6,  2019.'\nconst pattern = /\\\\b\\w{4}\\b/g  //  exactly four character words\nconst matches = txt.match(pattern)\nconsole.log(matches)  //['This', 'made', '2019']\n</code></pre> <pre><code>const txt = 'This regular expression example was made in December 6,  2019.'\nconst pattern = /\\b[a-zA-Z]{4}\\b/g  //  exactly four character  words without numbers\nconst matches = txt.match(pattern)\nconsole.log(matches)  //['This', 'made']\n</code></pre> <pre><code>const txt = 'This regular expression example was made in December 6,  2019.'\nconst pattern = /\\d{4}/g  // a number and exactly four digits\nconst matches = txt.match(pattern)\nconsole.log(matches)  // ['2019']\n</code></pre> <pre><code>const txt = 'This regular expression example was made in December 6,  2019.'\nconst pattern = /\\d{1,4}/g   // 1 to 4\nconst matches = txt.match(pattern)\nconsole.log(matches)  // ['6', '2019']\n</code></pre>"},{"location":"12-day/#cart","title":"Cart ^","text":"<ul> <li>Starts with</li> </ul> <pre><code>const txt = 'This regular expression example was made in December 6,  2019.'\nconst pattern = /^This/ // ^ means starts with\nconst matches = txt.match(pattern)\nconsole.log(matches)  // ['This']\n</code></pre> <ul> <li>Negation</li> </ul> <pre><code>const txt = 'This regular expression example was made in December 6,  2019.'\nconst pattern = /[^A-Za-z,. ]+/g  // ^ in set character means negation, not A to Z, not a to z, no space, no comma no period\nconst matches = txt.match(pattern)\nconsole.log(matches)  // [\"6\", \"2019\"]\n</code></pre>"},{"location":"12-day/#exact-match","title":"Exact match","text":"<p>It should have ^ starting and $ which is an end.</p> <pre><code>let pattern = /^[A-Z][a-z]{3,12}$/;\nlet name = 'Asabeneh';\nlet result = pattern.test(name)\n\nconsole.log(result) // true\n</code></pre> <p>\ud83c\udf15 You are going far. Keep going! Now, you are super charged with the power of regular expression. You have the power to extract and clean any kind of text and you can make meaning out of unstructured data. You have just completed day 12 challenges and you are 12 steps a head in to your way to greatness. Now do some exercises for your brain and for your muscle.</p>"},{"location":"12-day/#exercises","title":"\ud83d\udcbb Exercises","text":""},{"location":"12-day/#exercises-level-1","title":"Exercises: Level 1","text":"<ol> <li>Calculate the total annual income of the person from the following text. \u2018He earns 4000 euro from salary per month, 10000 euro annual bonus, 5500 euro online courses per month.\u2019</li> <li>The position of some particles on the horizontal x-axis -12, -4, -3 and  -1 in the negative direction, 0 at origin, 4 and 8 in the positive direction. Extract these numbers and find the distance between the two furthest particles.</li> </ol> <pre><code>points = ['-1', '2', '-4', '-3', '-1', '0', '4', '8']\nsortedPoints =  [-4, -3, -1, -1, 0, 2, 4, 8]\ndistance = 12\n</code></pre> <ol> <li> <p>Write a pattern which identify if a string is a valid JavaScript variable</p> <pre><code>is_valid_variable('first_name') # True\nis_valid_variable('first-name') # False\nis_valid_variable('1first_name') # False\nis_valid_variable('firstname') # True\n</code></pre> </li> </ol>"},{"location":"12-day/#exercises-level-2","title":"Exercises: Level 2","text":"<ol> <li>Write a function called tenMostFrequentWords which get the ten most frequent word from a string?</li> </ol> <pre><code>paragraph = `I love teaching. If you do not love teaching what else can you love. I love Python if you do not love something which can give you all the capabilities to develop an application what else can you love.`\nconsole.log(tenMostFrequentWords(paragraph))\n</code></pre> <pre><code>[\n  {word:'love', count:6},\n  {word:'you', count:5},\n  {word:'can', count:3},\n  {word:'what', count:2},\n  {word:'teaching', count:2},\n  {word:'not', count:2},\n  {word:'else', count:2},\n  {word:'do', count:2},\n  {word:'I', count:2},\n  {word:'which', count:1},\n  {word:'to', count:1},\n  {word:'the', count:1},\n  {word:'something', count:1},\n  {word:'if', count:1},\n  {word:'give', count:1},\n  {word:'develop',count:1},\n  {word:'capabilities',count:1},\n  {word:'application', count:1},\n  {word:'an',count:1},\n  {word:'all',count:1},\n  {word:'Python',count:1},\n  {word:'If',count:1}\n]\n</code></pre> <pre><code>console.log(tenMostFrequentWords(paragraph, 10))\n</code></pre> <pre><code>[{word:'love', count:6},\n{word:'you', count:5},\n{word:'can', count:3},\n{word:'what', count:2},\n{word:'teaching', count:2},\n{word:'not', count:2},\n{word:'else', count:2},\n{word:'do', count:2},\n{word:'I', count:2},\n{word:'which', count:1}\n]\n</code></pre>"},{"location":"12-day/#exercises-level-3","title":"Exercises: Level 3","text":"<ol> <li>Writ a function which cleans text. Clean the following text. After cleaning, count three most frequent words in the string.</li> </ol> <pre><code>sentence = `%I $am@% a %tea@cher%, &amp;and&amp; I lo%#ve %tea@ching%;. There $is nothing; &amp;as&amp; mo@re rewarding as educa@ting &amp;and&amp; @emp%o@wering peo@ple. ;I found tea@ching m%o@re interesting tha@n any other %jo@bs. %Do@es thi%s mo@tivate yo@u to be a tea@cher!?`\nconsole.log(cleanText(sentence))\n</code></pre> <p><pre><code>I am a teacher and I love teaching There is nothing as more rewarding as educating and empowering people I found teaching more interesting than any other jobs Does this motivate you to be a teacher\n</code></pre> 2. Write a function which find the most frequent words. After cleaning, count three most frequent words in the string.</p> <pre><code>  console.log(mostFrequentWords(cleanedText))\n  [{word:'I', count:3}, {word:'teaching', count:2}, {word:'teacher', count:2}]\n</code></pre> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"13-day/","title":"\ud83d\udcd8 Day 13","text":""},{"location":"13-day/#console-object-methods","title":"Console Object Methods","text":"<p>In this section, we will cover about console and console object methods. Absolute beginners usually do not know which to use: console.log(), document.write() or document.getElementById.</p> <p>We use console object methods to show output on the browser console and we use document.write to show output on the browser document(view port). Both methods used only for testing and debugging purposes. The console method is the most popular testing and debugging tool on the browser. We use document.getElementById() when we like to interact with DOM try using JavaScript. We will cover DOM in another section.</p> <p>In addition to the famous, console.log() method, the console provides other more methods.</p>"},{"location":"13-day/#consolelog","title":"console.log()","text":"<p>We use console.log() to show output on the browser console. We can substitute values and also we can style the logging out put using %c.</p> <ul> <li>Showing output on browser console</li> </ul> <pre><code>console.log('30 Days of JavaScript')\n</code></pre> <pre><code>30 Days of JavaScript\n</code></pre> <ul> <li>Substitution</li> </ul> <pre><code>console.log('%d %s of JavaScript', 30, 'Days')\n</code></pre> <pre><code>30 Days of JavaScript\n</code></pre> <ul> <li>CSS</li> </ul> <p>We can style logging message using css. Copy the following code and paste it on browser console to see the result.</p> <pre><code>console.log('%c30 Days Of JavaScript', 'color:green') // log output is green\nconsole.log(\n  '%c30 Days%c %cOf%c %cJavaScript%c',\n  'color:green',\n  '',\n  'color:red',\n  '',\n  'color:yellow'\n) // log output green red and yellow text\n</code></pre>"},{"location":"13-day/#consolewarn","title":"console.warn()","text":"<p>We use console.warn() to give warning on browser. For instance to inform or warn deprecation of version of a package or bad practices. Copy the following code and paste it on browser console to see warning messages.</p> <pre><code>console.warn('This is a warning')\nconsole.warn(\n  'You are using React. Do not touch the DOM. Virtual DOM will take care of handling the DOM!'\n)\nconsole.warn('Warning is different from error')\n</code></pre>"},{"location":"13-day/#consoleerror","title":"console.error()","text":"<p>The console.error() method shows an error messages.</p> <pre><code>console.error('This is an error message')\nconsole.error('We all make mistakes')\n</code></pre>"},{"location":"13-day/#consoletable","title":"console.table()","text":"<p>The console.table() method display data as a table on the console. Displays tabular data as a table. The console.table() takes one required argument data, which must be an array or an object, and one additional optional parameter columns.</p> <p>Let us first start with a simple array. The code below displays a table with two columns. An index column to display the index and value column to display the names</p> <pre><code>const names = ['Asabeneh', 'Brook', 'David', 'John']\nconsole.table(names)\n</code></pre> <p>Let us also check the result of an object. This creates table with two columns:an index column containing the keys and a value column contain the values of the object.</p> <pre><code>const user = {\n  name: 'Asabeneh',\n  title: 'Programmer',\n  country: 'Finland',\n  city: 'Helsinki',\n  age: 250\n}\nconsole.table(user)\n</code></pre> <p>Check the rest of the examples by copying and paste on the browser console.</p> <pre><code>const countries = [\n  ['Finland', 'Helsinki'],\n  ['Sweden', 'Stockholm'],\n  ['Norway', 'Oslo']\n]\nconsole.table(countries)\n</code></pre> <pre><code>const users = [\n  {\n    name: 'Asabeneh',\n    title: 'Programmer',\n    country: 'Finland',\n    city: 'Helsinki',\n    age: 250\n  },\n  {\n    name: 'Eyob',\n    title: 'Teacher',\n    country: 'Sweden',\n    city: 'London',\n    age: 25\n  },\n  {\n    name: 'Asab',\n    title: 'Instructor',\n    country: 'Norway',\n    city: 'Oslo',\n    age: 22\n  },\n  {\n    name: 'Matias',\n    title: 'Developer',\n    country: 'Denmark',\n    city: 'Copenhagen',\n    age: 28\n  }\n]\nconsole.table(users)\n</code></pre>"},{"location":"13-day/#consoletime","title":"console.time()","text":"<p>Starts a timer you can use to track how long an operation takes. You give each timer a unique name, and may have up to 10,000 timers running on a given page. When you call console.timeEnd() with the same name, the browser will output the time, in milliseconds, that elapsed since the timer was started.</p> <pre><code>const countries = [\n  ['Finland', 'Helsinki'],\n  ['Sweden', 'Stockholm'],\n  ['Norway', 'Oslo']\n]\n\nconsole.time('Regular for loop')\nfor (let i = 0; i &lt; countries.length; i++) {\n  console.log(countries[i][0], countries[i][1])\n}\nconsole.timeEnd('Regular for loop')\n\nconsole.time('for of loop')\nfor (const [name, city] of countries) {\n  console.log(name, city)\n}\nconsole.timeEnd('for of loop')\n\nconsole.time('forEach loop')\ncountries.forEach(([name, city]) =&gt; {\n  console.log(name, city)\n})\nconsole.timeEnd('forEach loop')\n</code></pre> <pre><code>Finland Helsinki\nSweden Stockholm\nNorway Oslo\nRegular for loop: 0.34716796875ms\nFinland Helsinki\nSweden Stockholm\nNorway Oslo\nfor of loop: 0.26806640625ms\nFinland Helsinki\nSweden Stockholm\nNorway Oslo\nforEach loop: 0.358154296875ms\n</code></pre> <p>According the above output the regular for loop is slower than for of or forEach loop.</p>"},{"location":"13-day/#consoleinfo","title":"console.info()","text":"<p>It displays information message on browser console.</p> <pre><code>console.info('30 Days Of JavaScript challenge is trending on Github')\nconsole.info('30 Days Of fullStack challenge might be released')\nconsole.info('30 Days Of HTML and CSS challenge might be released')\n</code></pre>"},{"location":"13-day/#consoleassert","title":"console.assert()","text":"<p>The console.assert() methods writes an error message to the console if the assertion is false. If the assertion is true, nothing happens. The first parameter is an assertion expression. If this expression is false, an Assertion failed error message will be displayed.</p> <pre><code>console.assert(4 &gt; 3, '4 is greater than 3') // no result\nconsole.assert(3 &gt; 4, '3 is not greater than 4') // Assertion failed: 3 is not greater than 4\n\nfor (let i = 0; i &lt;= 10; i += 1) {\n  let errorMessage = `${i} is not even`\n  console.log('the # is ' + i)\n  console.assert(i % 2 === 0, { number: i, errorMessage: errorMessage })\n}\n</code></pre>"},{"location":"13-day/#consolegroup","title":"console.group()","text":"<p>The console.group() can help to group different log groups. Copy the following code and paste it on browser console to the groups.</p> <pre><code>const names = ['Asabeneh', 'Brook', 'David', 'John']\nconst countries = [\n  ['Finland', 'Helsinki'],\n  ['Sweden', 'Stockholm'],\n  ['Norway', 'Oslo']\n]\nconst user = {\n  name: 'Asabeneh',\n  title: 'Programmer',\n  country: 'Finland',\n  city: 'Helsinki',\n  age: 250\n}\nconst users = [\n  {\n    name: 'Asabeneh',\n    title: 'Programmer',\n    country: 'Finland',\n    city: 'Helsinki',\n    age: 250\n  },\n  {\n    name: 'Eyob',\n    title: 'Teacher',\n    country: 'Sweden',\n    city: 'London',\n    age: 25\n  },\n  {\n    name: 'Asab',\n    title: 'Instructor',\n    country: 'Norway',\n    city: 'Oslo',\n    age: 22\n  },\n  {\n    name: 'Matias',\n    title: 'Developer',\n    country: 'Denmark',\n    city: 'Copenhagen',\n    age: 28\n  }\n]\n\nconsole.group('Names')\nconsole.log(names)\nconsole.groupEnd()\n\nconsole.group('Countries')\nconsole.log(countries)\nconsole.groupEnd()\n\nconsole.group('Users')\nconsole.log(user)\nconsole.log(users)\nconsole.groupEnd()\n</code></pre>"},{"location":"13-day/#consolecount","title":"console.count()","text":"<p>It prints the number of times the console.count() is called. It takes a string label parameter. It is very helpful to count the number of times a function is called. In the following example, the console.count() method will run three times</p> <pre><code>const func = () =&gt; {\n  console.count('Function has been called')\n}\nfunc()\nfunc()\nfunc()\n</code></pre> <pre><code>Function has been called: 1\nFunction has been called: 2\nFunction has been called: 3\n</code></pre>"},{"location":"13-day/#consoleclear","title":"console.clear()","text":"<p>The console.clear() cleans the browser console.</p> <p>\ud83c\udf15 Keep up the good work. Keep pushing, the sky is the limit! You have just completed day 13 challenges and you are 13 steps a head in to your way to greatness. Now do some exercises for your brain and for your muscle.</p>"},{"location":"13-day/#exercises","title":"Exercises","text":""},{"location":"13-day/#exerciseslevel-1","title":"Exercises:Level 1","text":"<ol> <li>Display the countries array as a table</li> <li>Display the countries object as a table</li> <li>Use console.group() to group logs</li> </ol>"},{"location":"13-day/#exerciseslevel-2","title":"Exercises:Level 2","text":"<ol> <li>10 &gt; 2 * 10 use console.assert()</li> <li>Write a warning message using console.warn()</li> <li>Write an error message using console.error()</li> </ol>"},{"location":"13-day/#exerciseslevel-3","title":"Exercises:Level 3","text":"<ol> <li>Check the speed difference among the following loops: while, for, for of, forEach</li> </ol> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"14-day/","title":"\ud83d\udcd8 Day 14","text":""},{"location":"14-day/#error-handling","title":"Error Handling","text":"<p>JavaScript is a loosely-typed language. Some times you will get a runtime error when you try to access an undefined variable or call undefined function etc.</p> <p>JavaScript similar to python or Java provides an error-handling mechanism to catch runtime errors using try-catch-finally block.</p> <pre><code>try {\n  // code that may throw an error\n} catch (err) {\n  // code to be executed if an error occurs\n} finally {\n  // code to be executed regardless of an error occurs or not\n}\n</code></pre> <p>try: wrap suspicious code that may throw an error in try block.The try statement allows us to define a block of code to be tested for errors while it is being executed.</p> <p>catch: write code to do something in catch block when an error occurs. The catch block can have parameters that will give you error information. Catch block is used to log an error or display specific messages to the user.</p> <p>finally: finally block will always be executed regardless of the occurrence of an error. The finally block can be used to complete the remaining task or reset variables that might have changed before error occurred in try block.</p> <p>Example:</p> <pre><code>try {\n  let lastName = 'Yetayeh'\n  let fullName = fistName + ' ' + lastName\n} catch (err) {\n  console.log(err)\n}\n</code></pre> <pre><code>ReferenceError: fistName is not defined\n    at &lt;anonymous&gt;:4:20\n</code></pre> <pre><code>try {\n  let lastName = 'Yetayeh'\n  let fullName = fistName + ' ' + lastName\n} catch (err) {\n  console.error(err) // we can use console.log() or console.error()\n} finally {\n  console.log('In any case I will be executed')\n}\n</code></pre> <pre><code>ReferenceError: fistName is not defined\n    at &lt;anonymous&gt;:4:20\nIn any case it  will be executed\n</code></pre> <p>The catch block take a parameter. It is common to pass e, err or error as a parameter to the catch block. This parameter is an object and it has name and message keys. Lets use the name and message.</p> <pre><code>try {\n  let lastName = 'Yetayeh'\n  let fullName = fistName + ' ' + lastName\n} catch (err) {\n  console.log('Name of the error', err.name)\n  console.log('Error message', err.message)\n} finally {\n  console.log('In any case I will be executed')\n}\n</code></pre> <pre><code>Name of the error ReferenceError\nError message fistName is not defined\nIn any case I will be executed\n</code></pre> <p>throw: the throw statement allows us to create a custom error. We can through a string, number, boolean or an object. Use the throw statement to throw an exception. When you throw an exception, expression specifies the value of the exception. Each of the following throws an exception:</p> <pre><code>throw 'Error2' // generates an exception with a string value\nthrow 42 // generates an exception with the value 42\nthrow true // generates an exception with the value true\nthrow new Error('Required') // generates an error object with the message of Required\n</code></pre> <pre><code>const throwErrorExampleFun = () =&gt; {\n  let message\n  let x = prompt('Enter a number: ')\n  try {\n    if (x == '') throw 'empty'\n    if (isNaN(x)) throw 'not a number'\n    x = Number(x)\n    if (x &lt; 5) throw 'too low'\n    if (x &gt; 10) throw 'too high'\n  } catch (err) {\n    console.log(err)\n  }\n}\nthrowErrorExampleFun()\n</code></pre>"},{"location":"14-day/#error-types","title":"Error Types","text":"<ul> <li>ReferenceError: An illegal reference has occurred. A ReferenceError is thrown if we use a variable that has not been declared.</li> </ul> <pre><code>let firstName = 'Asabeneh'\nlet fullName = firstName + ' ' + lastName\n\nconsole.log(fullName)\n</code></pre> <pre><code>Uncaught ReferenceError: lastName is not defined\n    at &lt;anonymous&gt;:2:35\n</code></pre> <ul> <li>SyntaxError: A syntax error has occurred</li> </ul> <pre><code>let square = 2 x 2\nconsole.log(square)\n\nconsole.log('Hello, world')\n</code></pre> <pre><code>Uncaught SyntaxError: Unexpected identifier\n</code></pre> <ul> <li>TypeError: A type error has occurred</li> </ul> <pre><code>let num = 10\nconsole.log(num.toLowerCase())\n</code></pre> <pre><code>Uncaught TypeError: num.toLowerCase is not a function\n    at &lt;anonymous&gt;:2:17\n</code></pre> <p>These are some of the common error you may face when you write a code. Understanding errors can help you to know what mistakes you made and it will help you to debug your code fast.</p> <p>\ud83c\udf15 You are flawless. Now, you knew how to handle errors and you can write robust application which handle unexpected user inputs. You have just completed day 14 challenges and you are 14 steps a head in to your way to greatness. Now do some exercises for your brain and for your muscle.</p>"},{"location":"14-day/#exercises","title":"Exercises","text":""},{"location":"14-day/#exerciseslevel-1","title":"Exercises:Level 1","text":"<p>Practice</p>"},{"location":"14-day/#exercises-level-2","title":"Exercises: Level 2","text":"<p>Practice</p>"},{"location":"14-day/#exerciseslevel","title":"Exercises:Level","text":"<p>Practice</p> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"15-day/","title":"\ud83d\udcd8 Day 15","text":""},{"location":"15-day/#classes","title":"Classes","text":"<p>JavaScript is an object oriented programming language. Everything in JavScript is an object, with its properties and methods. We create class to create an object. A Class is like an object constructor, or a \"blueprint\" for creating objects. We instantiate a class to create an object. The class defines attributes and the behavior of the object, while the object, on the other hand, represents the class.</p> <p>Once we create a class we can create object from it whenever we want. Creating an object from a class is called class instantiation.</p> <p>In the object section, we saw how to create an object literal. Object literal is a singleton. If we want to get a similar object , we have to write it. However, class allows to create many objects. This helps to reduce amount of code and repetition of code.</p>"},{"location":"15-day/#defining-a-classes","title":"Defining a classes","text":"<p>To define a class in JavaScript we need the keyword class , the name of a class in CamelCase and block code(two curly brackets). Let us create a class name Person.</p> <pre><code>// syntax\nclass ClassName {\n    //  code goes here\n}\n</code></pre> <p>Example:</p> <pre><code>class Person {\n  // code goes here\n}\n</code></pre> <p>We have created an Person class but it does not have any thing inside.</p>"},{"location":"15-day/#class-instantiation","title":"Class Instantiation","text":"<p>Instantiation class means creating an object from a class. We need the keyword new and we call the name of the class after the word new.</p> <p>Let us create a dog object from our Person class.</p> <pre><code>class Person {\n  // code goes here\n}\nconst person = new Person()\nconsole.log(person)\n</code></pre> <pre><code>Person\u00a0{}\n</code></pre> <p>As you can see, we have created a person object. Since the class did not have any properties yet the object is also empty.</p> <p>Let use the class constructor to pass different properties for the class.</p>"},{"location":"15-day/#class-constructor","title":"Class Constructor","text":"<p>The constructor is a builtin function which allows as to create a blueprint for our object. The constructor function starts with a keyword constructor followed by a parenthesis. Inside the parenthesis we pass the properties of the object as parameter. We use the this keyword to attach the constructor parameters with the class.</p> <p>The following Person class constructor has firstName and lastName property. These properties are attached to the Person class using this keyword. This refers to the class itself.</p> <pre><code>class Person {\n  constructor(firstName, lastName) {\n    console.log(this) // Check the output from here\n    this.firstName = firstName\n    this.lastName = lastName\n  }\n}\n\nconst person = new Person()\n\nconsole.log(person)\n</code></pre> <pre><code>Person\u00a0{firstName: undefined, lastName:undefined}\n</code></pre> <p>All the keys of the object are undefined. When ever we instantiate we should pass the value of the properties. Let us pass value at this time when we instantiate the class.</p> <pre><code>class Person {\n  constructor(firstName, lastName) {\n    this.firstName = firstName\n    this.lastName = lastName\n  }\n}\n\nconst person1 = new Person('Asabeneh', 'Yetayeh')\n\nconsole.log(person1)\n</code></pre> <pre><code>Person\u00a0{firstName: \"Asabeneh\", lastName: \"Yetayeh\"}\n</code></pre> <p>As we have stated at the very beginning that once we create a class we can create many object using the class. Now, let us create many person objects using the Person class.</p> <pre><code>class Person {\n  constructor(firstName, lastName) {\n    console.log(this) // Check the output from here\n    this.firstName = firstName\n    this.lastName = lastName\n  }\n}\n\nconst person1 = new Person('Asabeneh', 'Yetayeh')\nconst person2 = new Person('Lidiya', 'Tekle')\nconst person3 = new Person('Abraham', 'Yetayeh')\n\nconsole.log(person1)\nconsole.log(person2)\nconsole.log(person3)\n</code></pre> <pre><code>Person\u00a0{firstName: \"Asabeneh\", lastName: \"Yetayeh\"}\nPerson\u00a0{firstName: \"Lidiya\", lastName: \"Tekle\"}\nPerson\u00a0{firstName: \"Abraham\", lastName: \"Yetayeh\"}\n</code></pre> <p>Using the class Person we created three persons object. As you can see our class did not many properties let us add more properties to the class.</p> <pre><code>class Person {\n  constructor(firstName, lastName, age, country, city) {\n    console.log(this) // Check the output from here\n    this.firstName = firstName\n    this.lastName = lastName\n    this.age = age\n    this.country = country\n    this.city = city\n  }\n}\n\nconst person1 = new Person('Asabeneh', 'Yetayeh', 250, 'Finland', 'Helsinki')\n\nconsole.log(person1)\n</code></pre> <pre><code>Person\u00a0{firstName: \"Asabeneh\", lastName: \"Yetayeh\", age: 250, country: \"Finland\", city: \"Helsinki\"}\n</code></pre>"},{"location":"15-day/#default-values-with-constructor","title":"Default values with constructor","text":"<p>The constructor function properties may have a default value like other regular functions.</p> <pre><code>class Person {\n  constructor(\n    firstName = 'Asabeneh',\n    lastName = 'Yetayeh',\n    age = 250,\n    country = 'Finland',\n    city = 'Helsinki'\n  ) {\n    this.firstName = firstName\n    this.lastName = lastName\n    this.age = age\n    this.country = country\n    this.city = city\n  }\n}\n\nconst person1 = new Person() // it will take the default values\nconst person2 = new Person('Lidiya', 'Tekle', 28, 'Finland', 'Espoo')\n\nconsole.log(person1)\nconsole.log(person2)\n</code></pre> <pre><code>Person\u00a0{firstName: \"Asabeneh\", lastName: \"Yetayeh\", age: 250, country: \"Finland\", city: \"Helsinki\"}\nPerson\u00a0{firstName: \"Lidiya\", lastName: \"Tekle\", age: 28, country: \"Finland\", city: \"Espoo\"}\n</code></pre>"},{"location":"15-day/#class-methods","title":"Class methods","text":"<p>The constructor inside a class is a builtin function which allow us to create a blueprint for the object. In a class we can create class methods. Methods are JavaScript functions inside the class. Let us create some class methods.</p> <pre><code>class Person {\n  constructor(firstName, lastName, age, country, city) {\n    this.firstName = firstName\n    this.lastName = lastName\n    this.age = age\n    this.country = country\n    this.city = city\n  }\n  getFullName() {\n    const fullName = this.firstName + ' ' + this.lastName\n    return fullName\n  }\n}\n\nconst person1 = new Person('Asabeneh', 'Yetayeh', 250, 'Finland', 'Helsinki')\nconst person2 = new Person('Lidiya', 'Tekle', 28, 'Finland', 'Espoo')\n\nconsole.log(person1.getFullName())\nconsole.log(person2.getFullName())\n</code></pre> <pre><code>Asabeneh Yetayeh\ntest.js:19 Lidiya Tekle\n</code></pre>"},{"location":"15-day/#properties-with-initial-value","title":"Properties with initial value","text":"<p>When we create a class for some properties we may have an initial value. For instance if you are playing a game, you starting score will be zero. So, we may have a starting score or score which is zero. In other way, we may have an initial skill and we will acquire some skill after some time.</p> <pre><code>class Person {\n  constructor(firstName, lastName, age, country, city) {\n    this.firstName = firstName\n    this.lastName = lastName\n    this.age = age\n    this.country = country\n    this.city = city\n    this.score = 0\n    this.skills = []\n  }\n  getFullName() {\n    const fullName = this.firstName + ' ' + this.lastName\n    return fullName\n  }\n}\n\nconst person1 = new Person('Asabeneh', 'Yetayeh', 250, 'Finland', 'Helsinki')\nconst person2 = new Person('Lidiya', 'Tekle', 28, 'Finland', 'Espoo')\n\nconsole.log(person1.score)\nconsole.log(person2.score)\n\nconsole.log(person1.skills)\nconsole.log(person2.skills)\n</code></pre> <pre><code>0\n0\n[]\n[]\n</code></pre> <p>A method could be regular method or a getter or a setter. Let us see, getter and setter.</p>"},{"location":"15-day/#getter","title":"getter","text":"<p>The get method allow us to access value from the object. We write a get method using keyword get followed by a function. Instead of accessing properties directly from the object we use getter to get the value. See the example bellow</p> <pre><code>class Person {\n  constructor(firstName, lastName, age, country, city) {\n    this.firstName = firstName\n    this.lastName = lastName\n    this.age = age\n    this.country = country\n    this.city = city\n    this.score = 0\n    this.skills = []\n  }\n  getFullName() {\n    const fullName = this.firstName + ' ' + this.lastName\n    return fullName\n  }\n  get getScore() {\n    return this.score\n  }\n  get getSkills() {\n    return this.skills\n  }\n}\n\nconst person1 = new Person('Asabeneh', 'Yetayeh', 250, 'Finland', 'Helsinki')\nconst person2 = new Person('Lidiya', 'Tekle', 28, 'Finland', 'Espoo')\n\nconsole.log(person1.getScore) // We do not need parenthesis to call a getter method\nconsole.log(person2.getScore)\n\nconsole.log(person1.getSkills)\nconsole.log(person2.getSkills)\n</code></pre> <pre><code>0\n0\n[]\n[]\n</code></pre>"},{"location":"15-day/#setter","title":"setter","text":"<p>The setter method allow us to modify the value of certain properties. We write a setter method using keyword set followed by a function. See the example bellow.</p> <pre><code>class Person {\n  constructor(firstName, lastName, age, country, city) {\n    this.firstName = firstName\n    this.lastName = lastName\n    this.age = age\n    this.country = country\n    this.city = city\n    this.score = 0\n    this.skills = []\n  }\n  getFullName() {\n    const fullName = this.firstName + ' ' + this.lastName\n    return fullName\n  }\n  get getScore() {\n    return this.score\n  }\n  get getSkills() {\n    return this.skills\n  }\n  set setScore(score) {\n    this.score += score\n  }\n  set setSkill(skill) {\n    this.skills.push(skill)\n  }\n}\n\nconst person1 = new Person('Asabeneh', 'Yetayeh', 250, 'Finland', 'Helsinki')\nconst person2 = new Person('Lidiya', 'Tekle', 28, 'Finland', 'Espoo')\n\nperson1.setScore = 1\nperson1.setSkill = 'HTML'\nperson1.setSkill = 'CSS'\nperson1.setSkill = 'JavaScript'\n\nperson2.setScore = 1\nperson2.setSkill = 'Planning'\nperson2.setSkill = 'Managing'\nperson2.setSkill = 'Organizing'\n\nconsole.log(person1.score)\nconsole.log(person2.score)\n\nconsole.log(person1.skills)\nconsole.log(person2.skills)\n</code></pre> <pre><code>1\n1\n[\"HTML\", \"CSS\", \"JavaScript\"]\n[\"Planning\", \"Managing\", \"Organizing\"]\n</code></pre> <p>Do not be puzzled by the difference between regular method and a getter. If you know how to make a regular method you are good. Let us add regular method called getPersonInfo in the Person class.</p> <pre><code>class Person {\n  constructor(firstName, lastName, age, country, city) {\n    this.firstName = firstName\n    this.lastName = lastName\n    this.age = age\n    this.country = country\n    this.city = city\n    this.score = 0\n    this.skills = []\n  }\n  getFullName() {\n    const fullName = this.firstName + ' ' + this.lastName\n    return fullName\n  }\n  get getScore() {\n    return this.score\n  }\n  get getSkills() {\n    return this.skills\n  }\n  set setScore(score) {\n    this.score += score\n  }\n  set setSkill(skill) {\n    this.skills.push(skill)\n  }\n  getPersonInfo() {\n    let fullName = this.getFullName()\n    let skills =\n      this.skills.length &gt; 0 &amp;&amp;\n      this.skills.slice(0, this.skills.length - 1).join(', ') +\n        ` and ${this.skills[this.skills.length - 1]}`\n    let formattedSkills = skills ? `He knows ${skills}` : ''\n\n    let info = `${fullName} is ${this.age}. He lives ${this.city}, ${this.country}. ${formattedSkills}`\n    return info\n  }\n}\n\nconst person1 = new Person('Asabeneh', 'Yetayeh', 250, 'Finland', 'Helsinki')\nconst person2 = new Person('Lidiya', 'Tekle', 28, 'Finland', 'Espoo')\nconst person3 = new Person('John', 'Doe', 50, 'Mars', 'Mars city')\n\nperson1.setScore = 1\nperson1.setSkill = 'HTML'\nperson1.setSkill = 'CSS'\nperson1.setSkill = 'JavaScript'\n\nperson2.setScore = 1\nperson2.setSkill = 'Planning'\nperson2.setSkill = 'Managing'\nperson2.setSkill = 'Organizing'\n\nconsole.log(person1.getScore)\nconsole.log(person2.getScore)\n\nconsole.log(person1.getSkills)\nconsole.log(person2.getSkills)\nconsole.log(person3.getSkills)\n\nconsole.log(person1.getPersonInfo())\nconsole.log(person2.getPersonInfo())\nconsole.log(person3.getPersonInfo())\n</code></pre> <pre><code>1\n1\n[\"HTML\", \"CSS\", \"JavaScript\"]\n[\"Planning\", \"Managing\", \"Organizing\"]\n[]\nAsabeneh Yetayeh is 250. He lives Helsinki, Finland. He knows HTML, CSS and JavaScript\nLidiya Tekle is 28. He lives Espoo, Finland. He knows Planning, Managing and Organizing\nJohn Doe is 50. He lives Mars city, Mars.\n</code></pre>"},{"location":"15-day/#static-method","title":"Static method","text":"<p>The static keyword defines a static method for a class. Static methods are not called on instances of the class. Instead, they are called on the class itself. These are often utility functions, such as functions to create or clone objects. An example of static method is Date.now(). The now method is called directly from the class.</p> <pre><code>class Person {\n  constructor(firstName, lastName, age, country, city) {\n    this.firstName = firstName\n    this.lastName = lastName\n    this.age = age\n    this.country = country\n    this.city = city\n    this.score = 0\n    this.skills = []\n  }\n  getFullName() {\n    const fullName = this.firstName + ' ' + this.lastName\n    return fullName\n  }\n  get getScore() {\n    return this.score\n  }\n  get getSkills() {\n    return this.skills\n  }\n  set setScore(score) {\n    this.score += score\n  }\n  set setSkill(skill) {\n    this.skills.push(skill)\n  }\n  getPersonInfo() {\n    let fullName = this.getFullName()\n    let skills =\n      this.skills.length &gt; 0 &amp;&amp;\n      this.skills.slice(0, this.skills.length - 1).join(', ') +\n        ` and ${this.skills[this.skills.length - 1]}`\n\n    let formattedSkills = skills ? `He knows ${skills}` : ''\n\n    let info = `${fullName} is ${this.age}. He lives ${this.city}, ${this.country}. ${formattedSkills}`\n    return info\n  }\n  static favoriteSkill() {\n    const skills = ['HTML', 'CSS', 'JS', 'React', 'Python', 'Node']\n    const index = Math.floor(Math.random() * skills.length)\n    return skills[index]\n  }\n  static showDateTime() {\n    let now = new Date()\n    let year = now.getFullYear()\n    let month = now.getMonth() + 1\n    let date = now.getDate()\n    let hours = now.getHours()\n    let minutes = now.getMinutes()\n    if (hours &lt; 10) {\n      hours = '0' + hours\n    }\n    if (minutes &lt; 10) {\n      minutes = '0' + minutes\n    }\n\n    let dateMonthYear = date + '.' + month + '.' + year\n    let time = hours + ':' + minutes\n    let fullTime = dateMonthYear + ' ' + time\n    return fullTime\n  }\n}\n\nconsole.log(Person.favoriteSkill())\nconsole.log(Person.showDateTime())\n</code></pre> <pre><code>Node\n15.1.2020 23:56\n</code></pre> <p>The static methods are methods which can be used as utility functions.</p>"},{"location":"15-day/#inheritance","title":"Inheritance","text":"<p>Using inheritance we can access all the properties and the methods of the parent class. This reduces repetition of code. If you remember, we have a Person parent class and we will create children from it. Our children class could be student, teach etc.</p> <pre><code>// syntax\nclass ChildClassName extends {\n // code goes here\n}\n</code></pre> <p>Let us create a Student child class from Person parent class.</p> <pre><code>class Student extends Person {\n  saySomething() {\n    console.log('I am a child of the person class')\n  }\n}\n\nconst s1 = new Student('Asabeneh', 'Yetayeh', 'Finland', 250, 'Helsinki')\nconsole.log(s1)\nconsole.log(s1.saySomething())\nconsole.log(s1.getFullName())\nconsole.log(s1.getPersonInfo())\n</code></pre> <pre><code>Student\u00a0{firstName: \"Asabeneh\", lastName: \"Yetayeh\", age: \"Finland\", country: 250, city: \"Helsinki\",\u00a0\u2026}\nI am a child of the person class\nAsabeneh Yetayeh\nStudent\u00a0{firstName: \"Asabeneh\", lastName: \"Yetayeh\", age: \"Finland\", country: 250, city: \"Helsinki\",\u00a0\u2026}\nAsabeneh Yetayeh is Finland. He lives Helsinki, 250.\n</code></pre>"},{"location":"15-day/#overriding-methods","title":"Overriding methods","text":"<p>As you can see, we manage to access all the methods in the Person Class and we used it in the Student child class. We can customize the parent methods, we can add additional properties to a child class. If we want to customize, the methods and if we want to add extra properties, we need to use the constructor function the child class too. Inside the constructor function we call the super() function to access all the properties from the parent class. The Person class didn't have gender but now let us give gender property for the child class, Student. If the same method name used in the child class, the parent method will be overridden.</p> <pre><code>class Student extends Person {\n  constructor(firstName, lastName, age, country, city, gender) {\n    super(firstName, lastName, age, country, city)\n    this.gender = gender\n  }\n\n  saySomething() {\n    console.log('I am a child of the person class')\n  }\n  getPersonInfo() {\n    let fullName = this.getFullName()\n    let skills =\n      this.skills.length &gt; 0 &amp;&amp;\n      this.skills.slice(0, this.skills.length - 1).join(', ') +\n        ` and ${this.skills[this.skills.length - 1]}`\n\n    let formattedSkills = skills ? `He knows ${skills}` : ''\n    let pronoun = this.gender == 'Male' ? 'He' : 'She'\n\n    let info = `${fullName} is ${this.age}. ${pronoun} lives in ${this.city}, ${this.country}. ${formattedSkills}`\n    return info\n  }\n}\n\nconst s1 = new Student(\n  'Asabeneh',\n  'Yetayeh',\n  250,\n  'Finland',\n  'Helsinki',\n  'Male'\n)\nconst s2 = new Student('Lidiya', 'Tekle', 28, 'Finland', 'Helsinki', 'Female')\ns1.setScore = 1\ns1.setSkill = 'HTML'\ns1.setSkill = 'CSS'\ns1.setSkill = 'JavaScript'\n\ns2.setScore = 1\ns2.setSkill = 'Planning'\ns2.setSkill = 'Managing'\ns2.setSkill = 'Organizing'\n\nconsole.log(s1)\n\nconsole.log(s1.saySomething())\nconsole.log(s1.getFullName())\nconsole.log(s1.getPersonInfo())\n\nconsole.log(s2.saySomething())\nconsole.log(s2.getFullName())\nconsole.log(s2.getPersonInfo())\n</code></pre> <pre><code>Student\u00a0{firstName: \"Asabeneh\", lastName: \"Yetayeh\", age: 250, country: \"Finland\", city: \"Helsinki\",\u00a0\u2026}\nStudent\u00a0{firstName: \"Lidiya\", lastName: \"Tekle\", age: 28, country: \"Finland\", city: \"Helsinki\",\u00a0\u2026}\nI am a child of the person class\nAsabeneh Yetayeh\nStudent\u00a0{firstName: \"Asabeneh\", lastName: \"Yetayeh\", age: 250, country: \"Finland\", city: \"Helsinki\",\u00a0\u2026}\nAsabeneh Yetayeh is 250. He lives in Helsinki, Finland. He knows HTML, CSS and JavaScript\nI am a child of the person class\nLidiya Tekle\nStudent\u00a0{firstName: \"Lidiya\", lastName: \"Tekle\", age: 28, country: \"Finland\", city: \"Helsinki\",\u00a0\u2026}\nLidiya Tekle is 28. She lives in Helsinki, Finland. He knows Planning, Managing and Organizing\n</code></pre> <p>Now, the getPersonInfo method has been overridden and it identifies if the person is male or female.</p> <p>\ud83c\udf15 You are excelling. Now, you knew class and you have the power to turn everything to an object. You made it to half way to your way to greatness. Now do some exercises for your brain and for your muscle.</p>"},{"location":"15-day/#exercises","title":"Exercises","text":""},{"location":"15-day/#exercises-level-1","title":"Exercises Level 1","text":"<ol> <li>Create an Animal class. The class will have name, age, color, legs properties and create different methods</li> <li>Create a Dog and Cat child class from the Animal Class.</li> </ol>"},{"location":"15-day/#exercises-level-2","title":"Exercises Level 2","text":"<ol> <li>Override the method you create in Animal class</li> </ol>"},{"location":"15-day/#exercises-level-3","title":"Exercises Level 3","text":"<ol> <li>Let's try to develop a program which calculate measure of central tendency of a sample(mean, median, mode) and measure of variability(range, variance, standard deviation). In addition to those measures find the min, max, count, percentile, and frequency distribution of the sample. You can create a class called Statistics and create all the functions which do statistical calculations as method for the Statistics class. Check the output below.</li> </ol> <pre><code>ages = [31, 26, 34, 37, 27, 26, 32, 32, 26, 27, 27, 24, 32, 33, 27, 25, 26, 38, 37, 31, 34, 24, 33, 29, 26]\n\nconsole.log('Count:', statistics.count()) // 25\nconsole.log('Sum: ', statistics.sum()) // 744\nconsole.log('Min: ', statistics.min()) // 24\nconsole.log('Max: ', statistics.max()) // 38\nconsole.log('Range: ', statistics.range() // 14\nconsole.log('Mean: ', statistics.mean()) // 30\nconsole.log('Median: ',statistics.median()) // 29\nconsole.log('Mode: ', statistics.mode()) // {'mode': 26, 'count': 5}\nconsole.log('Variance: ',statistics.var()) // 17.5\nconsole.log('Standard Deviation: ', statistics.std()) // 4.2\nconsole.log('Variance: ',statistics.var()) // 17.5\nconsole.log('Frequency Distribution: ',statistics.freqDist()) // [(20.0, 26), (16.0, 27), (12.0, 32), (8.0, 37), (8.0, 34), (8.0, 33), (8.0, 31), (8.0, 24), (4.0, 38), (4.0, 29), (4.0, 25)]\n</code></pre> <pre><code>// you output should look like this\nconsole.log(statistics.describe())\nCount: 25\nSum:  744\nMin:  24\nMax:  38\nRange:  14\nMean:  30\nMedian:  29\nMode:  (26, 5)\nVariance:  17.5\nStandard Deviation:  4.2\nFrequency Distribution: [(20.0, 26), (16.0, 27), (12.0, 32), (8.0, 37), (8.0, 34), (8.0, 33), (8.0, 31), (8.0, 24), (4.0, 38), (4.0, 29), (4.0, 25)]\n</code></pre> <ol> <li>Create a class called PersonAccount. It has firstname, lastname, incomes, expenses properties and it has totalIncome, totalExpense, accountInfo,addIncome, addExpense and accountBalance methods. Incomes is a set of incomes and its description and expenses is also a set of expenses and its description.</li> </ol> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"16-day/","title":"\ud83d\udcd8 Day 16","text":""},{"location":"16-day/#json","title":"JSON","text":"<p>JSON stands for JavaScript Object Notation. The JSON syntax is derived from JavaScript object notation syntax, but the JSON format is text or string only. JSON is a light weight data format for storing and transporting. JSON is mostly used when data is sent from a server to a client. JSON is an easier-to-use alternative to XML.</p> <p>Example:</p> <pre><code>{\n\"users\":[\n  {\n    \"firstName\":\"Asabeneh\",\n    \"lastName\":\"Yetayeh\",\n    \"age\":250,\n    \"email\":\"asab@asb.com\"\n  },\n  {\n    \"firstName\":\"Alex\",\n    \"lastName\":\"James\",\n    \"age\":25,\n    \"email\":\"alex@alex.com\"\n  },\n  {\n  \"firstName\":\"Lidiya\",\n  \"lastName\":\"Tekle\",\n  \"age\":28,\n  \"email\":\"lidiya@lidiya.com\"\n  }\n]\n}\n</code></pre> <p>The above JSON example is not much different from a normal object. Then, what is the difference ? The difference is the key of a JSON object should be with double quotes or it should be a string. JavaScript Object and JSON are very similar that we can change JSON to Object and Object to JSON.</p> <p>Let us see the above example in more detail, it starts with a curly bracket. Inside the curly bracket, there is \"users\" key which has a value array. Inside the array we have different objects and each objects has keys, each keys has to have double quotes. For instance, we use \"firstNaMe\" instead of just firstName, however in object we use keys without double quotes. This is the major difference between an object and a JSON. Let's see more examples about JSON.</p> <p>Example:</p> <pre><code>{\n    \"Alex\": {\n        \"email\": \"alex@alex.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\"\n        ],\n        \"age\": 20,\n        \"isLoggedIn\": false,\n        \"points\": 30\n    },\n    \"Asab\": {\n        \"email\": \"asab@asab.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"Redux\",\n            \"MongoDB\",\n            \"Express\",\n            \"React\",\n            \"Node\"\n        ],\n        \"age\": 25,\n        \"isLoggedIn\": false,\n        \"points\": 50\n    },\n    \"Brook\": {\n        \"email\": \"daniel@daniel.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"React\",\n            \"Redux\"\n        ],\n        \"age\": 30,\n        \"isLoggedIn\": true,\n        \"points\": 50\n    },\n    \"Daniel\": {\n        \"email\": \"daniel@alex.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"Python\"\n        ],\n        \"age\": 20,\n        \"isLoggedIn\": false,\n        \"points\": 40\n    },\n    \"John\": {\n        \"email\": \"john@john.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"React\",\n            \"Redux\",\n            \"Node.js\"\n        ],\n        \"age\": 20,\n        \"isLoggedIn\": true,\n        \"points\": 50\n    },\n    \"Thomas\": {\n        \"email\": \"thomas@thomas.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"React\"\n        ],\n        \"age\": 20,\n        \"isLoggedIn\": false,\n        \"points\": 40\n    },\n    \"Paul\": {\n        \"email\": \"paul@paul.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"MongoDB\",\n            \"Express\",\n            \"React\",\n            \"Node\"\n        ],\n        \"age\": 20,\n        \"isLoggedIn\": false,\n        \"points\": 40\n    }\n}\n</code></pre>"},{"location":"16-day/#converting-json-to-javascript-object","title":"Converting JSON to JavaScript Object","text":"<p>Mostly we fetch JSON data from HTTP response or from a file, but we can store the JSON as a string and we can change to Object for sake of demonstration. In JavaScript the keyword JSON has parse() and stringify() methods. When we want to change the JSON to an object we parse the JSON using JSON.parse(). When we want to change the object to JSON we use JSON.stringify().</p>"},{"location":"16-day/#jsonparse","title":"JSON.parse()","text":"<pre><code>JSON.parse(json[, reviver])\n// json or text , the data\n// reviver is an optional callback function\n/* JSON.parse(json, (key, value) =&gt; {\n\n})\n*/\n</code></pre> <pre><code>const usersText = `{\n\"users\":[\n  {\n    \"firstName\":\"Asabeneh\",\n    \"lastName\":\"Yetayeh\",\n    \"age\":250,\n    \"email\":\"asab@asb.com\"\n  },\n  {\n    \"firstName\":\"Alex\",\n    \"lastName\":\"James\",\n    \"age\":25,\n    \"email\":\"alex@alex.com\"\n  },\n  {\n  \"firstName\":\"Lidiya\",\n  \"lastName\":\"Tekle\",\n  \"age\":28,\n  \"email\":\"lidiya@lidiya.com\"\n  }\n]\n}`\n\nconst usersObj = JSON.parse(usersText, undefined, 4)\nconsole.log(usersObj)\n</code></pre>"},{"location":"16-day/#using-a-reviver-function-with-jsonparse","title":"Using a reviver function with JSON.parse()","text":"<p>To use the reviver function as a formatter, we put the keys we want to format first name and last name value. Let us say, we are interested to format the firstName and lastName of the JSON data .</p> <pre><code>const usersText = `{\n\"users\":[\n  {\n    \"firstName\":\"Asabeneh\",\n    \"lastName\":\"Yetayeh\",\n    \"age\":250,\n    \"email\":\"asab@asb.com\"\n  },\n  {\n    \"firstName\":\"Alex\",\n    \"lastName\":\"James\",\n    \"age\":25,\n    \"email\":\"alex@alex.com\"\n  },\n  {\n  \"firstName\":\"Lidiya\",\n  \"lastName\":\"Tekle\",\n  \"age\":28,\n  \"email\":\"lidiya@lidiya.com\"\n  }\n]\n}`\n\nconst usersObj = JSON.parse(usersText, (key, value) =&gt; {\n  let newValue =\n    typeof value == 'string' &amp;&amp; key != 'email' ? value.toUpperCase() : value\n  return newValue\n})\nconsole.log(usersObj)\n</code></pre> <p>The JSON.parse() is very handy to use. You do not have to pass optional parameter, you can just use it with the required parameter and you will achieve quite a lot.</p>"},{"location":"16-day/#converting-object-to-json","title":"Converting Object to JSON","text":"<p>When we want to change the object to JSON we use JSON.stringify(). The stringify method takes one required parameter and two optional parameters. The replacer is used as filter and the space is an indentations. If we do not want to filter out any of the keys from the object we can just pass undefined.</p> <pre><code>JSON.stringify(obj, replacer, space)\n// json or text , the data\n// reviver is an optional callback function\n</code></pre> <p>Let us convert the following object to a string. First let use keep all the keys and also let us have 4 space indentation.</p> <pre><code>const users = {\n  Alex: {\n    email: 'alex@alex.com',\n    skills: ['HTML', 'CSS', 'JavaScript'],\n    age: 20,\n    isLoggedIn: false,\n    points: 30\n  },\n  Asab: {\n    email: 'asab@asab.com',\n    skills: [\n      'HTML',\n      'CSS',\n      'JavaScript',\n      'Redux',\n      'MongoDB',\n      'Express',\n      'React',\n      'Node'\n    ],\n    age: 25,\n    isLoggedIn: false,\n    points: 50\n  },\n  Brook: {\n    email: 'daniel@daniel.com',\n    skills: ['HTML', 'CSS', 'JavaScript', 'React', 'Redux'],\n    age: 30,\n    isLoggedIn: true,\n    points: 50\n  },\n  Daniel: {\n    email: 'daniel@alex.com',\n    skills: ['HTML', 'CSS', 'JavaScript', 'Python'],\n    age: 20,\n    isLoggedIn: false,\n    points: 40\n  },\n  John: {\n    email: 'john@john.com',\n    skills: ['HTML', 'CSS', 'JavaScript', 'React', 'Redux', 'Node.js'],\n    age: 20,\n    isLoggedIn: true,\n    points: 50\n  },\n  Thomas: {\n    email: 'thomas@thomas.com',\n    skills: ['HTML', 'CSS', 'JavaScript', 'React'],\n    age: 20,\n    isLoggedIn: false,\n    points: 40\n  },\n  Paul: {\n    email: 'paul@paul.com',\n    skills: [\n      'HTML',\n      'CSS',\n      'JavaScript',\n      'MongoDB',\n      'Express',\n      'React',\n      'Node'\n    ],\n    age: 20,\n    isLoggedIn: false,\n    points: 40\n  }\n}\n\nconst txt = JSON.stringify(users, undefined, 4)\nconsole.log(txt) // text means JSON- because json is a string form of an object.\n</code></pre> <pre><code>{\n    \"Alex\": {\n        \"email\": \"alex@alex.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\"\n        ],\n        \"age\": 20,\n        \"isLoggedIn\": false,\n        \"points\": 30\n    },\n    \"Asab\": {\n        \"email\": \"asab@asab.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"Redux\",\n            \"MongoDB\",\n            \"Express\",\n            \"React\",\n            \"Node\"\n        ],\n        \"age\": 25,\n        \"isLoggedIn\": false,\n        \"points\": 50\n    },\n    \"Brook\": {\n        \"email\": \"daniel@daniel.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"React\",\n            \"Redux\"\n        ],\n        \"age\": 30,\n        \"isLoggedIn\": true,\n        \"points\": 50\n    },\n    \"Daniel\": {\n        \"email\": \"daniel@alex.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"Python\"\n        ],\n        \"age\": 20,\n        \"isLoggedIn\": false,\n        \"points\": 40\n    },\n    \"John\": {\n        \"email\": \"john@john.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"React\",\n            \"Redux\",\n            \"Node.js\"\n        ],\n        \"age\": 20,\n        \"isLoggedIn\": true,\n        \"points\": 50\n    },\n    \"Thomas\": {\n        \"email\": \"thomas@thomas.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"React\"\n        ],\n        \"age\": 20,\n        \"isLoggedIn\": false,\n        \"points\": 40\n    },\n    \"Paul\": {\n        \"email\": \"paul@paul.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"MongoDB\",\n            \"Express\",\n            \"React\",\n            \"Node\"\n        ],\n        \"age\": 20,\n        \"isLoggedIn\": false,\n        \"points\": 40\n    }\n}\n</code></pre>"},{"location":"16-day/#using-a-filter-array-with-jsonstringify","title":"Using a Filter Array with JSON.stringify","text":"<p>Now, lets use the replacer as a filter. The user object has long list of keys but we are interested only in few of them. We put the keys we want to keep in array as show in the example and use it the place of the replacer.</p> <pre><code>const user = {\n  firstName: 'Asabeneh',\n  lastName: 'Yetayeh',\n  country: 'Finland',\n  city: 'Helsinki',\n  email: 'alex@alex.com',\n  skills: ['HTML', 'CSS', 'JavaScript', 'React', 'Python'],\n  age: 250,\n  isLoggedIn: false,\n  points: 30\n}\n\nconst txt = JSON.stringify(user,['firstName', 'lastName', 'country', 'city', 'age'],4)\nconsole.log(txt)\n</code></pre> <pre><code>{\n    \"firstName\": \"Asabeneh\",\n    \"lastName\": \"Yetayeh\",\n    \"country\": \"Finland\",\n    \"city\": \"Helsinki\",\n    \"age\": 250\n}\n</code></pre> <p>\ud83c\udf15 You are extraordinary.  Now, you knew a light-weight data format which you may use to store data or to send it an HTTP server. You are 16 steps a head to your way to greatness. Now do some exercises for your brain and for your muscle.</p>"},{"location":"16-day/#exercises","title":"Exercises","text":"<pre><code>const skills = ['HTML', 'CSS', 'JS', 'React','Node', 'Python']\nlet age = 250;\nlet isMarried = true\nconst student = {\n  firstName:'Asabeneh',\n  lastName:'Yetayehe',\n  age:250,\n  isMarried:true,\n  skills:['HTML', 'CSS', 'JS', 'React','Node', 'Python', ]\n}\nconst txt = `{\n    \"Alex\": {\n        \"email\": \"alex@alex.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\"\n        ],\n        \"age\": 20,\n        \"isLoggedIn\": false,\n        \"points\": 30\n    },\n    \"Asab\": {\n        \"email\": \"asab@asab.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"Redux\",\n            \"MongoDB\",\n            \"Express\",\n            \"React\",\n            \"Node\"\n        ],\n        \"age\": 25,\n        \"isLoggedIn\": false,\n        \"points\": 50\n    },\n    \"Brook\": {\n        \"email\": \"daniel@daniel.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"React\",\n            \"Redux\"\n        ],\n        \"age\": 30,\n        \"isLoggedIn\": true,\n        \"points\": 50\n    },\n    \"Daniel\": {\n        \"email\": \"daniel@alex.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"Python\"\n        ],\n        \"age\": 20,\n        \"isLoggedIn\": false,\n        \"points\": 40\n    },\n    \"John\": {\n        \"email\": \"john@john.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"React\",\n            \"Redux\",\n            \"Node.js\"\n        ],\n        \"age\": 20,\n        \"isLoggedIn\": true,\n        \"points\": 50\n    },\n    \"Thomas\": {\n        \"email\": \"thomas@thomas.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"React\"\n        ],\n        \"age\": 20,\n        \"isLoggedIn\": false,\n        \"points\": 40\n    },\n    \"Paul\": {\n        \"email\": \"paul@paul.com\",\n        \"skills\": [\n            \"HTML\",\n            \"CSS\",\n            \"JavaScript\",\n            \"MongoDB\",\n            \"Express\",\n            \"React\",\n            \"Node\"\n        ],\n        \"age\": 20,\n        \"isLoggedIn\": false,\n        \"points\": 40\n    }\n}\n`\n</code></pre>"},{"location":"16-day/#exercises-level-1","title":"Exercises Level 1","text":"<ol> <li>Change skills array to JSON using JSON.stringify()</li> <li>Stringify the age variable</li> <li>Stringify the isMarried variable</li> <li>Stringify the student object</li> </ol>"},{"location":"16-day/#exercises-level-2","title":"Exercises Level 2","text":"<ol> <li>Stringify the students object with only firstName, lastName and skills properties</li> </ol>"},{"location":"16-day/#exercises-level-3","title":"Exercises Level 3","text":"<ol> <li>Parse the txt JSON to object.</li> <li>Find the user who has many skills from the variable stored in txt.</li> </ol> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"17-day/","title":"\ud83d\udcd8 Day 17","text":""},{"location":"17-day/#html5-web-storage","title":"HTML5 Web Storage","text":"<p>Web Storage(sessionStorage and localStorage) is a new HTML5 API offering important benefits over traditional cookies. Before HTML5, application data had to be stored in cookies, included in every server request. Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance. The data storage limit of cookies in many web browsers is about 4 KB per cookie. We Storages can store far larger data (at least 5MB) and never transferred to the server. All sites from the same or one origin can store and access the same data.</p> <p>The data being stored can be accessed using JavaScript, which gives you the ability to leverage client-side scripting to do many things that have traditionally involved server-side programming and relational databases. There are two Web Storage objects:</p> <ul> <li>sessionStorage</li> <li>localStorage</li> </ul> <p>localStorage is similar to sessionStorage, except that while data stored in localStorage has no expiration time, data stored in sessionStorage gets cleared when the page session ends \u2014 that is, when the page is closed.</p> <p>It should be noted that data stored in either localStorage or sessionStorage is specific to the protocol of the page.</p> <p>The keys and the values are always strings (note that, as with objects, integer keys will be automatically converted to strings).</p> <p></p>"},{"location":"17-day/#sessionstorage","title":"sessionStorage","text":"<p>sessionStorage is only available within the browser tab or window session. It\u2019s designed to store data in a single web page session. That means if the window is closed the session data will be removed. Since sessionStorage and localStorage has similar methods, we will focus only on localStorage.</p>"},{"location":"17-day/#localstorage","title":"localStorage","text":"<p>The HTML5 localStorage is the para of the web storage API which is used to store data on the browser with no expiration data. The data will be available on the browser even after the browser is closed. localStorage is kept even between browser sessions. This means data is still available when the browser is closed and reopened, and also instantly between tabs and windows.</p> <p>Web Storage data is, in both cases, not available between different browsers. For example, storage objects created in Firefox cannot be accessed in Internet Explorer, exactly like cookies. There are five methods to work on local storage: setItem(), getItem(), removeItem(), clear(), key()</p>"},{"location":"17-day/#use-case-of-web-storages","title":"Use case of Web Storages","text":"<p>Some use case of Web Storages are</p> <ul> <li>store data temporarily</li> <li>saving products that the user places in his shopping cart</li> <li>data can be made available between page requests, multiple browser tabs, and also between browser sessions using localStorage</li> <li>can be used offline completely using localStorage</li> <li>Web Storage can be a great performance win when some static data is stored on the client to minimize the number of subsequent requests. Even images can be stored in strings using Base64 encoding.</li> <li>can be used for user authentication method</li> </ul> <p>For the examples mentioned above, it makes sense to use localStorage. You may be wondering, then, when we should use sessionStorage.</p> <p>In cases, we want to to get rid of the data as soon as the window is closed. Or, perhaps, if we do not want the application to interfere with the same application that\u2019s open in another window. These scenarios are served best with sessionStorage.</p> <p>Now, let us see how make use of these Web Storage APIs.</p>"},{"location":"17-day/#html5-web-storage-objects","title":"HTML5 Web Storage Objects","text":"<p>HTML web storage provides two objects for storing data on the client:</p> <ul> <li>window.localStorage - stores data with no expiration date</li> <li>window.sessionStorage - stores data for one session (data is lost when the browser tab is closed)Most modern browsers support Web Storage, however it is good to check browser support for localStorage and sessionStorage. Let us see the available methods for the Web Storage objects.</li> </ul> <p>Web Storage objects:</p> <ul> <li>localStorage - to display the localStorage object</li> <li>localStorage.clear() - to remove everything in the local storage</li> <li>localStorage.setItem() - to store data in the localStorage. It takes a key and a value parameters.</li> <li>localStorage.getItem() - to display data stored in the localStorage. It takes a key as a parameter.</li> <li>localStorage.removeItem() - to remove stored item form a localStorage. It takes key as a parameter.</li> <li>localStorage.key() - to display a data stored in a localStorage. It takes index as a parameter.</li> </ul> <p></p>"},{"location":"17-day/#setting-item-to-the-localstorage","title":"Setting item to the localStorage","text":"<p>When we set data to be stored in a localStorage, it will be stored as a string. If we are storing an array or an object, we should stringify it first to keep the format unless otherwise we lose the array structure or the object structure of the original data.</p> <p>We store data in the localStorage using the localStorage.setItem method.</p> <pre><code>//syntax\nlocalStorage.setItem('key', 'value')\n</code></pre> <ul> <li>Storing string in a localStorage</li> </ul> <pre><code>localStorage.setItem('firstName', 'Asabeneh') // since the value is string we do not stringify it\nconsole.log(localStorage)\n</code></pre> <pre><code>Storage\u00a0{firstName: 'Asabeneh', length: 1}\n</code></pre> <ul> <li>Storing number in a local storage</li> </ul> <pre><code>localStorage.setItem('age', 200)\nconsole.log(localStorage)\n</code></pre> <pre><code> Storage\u00a0{age: '200', firstName: 'Asabeneh', length: 2}\n</code></pre> <ul> <li>Storing an array in a localStorage. If we are storing an array, an object or object array, we should stringify the object first. See the example below.</li> </ul> <pre><code>const skills = ['HTML', 'CSS', 'JS', 'React']\n//Skills array has to be stringified first to keep the format.\nconst skillsJSON = JSON.stringify(skills, undefined, 4)\nlocalStorage.setItem('skills', skillsJSON)\nconsole.log(localStorage)\n</code></pre> <pre><code>Storage\u00a0{age: '200', firstName: 'Asabeneh', skills: 'HTML,CSS,JS,React', length: 3}\n</code></pre> <pre><code>let skills = [\n  { tech: 'HTML', level: 10 },\n  { tech: 'CSS', level: 9 },\n  { tech: 'JS', level: 8 },\n  { tech: 'React', level: 9 },\n  { tech: 'Redux', level: 10 },\n  { tech: 'Node', level: 8 },\n  { tech: 'MongoDB', level: 8 }\n]\n\nlet skillJSON = JSON.stringify(skills)\nlocalStorage.setItem('skills', skillJSON)\n</code></pre> <ul> <li>Storing an object in a localStorage. Before we storage objects to a localStorage, the object has to be stringified.</li> </ul> <pre><code>const user = {\n  firstName: 'Asabeneh',\n  age: 250,\n  skills: ['HTML', 'CSS', 'JS', 'React']\n}\n\nconst userText = JSON.stringify(user, undefined, 4)\nlocalStorage.setItem('user', userText)\n</code></pre>"},{"location":"17-day/#getting-item-from-localstorage","title":"Getting item from localStorage","text":"<p>We get data from the local storage using localStorage.getItem() method.</p> <pre><code>//syntax\nlocalStorage.getItem('key')\n</code></pre> <pre><code>let firstName = localStorage.getItem('firstName')\nlet age = localStorage.getItem('age')\nlet skills = localStorage.getItem('skills')\nconsole.log(firstName, age, skills)\n</code></pre> <pre><code> 'Asabeneh', '200', '['HTML','CSS','JS','React']'\n</code></pre> <p>As you can see the skill is in a string format. Let us use JSON.parse() to parse it to normal array.</p> <pre><code>let skills = localStorage.getItem('skills')\nlet skillsObj = JSON.parse(skills, undefined, 4)\nconsole.log(skillsObj)\n</code></pre> <pre><code>['HTML','CSS','JS','React']\n</code></pre>"},{"location":"17-day/#clearing-the-localstorage","title":"Clearing the localStorage","text":"<p>The clear method, will clear everything stored in the local storage</p> <pre><code>localStorage.clear()\n</code></pre> <p>\ud83c\udf15 You are determined .Now, you knew a Web Storages and you knew how to store small data on client browsers. You are 17 steps a head to your way to greatness. Now do some exercises for your brain and for your muscle.</p>"},{"location":"17-day/#exercises","title":"Exercises","text":""},{"location":"17-day/#exercises-level-1","title":"Exercises: Level 1","text":"<ol> <li>Store you first name, last name, age, country, city in your browser localStorage.</li> </ol>"},{"location":"17-day/#exercises-level-2","title":"Exercises: Level 2","text":"<ol> <li>Create a student object. The student object will have first name, last name, age, skills, country, enrolled keys and values for the keys. Store the student object in your browser localStorage.</li> </ol>"},{"location":"17-day/#exercises-level-3","title":"Exercises: Level 3","text":"<ol> <li>Create an object called personAccount. It has firstname, lastname, incomes, expenses properties and it has totalIncome, totalExpense, accountInfo,addIncome, addExpense and accountBalance methods. Incomes is a set of incomes and its description and expenses is also a set of expenses and its description.</li> </ol> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"18-day/","title":"\ud83d\udcd8 Day 18","text":""},{"location":"18-day/#promise","title":"Promise","text":"<p>We human give or receive a promise to do some activity at some point in time. If we keep the promise we make others happy but if we do not keep the promise, it may lead discontentment. Promise in JavaScript has something in common with the above examples.</p> <p>A Promise is a way to handle asynchronous operations in JavaScript. It allows handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future.</p> <p>A Promise is in one of these states:</p> <ul> <li>pending: initial state, neither fulfilled nor rejected.</li> <li>fulfilled: meaning that the operation completed successfully.</li> <li>rejected: meaning that the operation failed.</li> </ul> <p>A pending promise can either be fulfilled with a value, or rejected with a reason (error). When either of these options happens, the associated handlers queued up by a promise's then method are called. (If the promise has already been fulfilled or rejected when a corresponding handler is attached, the handler will be called, so there is no race condition between an asynchronous operation completing and its handlers being attached.)</p> <p>As the Promise.prototype.then() and Promise.prototype.catch() methods return promises, they can be chained.</p>"},{"location":"18-day/#callbacks","title":"Callbacks","text":"<p>To understand promise very well let us understand callback first. Let's see the following callbacks. From the following code blocks you will notice, the difference between callback and promises.</p> <ul> <li>call back   Let us see a callback function which can take two parameters. The first parameter is err and the second is result. If the err parameter is false, there will not be error other wise it will return an error.</li> </ul> <p>In this case the err has a value and it will return the err block.</p> <pre><code>//Callback\nconst doSomething = callback =&gt; {\n  setTimeout(() =&gt; {\n    const skills = ['HTML', 'CSS', 'JS']\n    callback('It did not go well', skills)\n  }, 2000)\n}\n\nconst callback = (err, result) =&gt; {\n  if (err) {\n    return console.log(err)\n  }\n  return console.log(result)\n}\n\ndoSomething(callback)\n</code></pre> <pre><code>// after 2 seconds it will print\nIt did not go well\n</code></pre> <p>In this case the err is false and it will return the else block which is the result.</p> <pre><code>const doSomething = callback =&gt; {\n  setTimeout(() =&gt; {\n    const skills = ['HTML', 'CSS', 'JS']\n    callback(false, skills)\n  }, 2000)\n}\n\ndoSomething((err, result) =&gt; {\n  if (err) {\n    return console.log(err)\n  }\n  return console.log(result)\n})\n</code></pre> <pre><code>// after 2 seconds it will print the skills\n[\"HTML\", \"CSS\", \"JS\"]\n</code></pre>"},{"location":"18-day/#promise-constructor","title":"Promise constructor","text":"<p>We can create a promise using the Promise constructor. We can create a new promise using the key word <code>new</code> followed by the word <code>Promise</code> and followed by a parenthesis. Inside the parenthesis, it takes a <code>callback</code> function. The promise callback function has two parameters which are the <code>resolve</code> and <code>reject</code> functions.</p> <pre><code>// syntax\nconst promise = new Promise((resolve, reject) =&gt; {\n  resolve('success')\n  reject('failure')\n})\n</code></pre> <pre><code>// Promise\nconst doPromise = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    const skills = ['HTML', 'CSS', 'JS']\n    if (skills.length &gt; 0) {\n      resolve(skills)\n    } else {\n      reject('Something wrong has happened')\n    }\n  }, 2000)\n})\n\ndoPromise\n  .then(result =&gt; {\n    console.log(result)\n  })\n  .catch(error =&gt; console.log(error))\n</code></pre> <pre><code>[\"HTML\", \"CSS\", \"JS\"]\n</code></pre> <p>The above promise has been settled with resolve. Let us another example when the promise is settled with reject.</p> <pre><code>// Promise\nconst doPromise = new Promise((resolve, reject) =&gt; {\n  setTimeout(() =&gt; {\n    const skills = ['HTML', 'CSS', 'JS']\n    if (skills.includes('Node')) {\n      resolve('fullstack developer')\n    } else {\n      reject('Something wrong has happened')\n    }\n  }, 2000)\n})\n\ndoPromise\n  .then(result =&gt; {\n    console.log(result)\n  })\n  .catch(error =&gt; console.error(error))\n</code></pre> <pre><code>Something wrong has happened\n</code></pre>"},{"location":"18-day/#fetch-api","title":"Fetch API","text":"<p>The Fetch API provides an interface for fetching resources (including across the network). It will seem familiar to anyone who has used XMLHttpRequest, but the new API provides a more powerful and flexible feature set. In this challenge we will use fetch to request url and APIS. In addition to that let us see demonstrate use case of promises in accessing network resources using the fetch API.</p> <pre><code>const url = 'https://restcountries.com/v2/all' // countries api\nfetch(url)\n  .then(response =&gt; response.json()) // accessing the API data as JSON\n  .then(data =&gt; {\n    // getting the data\n    console.log(data)\n  })\n  .catch(error =&gt; console.error(error)) // handling error if something wrong happens\n</code></pre>"},{"location":"18-day/#async-and-await","title":"Async and Await","text":"<p>Async and await is an elegant way to handle promises. It is easy to understand and it clean to write.</p> <pre><code>const square = async function (n) {\n  return n * n\n}\n\nsquare(2)\n</code></pre> <pre><code>Promise\u00a0{&lt;resolved&gt;: 4}\n</code></pre> <p>The word async in front of a function means that function will return a promise. The above square function instead of a value it returns a promise.</p> <p>How do we access the value from the promise? To access the value from the promise, we will use the keyword await.</p> <pre><code>const square = async function (n) {\n  return n * n\n}\nconst value = await square(2)\nconsole.log(value)\n</code></pre> <pre><code>4\n</code></pre> <p>Now, as you can see from the above example writing async in front of a function create a promise and to get the value from a promise we use await. Async and await go together, one can not exist without the other.</p> <p>Let us fetch API data using both promise method and async and await method.</p> <ul> <li>promise</li> </ul> <pre><code>const url = 'https://restcountries.com/v2/all'\nfetch(url)\n  .then(response =&gt; response.json())\n  .then(data =&gt; {\n    console.log(data)\n  })\n  .catch(error =&gt; console.error(error))\n</code></pre> <ul> <li>async and await</li> </ul> <pre><code>const fetchData = async () =&gt; {\n  try {\n    const response = await fetch(url)\n    const countries = await response.json()\n    console.log(countries)\n  } catch (err) {\n    console.error(err)\n  }\n}\nconsole.log('===== async and await')\nfetchData()\n</code></pre> <p>\ud83c\udf15 You are real and you kept your promise and you reached to day 18. Keep your promise and settle the challenge with resolve. You are 18 steps ahead to your way to greatness. Now do some exercises for your brain and  muscles.</p>"},{"location":"18-day/#exercises","title":"Exercises","text":"<pre><code>const countriesAPI = 'https://restcountries.com/v2/all'\nconst catsAPI = 'https://api.thecatapi.com/v1/breeds'\n</code></pre>"},{"location":"18-day/#exercises-level-1","title":"Exercises: Level 1","text":"<ol> <li>Read the countries API using fetch and print the name of country, capital, languages, population and area.</li> </ol>"},{"location":"18-day/#exercises-level-2","title":"Exercises: Level 2","text":"<ol> <li>Print out all the cat names in to catNames variable.</li> </ol>"},{"location":"18-day/#exercises-level-3","title":"Exercises: Level 3","text":"<ol> <li>Read the cats api and find the average weight of cat in metric unit.</li> <li>Read the countries api and find out the 10 largest countries</li> <li>Read the countries api and count total number of languages in the world used as officials.</li> </ol> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"19-day/","title":"\ud83d\udcd8 Day 19","text":""},{"location":"19-day/#closure","title":"Closure","text":"<p>JavaScript allows writing function inside an outer function. We can write as many inner functions as we want. If inner function access the variables of outer function then it is called closure.</p> <pre><code>function outerFunction() {\n    let count = 0;\n    function innerFunction() {\n        count++\n        return count\n    }\n\n    return innerFunction\n}\nconst innerFunc = outerFunction()\n\nconsole.log(innerFunc())\nconsole.log(innerFunc())\nconsole.log(innerFunc())\n</code></pre> <pre><code>1\n2\n3\n</code></pre> <p>Let us more example of inner functions</p> <pre><code>function outerFunction() {\n    let count = 0;\n    function plusOne() {\n        count++\n        return count\n    }\n    function minusOne() {\n        count--\n        return count\n    }\n\n    return {\n        plusOne:plusOne(),\n        minusOne:minusOne()\n    }\n}\nconst innerFuncs = outerFunction()\n\nconsole.log(innerFuncs.plusOne)\nconsole.log(innerFuncs.minusOne)\n</code></pre> <pre><code>1\n0\n</code></pre> <p>\ud83c\udf15 You are making progress. Maintain your momentum,  keep the good work.  Now do some exercises for your brain and for your muscle.</p>"},{"location":"19-day/#exercises","title":"Exercises","text":""},{"location":"19-day/#exercises-level-1","title":"Exercises: Level 1","text":"<ol> <li>Create a closure which has one inner function</li> </ol>"},{"location":"19-day/#exercises-level-2","title":"Exercises: Level 2","text":"<ol> <li>Create a closure which has three inner functions</li> </ol>"},{"location":"19-day/#exercises-level-3","title":"Exercises: Level 3","text":"<ol> <li>Create a personAccount out function. It has firstname, lastname, incomes, expenses  inner variables. It has totalIncome, totalExpense, accountInfo,addIncome, addExpense and accountBalance inner functions. Incomes is a set of incomes and its description and expenses is also a set of expenses and its description.</li> </ol> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"20-day/","title":"\ud83d\udcd8 Day 20","text":""},{"location":"20-day/#writing-clean-code","title":"Writing clean code","text":""},{"location":"20-day/#javascript-style-guide","title":"JavaScript Style Guide","text":"<p>A JavaScript style guide is a set of standards that tells how JavaScript code should be written and organized. In this section, we will talk about JavaScript guides and how to write a clean code.</p> <p>JavaScript is a programming language and like human language it has syntax. The syntax of JavaScript has to be written following a certain style guideline for sake of convince and simplicity.</p>"},{"location":"20-day/#why-we-need-style-guide","title":"Why we need style guide","text":"<p>You have been coding alone for so long but now it seems to work in a team. It does not matter in anyway you write you code as long as it running, however when you work in team of 10 or 20 or more developer on one project and on the same code base, the code will be messy and hard to manage if there is no any guidelines to follow.</p> <p>You can develop your own guidelines and conventions or you can also adapt well developed guidelines. Let us the most common know guidelines. Most common JavaScript Style Guides</p> <ul> <li>Airbnb JavaScript Style Guide</li> <li>JavaScript Standard Style Guide</li> <li>Google JavaScript Style Guide</li> </ul>"},{"location":"20-day/#airbnb-javascript-style-guide","title":"Airbnb JavaScript Style Guide","text":"<p>Airbnb has one of the most popular JavaScript style guides on the internet. It covers nearly every aspect of JavaScript as well  and it is adopted by many developer and companies. You may checkout the Airbnb style guide. I would also recommend to try it. Their style is very easy to use and simple to understand.</p>"},{"location":"20-day/#standard-javascript-style-guide","title":"Standard JavaScript Style Guide","text":"<p>This is guideline is not as popular as Airbnb but it worth to look at it. They removed the semicolon in their style guide.</p>"},{"location":"20-day/#google-javascript-style-guide","title":"Google JavaScript Style Guide","text":"<p>I do not say much about Googles guideline and I did not use rather I would suggest you to have a look from this link.</p>"},{"location":"20-day/#javascript-coding-conventions","title":"JavaScript Coding Conventions","text":"<p>In this challenge also we used the general JavaScript coding writing conventions and guides. Coding conventions are style guidelines for programming which are developed by an individual, a team or a company.</p> <p>Coding conventions helps:</p> <ul> <li>to write clean code</li> <li>to improve code readability</li> <li>to improve code re-useability and maintainability</li> </ul> <p>Coding conventions includes</p> <ul> <li>Naming and declaration rules for variables</li> <li>Naming and declaration rules for functions</li> <li>Rules for the use of white space, indentation, and comments</li> <li>Programming practices and principles</li> </ul>"},{"location":"20-day/#conventions-use-in-30daysofjavascript","title":"Conventions use in 30DaysOfJavaScript","text":"<p>In this challenge we follow the regular JavaScript convention but I added also my preference of writing. </p> <ul> <li>We used camelCase for variables and functions.</li> <li>All variable names start with a letter.</li> <li>We chose to use const for constants, arrays, objects and functions. In stead of double quote, we chose to use single quote or backtick. Single quote is becoming trendy.</li> <li>We also removed semicolons from our code but it is a matter of personal preference.</li> <li>Space around arithmetic operators, assignment operators and after comma</li> <li>Arrow function instead of function declaration</li> <li>Explicit return instead of implicit return if the function is one liner</li> <li>No trailing comma in the last value of an object</li> <li>We prefer this +=, -=, = /=, *= instead of the longer version</li> <li>When we use console.log() it is good to print with a tag string to identify from where the console is coming</li> </ul>"},{"location":"20-day/#variables","title":"Variables","text":"<pre><code>let firstName = 'Asabeneh'\nlet lastName = 'Yetayeh'\nlet country = 'Finland'\nlet city = 'Helsinki'\n\nconst PI = Math.PI\nconst gravity = 9.81\n</code></pre>"},{"location":"20-day/#arrays","title":"Arrays","text":"<p>We chose to make array names plural</p> <ul> <li>names</li> <li>numbers</li> <li>countries</li> <li>languages</li> <li>skills</li> <li>fruits</li> <li>vegetables</li> </ul> <pre><code>// arrays\nconst names = ['Asabeneh', 'Mathias', 'Elias', 'Brook']\nconst numbers = [0, 3.14, 9.81, 37, 98.6, 100]\nconst countries = ['Finland', 'Denmark', 'Sweden', 'Norway', 'Iceland']\nconst languages = ['Amharic', 'Arabic', 'English', 'French', 'Spanish']\nconst skills = ['HTML', 'CSS', 'JavaScript', 'React', 'Python']\nconst fruits = ['banana', 'orange', 'mango', 'lemon']\nconst vegetables = ['Tomato', 'Potato', 'Cabbage', 'Onion', 'Carrot']\n</code></pre>"},{"location":"20-day/#functions","title":"Functions","text":"<p>By now you are very familiar function declaration, expression function, arrow function and anonymous function. In this challenge we tend to use arrow function instead of other functions. Arrow function is not a replacement for other functions. In addition, arrow functions and function declarations are not exactly the same. So you should know when to use and when not. I will cover the difference in detail in other sections. We will use explicit return instead of implicit return if the function is one liner</p> <pre><code>// function which return full name of a person\nconst printFullName = (firstName, lastName) =&gt; firstName + ' ' + lastName\n\n// function which calculates a square of a number\nconst square = (n) =&gt; n * n\n\n// a function which generate random hexa colors\nconst hexaColor = () =&gt; {\n  const str = '0123456789abcdef'\n  let hexa = '#'\n  let index\n  for (let i = 0; i &lt; 6; i++) {\n    index = Math.floor(Math.random() * str.length)\n    hexa += str[index]\n  }\n  return hexa\n}\n\n// a function which shows date and time\nconst showDateTime = () =&gt; {\n  const now = new Date()\n  const year = now.getFullYear()\n  const month = now.getMonth() + 1\n  const date = now.getDate()\n  let hours = now.getHours()\n  let minutes = now.getMinutes()\n  if (hours &lt; 10) {\n    hours = '0' + hours\n  }\n  if (minutes &lt; 10) {\n    minutes = '0' + minutes\n  }\n\n  const dateMonthYear = date + '.' + month + '.' + year\n  const time = hours + ':' + minutes\n  const fullTime = dateMonthYear + ' ' + time\n  return fullTime\n}\n</code></pre> <p>The <code>new Dat().toLocaleString()</code> can also be used to display current date time. The <code>toLocaleString()</code> methods takes different arguments. You may learn more about date and time from this link.</p>"},{"location":"20-day/#loops","title":"Loops","text":"<p>We coverer many types of loops in this challenges. The regular for loop, while loop, do while loop, for of loop, forEach loop and for in loop. Lets see how we use them:</p> <pre><code>for (let i = 0; i &lt; n; i++){\n    console.log()\n}\n\n// declaring an array variable\nconst names = ['Asabeneh', 'Mathias', 'Elias', 'Brook']\n\n// iterating an array using regular for loop\nlet len = names.length;\nfor(let i = 0; i &lt; len; i++){\n    console.log(names[i].toUpperCase())\n}\n\n\n// iterating an array using for of\nfor( const name of names) {\n    console.log(name.toUpperCase())\n}\n\n// iterating array using forEach \nnames.forEach((name) =&gt; name.toUpperCase())\n\n\nconst person = {\n  firstName: 'Asabeneh',\n  lastName: 'Yetayeh',\n  age: 250,\n  country: 'Finland',\n  city: 'Helsinki',\n  skills: ['HTML','CSS','JavaScript','React','Node','MongoDB','Python','D3.js'],\n  isMarried: true\n}\nfor(const key in person) {\n    console.log(key)\n}\n</code></pre>"},{"location":"20-day/#objects","title":"Objects","text":"<p>We declare object literal with const.</p> <pre><code>// declaring object literal\nconst person = {\n  firstName: 'Asabeneh',\n  lastName: 'Yetayeh',\n  age: 250,\n  country: 'Finland',\n  city: 'Helsinki',\n  skills: ['HTML','CSS','JavaScript','TypeScript', 'React','Node','MongoDB','Python','D3.js'],\n  isMarried: true\n}\n// iterating through object keys\nfor(const key in person) {\n    console.log(key, person[key])\n}\n</code></pre>"},{"location":"20-day/#conditional","title":"Conditional","text":"<p>We say if, if else, if else if else, switch and ternary operators in previous challenges.</p> <pre><code> // syntax\nif (condition) {\n  // this part of code run for truthy condition\n} else {\n  // this part of code run for false condition\n}\n</code></pre> <pre><code> // if else\nlet num = 3\nif (num &gt; 0) {\n  console.log(`${num} is a positive number`)\n} else {\n  console.log(`${num} is a negative number`)\n}\n//  3 is a positive number\n</code></pre> <pre><code> // if else if else if else\n\nlet a = 0\nif (a &gt; 0) {\n  console.log(`${a} is a positive number`)\n} else if (a &lt; 0) {\n  console.log(`${a} is a negative number`)\n} else if (a == 0) {\n  console.log(`${a} is zero`)\n} else {\n  console.log(`${a} is not a number`)\n}\n</code></pre> <pre><code> // Switch More Examples\nlet dayUserInput = prompt('What day is today ?')\nlet day = dayUserInput.toLowerCase()\n\nswitch (day) {\n  case 'monday':\n    console.log('Today is Monday')\n    break\n  case 'tuesday':\n    console.log('Today is Tuesday')\n    break\n  case 'wednesday':\n    console.log('Today is Wednesday')\n    break\n  case 'thursday':\n    console.log('Today is Thursday')\n    break\n  case 'friday':\n    console.log('Today is Friday')\n    break\n  case 'saturday':\n    console.log('Today is Saturday')\n    break\n  case 'sunday':\n    console.log('Today is Sunday')\n    break\n  default:\n    console.log('It is not a week day.')\n}\n</code></pre> <pre><code> // ternary\n\n let isRaining = true\nisRaining\n  ? console.log('You need a rain coat.')\n  : console.log('No need for a rain coat.')\n</code></pre>"},{"location":"20-day/#classes","title":"Classes","text":"<p>We declare class with CamelCase which starts with capital letter.</p> <pre><code>// syntax\nclass ClassName {\n    // code goes here\n}\n</code></pre> <pre><code>// defining class\nclass Person {\n  constructor(firstName, lastName) {\n    console.log(this) // Check the output from here\n    this.firstName = firstName\n    this.lastName = lastName\n  }\n}\n</code></pre> <p>Whatever style guide you follow be consistent. Follow some programming paradigms and design patterns. Remember, if you do not write you code in certain order or fashion it will be hard to read your code. So, do a favor for yourself or for someone who is going to read your code by writing readable code.</p> <p>\ud83c\udf15 You are tidy. Now, you knew how to write clean code, so anyone who know the English language can understand your code.  You are always progressing and you are a head of 20 steps to your way to greatness.</p> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"21-day/","title":"\ud83d\udcd9 Day 21","text":""},{"location":"21-day/#document-object-model-dom-day-1","title":"Document Object Model (DOM) - Day 1","text":"<p>HTML document is structured as a JavaScript Object. Every HTML element has a different properties which can help to manipulate it. It is possible to get, create, append or remove HTML elements using JavaScript. Check the examples below. Selecting HTML element using JavaScript is similar to selecting using CSS. To select an HTML element, we use tag name, id, class name or other attributes.</p>"},{"location":"21-day/#getting-element","title":"Getting Element","text":"<p>We can access already created element or elements using JavaScript. To access or get elements we use different methods. The code below has four h1 elements. Let us see the different methods to access the h1 elements.</p> <pre><code>&lt;!DOCTYPE html&gt;\n  &lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n      &lt;title&gt;Document Object Model&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n     &lt;h1 class='title' id='first-title'&gt;First Title&lt;/h1&gt;\n     &lt;h1 class='title' id='second-title'&gt;Second Title&lt;/h1&gt;\n     &lt;h1 class='title' id='third-title'&gt;Third Title&lt;/h1&gt;\n     &lt;h1&gt;&lt;/h1&gt;\n\n    &lt;/body&gt;\n  &lt;/html&gt;\n</code></pre>"},{"location":"21-day/#getting-elements-by-tag-name","title":"Getting elements by tag name","text":"<p>getElementsByTagName():takes a tag name as a string parameter and this method returns an HTMLCollection object. An HTMLCollection is an array like object of HTML elements. The length property provides the size of the collection. Whenever we use this method we access the individual elements using index or after loop through each individual items. An HTMLCollection does not support all array methods therefore we should use regular for loop instead of forEach.</p> <pre><code>// syntax\ndocument.getElementsByTagName('tagname')\n</code></pre> <pre><code>const allTitles = document.getElementsByTagName('h1')\n\nconsole.log(allTitles) //HTMLCollections\nconsole.log(allTitles.length) // 4\n\nfor (let i = 0; i &lt; allTitles.length; i++) {\n  console.log(allTitles[i]) // prints each elements in the HTMLCollection\n}\n</code></pre>"},{"location":"21-day/#getting-elements-by-class-name","title":"Getting elements by class name","text":"<p>getElementsByClassName() method returns an HTMLCollection object. An HTMLCollection is an array like list of HTML elements. The length property provides the size of the collection. It is possible to loop through all the HTMLCollection elements. See the example below</p> <pre><code>//syntax\ndocument.getElementsByClassName('classname')\n</code></pre> <pre><code>const allTitles = document.getElementsByClassName('title')\n\nconsole.log(allTitles) //HTMLCollections\nconsole.log(allTitles.length) // 4\n\nfor (let i = 0; i &lt; allTitles.length; i++) {\n  console.log(allTitles[i]) // prints each elements in the HTMLCollection\n}\n</code></pre>"},{"location":"21-day/#getting-an-element-by-id","title":"Getting an element by id","text":"<p>getElementsById() targets a single HTML element. We pass the id without # as an argument.</p> <pre><code>//syntax\ndocument.getElementById('id')\n</code></pre> <pre><code>let firstTitle = document.getElementById('first-title')\nconsole.log(firstTitle) // &lt;h1&gt;First Title&lt;/h1&gt;\n</code></pre>"},{"location":"21-day/#getting-elements-by-using-queryselector-methods","title":"Getting elements by using querySelector methods","text":"<p>The document.querySelector method can select an HTML or HTML elements by tag name, by id or by class name.</p> <p>querySelector: can be used to select HTML element by its tag name, id or class. If the tag name is used it selects only the first element.</p> <pre><code>let firstTitle = document.querySelector('h1') // select the first available h1 element\nlet firstTitle = document.querySelector('#first-title') // select id with first-title\nlet firstTitle = document.querySelector('.title') // select the first available element with class title\n</code></pre> <p>querySelectorAll: can be used to select html elements by its tag name or class. It returns a nodeList which is an array like object which supports array methods. We can use for loop or forEach to loop through each nodeList elements.</p> <pre><code>const allTitles = document.querySelectorAll('h1') # selects all the available h1 elements in the page\n\nconsole.log(allTitles.length) // 4\nfor (let i = 0; i &lt; allTitles.length; i++) {\n  console.log(allTitles[i])\n}\n\nallTitles.forEach(title =&gt; console.log(title))\nconst allTitles = document.querySelectorAll('.title') // the same goes for selecting using class\n</code></pre>"},{"location":"21-day/#adding-attribute","title":"Adding attribute","text":"<p>An attribute is added in the opening tag of HTML which gives additional information about the element. Common HTML attributes: id, class, src, style, href,disabled, title, alt. Lets add id and class for the fourth title.</p> <pre><code>const titles = document.querySelectorAll('h1')\ntitles[3].className = 'title'\ntitles[3].id = 'fourth-title'\n</code></pre>"},{"location":"21-day/#adding-attribute-using-setattribute","title":"Adding attribute using setAttribute","text":"<p>The setAttribute() method set any html attribute. It takes two parameters the type of the attribute and the name of the attribute. Let's add class and id attribute for the fourth title.</p> <pre><code>const titles = document.querySelectorAll('h1')\ntitles[3].setAttribute('class', 'title')\ntitles[3].setAttribute('id', 'fourth-title')\n</code></pre>"},{"location":"21-day/#adding-attribute-without-setattribute","title":"Adding attribute without setAttribute","text":"<p>We can use normal object setting method to set an attribute but this can not work for all elements. Some attributes are DOM object property and they can be set directly. For instance id and class</p> <pre><code>//another way to setting an attribute\ntitles[3].className = 'title'\ntitles[3].id = 'fourth-title'\n</code></pre>"},{"location":"21-day/#adding-class-using-classlist","title":"Adding class using classList","text":"<p>The class list method is a good method to append additional class. It does not override the original class if a class exists rather it adds additional class for the element.</p> <pre><code>//another way to setting an attribute: append the class, doesn't over ride\ntitles[3].classList.add('title', 'header-title')\n</code></pre>"},{"location":"21-day/#removing-class-using-remove","title":"Removing class using remove","text":"<p>Similar to adding we can also remove class from an element. We can remove a specific class from an element.</p> <pre><code>//another way to setting an attribute: append the class, doesn't over ride\ntitles[3].classList.remove('title', 'header-title')\n</code></pre>"},{"location":"21-day/#adding-text-to-html-element","title":"Adding Text to HTML element","text":"<p>An HTML is a build block of an opening tag, a closing tag and a text content. We can add a text content using the property textContent or *innerHTML.</p>"},{"location":"21-day/#adding-text-content-using-textcontent","title":"Adding Text content using textContent","text":"<p>The textContent property is used to add text to an HTML element.</p> <pre><code>const titles = document.querySelectorAll('h1')\ntitles[3].textContent = 'Fourth Title'\n</code></pre>"},{"location":"21-day/#adding-text-content-using-innerhtml","title":"Adding Text Content using innerHTML","text":"<p>Most people get confused between textContent and innerHTML. textContent is meant to add text to an HTML element, however innerHTML can add a text or HTML element or elements as a child.</p>"},{"location":"21-day/#text-content","title":"Text Content","text":"<p>We assign textContent HTML object property to a text</p> <pre><code>const titles = document.querySelectorAll('h1')\ntitles[3].textContent = 'Fourth Title'\n</code></pre>"},{"location":"21-day/#inner-html","title":"Inner HTML","text":"<p>We use innerHTML property when we like to replace or a completely new children content to a parent element. It value we assign is going to be a string of HTML elements.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;JavaScript for Everyone:DOM&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=\"wrapper\"&gt;\n        &lt;h1&gt;Asabeneh Yetayeh challenges in 2020&lt;/h1&gt;\n        &lt;h2&gt;30DaysOfJavaScript Challenge&lt;/h2&gt;\n        &lt;ul&gt;&lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;script&gt;\n    const lists = `\n    &lt;li&gt;30DaysOfPython Challenge Done&lt;/li&gt;\n            &lt;li&gt;30DaysOfJavaScript Challenge Ongoing&lt;/li&gt;\n            &lt;li&gt;30DaysOfReact Challenge Coming&lt;/li&gt;\n            &lt;li&gt;30DaysOfFullStack Challenge Coming&lt;/li&gt;\n            &lt;li&gt;30DaysOfDataAnalysis Challenge Coming&lt;/li&gt;\n            &lt;li&gt;30DaysOfReactNative Challenge Coming&lt;/li&gt;\n            &lt;li&gt;30DaysOfMachineLearning Challenge Coming&lt;/li&gt;`\n  const ul = document.querySelector('ul')\n  ul.innerHTML = lists\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>The innerHTML property can allow us also to remove all the children of a parent element. Instead of using removeChild() I would recommend the following method.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;JavaScript for Everyone:DOM&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=\"wrapper\"&gt;\n        &lt;h1&gt;Asabeneh Yetayeh challenges in 2020&lt;/h1&gt;\n        &lt;h2&gt;30DaysOfJavaScript Challenge&lt;/h2&gt;\n        &lt;ul&gt;\n            &lt;li&gt;30DaysOfPython Challenge Done&lt;/li&gt;\n            &lt;li&gt;30DaysOfJavaScript Challenge Ongoing&lt;/li&gt;\n            &lt;li&gt;30DaysOfReact Challenge Coming&lt;/li&gt;\n            &lt;li&gt;30DaysOfFullStack Challenge Coming&lt;/li&gt;\n            &lt;li&gt;30DaysOfDataAnalysis Challenge Coming&lt;/li&gt;\n            &lt;li&gt;30DaysOfReactNative Challenge Coming&lt;/li&gt;\n            &lt;li&gt;30DaysOfMachineLearning Challenge Coming&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n    &lt;script&gt;\n  const ul = document.querySelector('ul')\n  ul.innerHTML = ''\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"21-day/#adding-style","title":"Adding style","text":""},{"location":"21-day/#adding-style-color","title":"Adding Style Color","text":"<p>Let us add some style to our titles. If the element has even index we give it green color else red.</p> <pre><code>const titles = document.querySelectorAll('h1')\ntitles.forEach((title, i) =&gt; {\n  title.style.fontSize = '24px' // all titles will have 24px font size\n  if (i % 2 === 0) {\n    title.style.color = 'green'\n  } else {\n    title.style.color = 'red'\n  }\n})\n</code></pre>"},{"location":"21-day/#adding-style-background-color","title":"Adding Style Background Color","text":"<p>Let us add some style to our titles. If the element has even index we give it green color else red.</p> <pre><code>const titles = document.querySelectorAll('h1')\ntitles.forEach((title, i) =&gt; {\n  title.style.fontSize = '24px' // all titles will have 24px font size\n  if (i % 2 === 0) {\n    title.style.backgroundColor = 'green'\n  } else {\n    title.style.backgroundColor = 'red'\n  }\n})\n</code></pre>"},{"location":"21-day/#adding-style-font-size","title":"Adding Style Font Size","text":"<p>Let us add some style to our titles. If the element has even index we give it 20px else 30px</p> <pre><code>const titles = document.querySelectorAll('h1')\ntitles.forEach((title, i) =&gt; {\n  title.style.fontSize = '24px' // all titles will have 24px font size\n  if (i % 2 === 0) {\n    title.style.fontSize = '20px'\n  } else {\n    title.style.fontSize = '30px'\n  }\n})\n</code></pre> <p>As you have notice, the properties of css when we use it in JavaScript is going to be a camelCase. The  following CSS properties change from background-color to backgroundColor, font-size to fontSize, font-family to fontFamily, margin-bottom to marginBottom.</p> <p>\ud83c\udf15 Now,  you are fully charged with a super power, you have completed the most important and challenging part of the challenge and in general JavaScript. You learned DOM and now you have the capability to build and develop applications. Now do some exercises for your brain and for your muscle.</p>"},{"location":"21-day/#exercises","title":"Exercises","text":""},{"location":"21-day/#exercise-level-1","title":"Exercise: Level 1","text":"<ol> <li>Create an index.html file and put four p elements as above: Get the first paragraph by using document.querySelector(tagname) and tag name</li> <li>Get each of the the paragraph using document.querySelector('#id') and by their id</li> <li>Get all the p as nodeList using document.querySelectorAll(tagname) and by their tag name</li> <li>Loop through the nodeList and get the text content of each paragraph</li> <li>Set a text content to paragraph the fourth paragraph,Fourth Paragraph</li> <li>Set id and class attribute for all the paragraphs using different attribute setting methods</li> </ol>"},{"location":"21-day/#exercise-level-2","title":"Exercise: Level 2","text":"<ol> <li>Change stye of each paragraph using JavaScript(eg. color, background, border, font-size, font-family)</li> <li>Select all paragraphs and loop through each elements and give the first and third paragraph a color of green, and the second and the fourth paragraph a red color</li> <li>Set text content, id and class to each paragraph</li> </ol>"},{"location":"21-day/#exercise-level-3","title":"Exercise: Level 3","text":""},{"location":"21-day/#dom-mini-project-1","title":"DOM: Mini project 1","text":"<ol> <li> <p>Develop the following application, use the following HTML elements to get started with. You will get the same code on starter folder.  Apply all the styles and functionality using JavaScript only.</p> </li> <li> <p>The year color is changing every 1 second</p> </li> <li>The date and time background color is changing every on seconds</li> <li>Completed challenge has background green</li> <li>Ongoing challenge has background yellow</li> <li>Coming challenges have background red</li> </ol> <pre><code>&lt;!-- index.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;title&gt;JavaScript for Everyone:DOM&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=\"wrapper\"&gt;\n        &lt;h1&gt;Asabeneh Yetayeh challenges in 2020&lt;/h1&gt;\n        &lt;h2&gt;30DaysOfJavaScript Challenge&lt;/h2&gt;\n        &lt;ul&gt;\n            &lt;li&gt;30DaysOfPython Challenge Done&lt;/li&gt;\n            &lt;li&gt;30DaysOfJavaScript Challenge Ongoing&lt;/li&gt;\n            &lt;li&gt;30DaysOfReact Challenge Coming&lt;/li&gt;\n            &lt;li&gt;30DaysOfFullStack Challenge Coming&lt;/li&gt;\n            &lt;li&gt;30DaysOfDataAnalysis Challenge Coming&lt;/li&gt;\n            &lt;li&gt;30DaysOfReactNative Challenge Coming&lt;/li&gt;\n            &lt;li&gt;30DaysOfMachineLearning Challenge Coming&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p> <p></p> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"22-day/","title":"\ud83d\udcd9 Day 22","text":""},{"location":"22-day/#domdocument-object-model-day-2","title":"DOM(Document Object Model)-Day 2","text":""},{"location":"22-day/#creating-an-element","title":"Creating an Element","text":"<p>To create an HTML element we use tag name. Creating an HTML element using JavaScript is very simple and straight forward. We use the method document.createElement(). The method takes an HTML element tag name as a string parameter.</p> <pre><code>// syntax\ndocument.createElement('tagname')\n</code></pre> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;title&gt;Document Object Model:30 Days Of JavaScript&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n    &lt;script&gt;\n        let title = document.createElement('h1')\n        title.className = 'title'\n        title.style.fontSize = '24px'\n        title.textContent = 'Creating HTML element DOM Day 2'\n\n        console.log(title)\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"22-day/#creating-elements","title":"Creating elements","text":"<p>To create multiple elements we should use loop. Using loop we can create as many HTML elements as we want. After we create the element we can assign value to the different properties of the HTML object.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;title&gt;Document Object Model:30 Days Of JavaScript&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n    &lt;script&gt;\n        let title\n        for (let i = 0; i &lt; 3; i++) {\n            title = document.createElement('h1')\n            title.className = 'title'\n            title.style.fontSize = '24px'\n            title.textContent = i\n            console.log(title)\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"22-day/#appending-child-to-a-parent-element","title":"Appending child to a parent element","text":"<p>To see a created element on the HTML document we should append it to the parent as a child element. We can access the HTML document body using document.body. The document.body support the appendChild() method. See the example below.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;title&gt;Document Object Model:30 Days Of JavaScript&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n    &lt;script&gt;\n        // creating multiple elements and appending to parent element\n        let title\n        for (let i = 0; i &lt; 3; i++) {\n            title = document.createElement('h1')\n            title.className = 'title'\n            title.style.fontSize = '24px'\n            title.textContent = i\n            document.body.appendChild(title)\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"22-day/#removing-a-child-element-from-a-parent-node","title":"Removing a child element from a parent node","text":"<p>After creating an HTML, we may want to remove element or elements and we can use the removeChild() method.</p> <p>Example:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;title&gt;Document Object Model:30 Days Of JavaScript&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h1&gt;Removing child Node&lt;/h1&gt;\n    &lt;h2&gt;Asabeneh Yetayeh challenges in 2020&lt;/h1&gt;\n    &lt;ul&gt;\n        &lt;li&gt;30DaysOfPython Challenge Done&lt;/li&gt;\n        &lt;li&gt;30DaysOfJavaScript Challenge Done&lt;/li&gt;\n        &lt;li&gt;30DaysOfReact Challenge Coming&lt;/li&gt;\n        &lt;li&gt;30DaysOfFullStack Challenge Coming&lt;/li&gt;\n        &lt;li&gt;30DaysOfDataAnalysis Challenge Coming&lt;/li&gt;\n        &lt;li&gt;30DaysOfReactNative Challenge Coming&lt;/li&gt;\n        &lt;li&gt;30DaysOfMachineLearning Challenge Coming&lt;/li&gt;\n    &lt;/ul&gt;\n\n    &lt;script&gt;\n        const ul = document.querySelector('ul')\n        const lists = document.querySelectorAll('li')\n        for (const list of lists) {\n            ul.removeChild(list)\n\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>As we have see in the previous section there is a better way to eliminate all the inner HTML elements or the children of a parent element using the method innerHTML properties.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;title&gt;Document Object Model:30 Days Of JavaScript&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h1&gt;Removing child Node&lt;/h1&gt;\n    &lt;h2&gt;Asabeneh Yetayeh challenges in 2020&lt;/h1&gt;\n    &lt;ul&gt;\n        &lt;li&gt;30DaysOfPython Challenge Done&lt;/li&gt;\n        &lt;li&gt;30DaysOfJavaScript Challenge Done&lt;/li&gt;\n        &lt;li&gt;30DaysOfReact Challenge Coming&lt;/li&gt;\n        &lt;li&gt;30DaysOfFullStack Challenge Coming&lt;/li&gt;\n        &lt;li&gt;30DaysOfDataAnalysis Challenge Coming&lt;/li&gt;\n        &lt;li&gt;30DaysOfReactNative Challenge Coming&lt;/li&gt;\n        &lt;li&gt;30DaysOfMachineLearning Challenge Coming&lt;/li&gt;\n    &lt;/ul&gt;\n\n    &lt;script&gt;\n        const ul = document.querySelector('ul')\n        ul.innerHTML = ''\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>The above snippet of code cleared all the child elements.</p> <p>\ud83c\udf15 You are so special, you are progressing everyday. Now, you knew how to destroy a created DOM element when it is needed. You learned DOM and now you have the capability to build and develop applications. You are left with only eight days to your way to greatness. Now do some exercises for your brain and for your muscle.</p>"},{"location":"22-day/#exercises","title":"Exercises","text":""},{"location":"22-day/#exercises-level-1","title":"Exercises: Level 1","text":"<ol> <li>Create a div container on HTML document and create 100 to 100 numbers dynamically and append to the container div. </li> <li>Even numbers background is green</li> <li>Odd numbers background is yellow</li> <li>Prime numbers background is red</li> </ol>"},{"location":"22-day/#exercises-level-2","title":"Exercises: Level 2","text":"<ol> <li>Use the countries array to display all the countries.See the design</li> </ol>"},{"location":"22-day/#exercises-level-3","title":"Exercises: Level 3","text":"<p>Check the requirement of this project from both images(jpg and gif). All the data and CSS has been implemented using JavaScript only. The data is found on starter folder project_3. The drop down button has been created using details HTML element.</p> <p></p> <p></p> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"23-day/","title":"\ud83d\udcd9 Day 23","text":""},{"location":"23-day/#domdocument-object-model-day-3","title":"DOM(Document Object Model)-Day 3","text":""},{"location":"23-day/#event-listeners","title":"Event Listeners","text":"<p>Common HTML events:onclick, onchange, onmouseover, onmouseout, onkeydown, onkeyup, onload. We can add event listener method to any DOM object. We use addEventListener() method to listen different event types on HTML elements. The addEventListener() method takes two arguments, an event listener and a callback function.</p> <pre><code>selectedElement.addEventListener('eventlistner', function(e) {\n  // the activity you want to occur after the event will be in here\n})\n// or\n\nselectedElement.addEventListener('eventlistner', e =&gt; {\n  // the activity you want to occur after the event will be in here\n})\n</code></pre>"},{"location":"23-day/#click","title":"Click","text":"<p>To attach an event listener to an element, first we select the element then we attach the addEventListener method. The event listener takes event type and callback functions as argument.</p> <p>The following is an example of click type event.</p> <p>Example: click</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Document Object Model&lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;button&gt;Click Me&lt;/button&gt;\n\n    &lt;script&gt;\n      const button = document.querySelector('button')\n      button.addEventListener('click', e =&gt; {\n        console.log('e gives the event listener object:', e)\n        console.log('e.target gives the selected element: ', e.target)\n        console.log(\n          'e.target.textContent gives content of selected element: ',\n          e.target.textContent\n        )\n      })\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>An event can be also attached directly to the HTML element as inline script.</p> <p>Example: onclick</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Document Object Model&lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;button onclick=\"clickMe()\"&gt;Click Me&lt;/button&gt;\n    &lt;script&gt;\n      const clickMe = () =&gt; {\n        alert('We can attach event on HTML element')\n      }\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"23-day/#double-click","title":"Double Click","text":"<p>To attach an event listener to an element, first we select the element then we attach the addEventListener method. The event listener takes event type and callback functions as argument.</p> <p>The following is an example of click type event. Example: dblclick</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Document Object Model&lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;button&gt;Click Me&lt;/button&gt;\n    &lt;script&gt;\n      const button = document.querySelector('button')\n      button.addEventListener('dblclick', e =&gt; {\n        console.log('e gives the event listener object:', e)\n        console.log('e.target gives the selected element: ', e.target)\n        console.log(\n          'e.target.textContent gives content of selected element: ',\n          e.target.textContent\n        )\n      })\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"23-day/#mouse-enter","title":"Mouse enter","text":"<p>To attach an event listener to an element, first we select the element then we attach the addEventListener method. The event listener takes event type and callback functions as argument.</p> <p>The following is an example of click type event.</p> <p>Example: mouseenter</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Document Object Model&lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;button&gt;Click Me&lt;/button&gt;\n    &lt;script&gt;\n      const button = document.querySelector('button')\n      button.addEventListener('mouseenter', e =&gt; {\n        console.log('e gives the event listener object:', e)\n        console.log('e.target gives the selected element: ', e.target)\n        console.log(\n          'e.target.textContent gives content of selected element: ',\n          e.target.textContent\n        )\n      })\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>By now you are familiar with addEventListen method and how to attach event listener. There are many types of event listeners. But in this challenge we will focus the most common important events. List of events:</p> <ul> <li>click - when the element clicked</li> <li>dblclick - when the element double clicked</li> <li>mouseenter - when the mouse point enter to the element</li> <li>mouseleave - when the mouse pointer leave the element</li> <li>mousemove - when the mouse pointer move on the element</li> <li>mouseover - when the mouse pointer move on the element</li> <li>mouseout -when the mouse pointer out from the element</li> <li>input -when value enter to input field</li> <li>change -when value change on input field</li> <li>blur -when the element is not focused</li> <li>keydown - when a key is down</li> <li>keyup - when a key is up</li> <li>keypress - when we press any key</li> <li>onload - when the browser has finished loading a page</li> </ul> <p>Test the above event types by replacing event type in the above snippet code.</p>"},{"location":"23-day/#getting-value-from-an-input-element","title":"Getting value from an input element","text":"<p>We usually fill forms and forms accept data. Form fields are created using input HTML element. Let us build a small application which allow us to calculate body mas index of a person using two input fields, one button and one p tag.</p>"},{"location":"23-day/#input-value","title":"input value","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Document Object Model:30 Days Of JavaScript&lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;h1&gt;Body Mass Index Calculator&lt;/h1&gt;\n\n    &lt;input type=\"text\" id=\"mass\" placeholder=\"Mass in Kilogram\" /&gt;\n    &lt;input type=\"text\" id=\"height\" placeholder=\"Height in meters\" /&gt;\n    &lt;button&gt;Calculate BMI&lt;/button&gt;\n\n    &lt;script&gt;\n      const mass = document.querySelector('#mass')\n      const height = document.querySelector('#height')\n      const button = document.querySelector('button')\n\n      let bmi\n      button.addEventListener('click', () =&gt; {\n        bmi = mass.value / height.value ** 2\n        alert(`your bmi is ${bmi.toFixed(2)}`)\n        console.log(bmi)\n      })\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"23-day/#input-event-and-change","title":"input event and change","text":"<p>In the above example, we managed to get input values from two input fields by clicking button. How about if we want to get value without click the button. We can use the change or input event type to get data right away from the input field when the field is on focus. Let us see how we will handle that.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Document Object Model:30 Days Of JavaScript&lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;h1&gt;Data Binding using input or change event&lt;/h1&gt;\n\n    &lt;input type=\"text\" placeholder=\"say something\" /&gt;\n    &lt;p&gt;&lt;/p&gt;\n\n    &lt;script&gt;\n      const input = document.querySelector('input')\n      const p = document.querySelector('p')\n\n      input.addEventListener('input', e =&gt; {\n        p.textContent = e.target.value\n      })\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"23-day/#blur-event","title":"blur event","text":"<p>In contrast to input or change, the blur event occur when the input field is not on focus.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;title&gt;Document Object Model:30 Days Of JavaScript&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h1&gt;Giving feedback using blur event&lt;/h1&gt;\n\n    &lt;input type=\"text\" id=\"mass\" placeholder=\"say something\" /&gt;\n    &lt;p&gt;&lt;/p&gt;\n\n    &lt;script&gt;\n        const input = document.querySelector('input')\n        const p = document.querySelector('p')\n\n        input.addEventListener('blur', (e) =&gt; {\n            p.textContent = 'Field is required'\n            p.style.color = 'red'\n\n        })\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>"},{"location":"23-day/#keypress-keydow-and-keyup","title":"keypress, keydow and keyup","text":"<p>We can access all the key numbers of the keyboard using different event listener types. Let us use keypress and get the keyCode of each keyboard keys.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Document Object Model:30 Days Of JavaScript&lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;h1&gt;Key events: Press any key&lt;/h1&gt;\n\n    &lt;script&gt;\n      document.body.addEventListener('keypress', e =&gt; {\n        alert(e.keyCode)\n      })\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\ud83c\udf15 You are so special, you are progressing everyday. Now, you knew how handle any kind of DOM events. . You are left with only seven days to your way to greatness. Now do some exercises for your brain and for your muscle.</p>"},{"location":"23-day/#exercises","title":"Exercises","text":""},{"location":"23-day/#exercise-level-1","title":"Exercise: Level 1","text":"<ol> <li>Generating numbers and marking evens, odds and prime numbers with three different colors. See the image below.</li> </ol> <ol> <li>Generating the keyboard code code using even listener. The image below.</li> </ol> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"24-day/","title":"\ud83d\udcd9 Day 24","text":""},{"location":"24-day/#exercises","title":"Exercises","text":""},{"location":"24-day/#exercise-level-1","title":"Exercise: Level 1","text":"<ol> <li>Develop a small application which calculate a weight of an object in a certain planet. The gif image is not complete check the video in the starter file.</li> </ol> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"25-day/","title":"\ud83d\udcd9 Day 25","text":""},{"location":"25-day/#exercises","title":"Exercises","text":""},{"location":"25-day/#exercise-level-1","title":"Exercise: Level 1","text":"<ol> <li>Visualize the ten most populated countries and the ten most spoken languages in the world using DOM(HTML, CSS, JS)</li> </ol> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"26-day/","title":"\ud83d\udcd9 Day 26","text":""},{"location":"26-day/#exercises","title":"Exercises","text":""},{"location":"26-day/#exercise-level-1","title":"Exercise: Level 1","text":"<ol> <li>Visualize the countries array as follows</li> </ol> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"27-day/","title":"\ud83d\udcd9 Day 27","text":""},{"location":"27-day/#exercises","title":"Exercises","text":""},{"location":"27-day/#exercise-level-1","title":"Exercise: Level 1","text":"<ol> <li>Create the following using HTML, CSS, and JavaScript</li> </ol> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"28-day/","title":"\ud83d\udcd9 Day 28","text":""},{"location":"28-day/#exercises","title":"Exercises","text":""},{"location":"28-day/#exercise-level-1","title":"Exercise: Level 1","text":"<ol> <li>Create the following using HTML, CSS, and JavaScript</li> </ol> <p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"29-day/","title":"\ud83d\udcd9 Day 29","text":""},{"location":"29-day/#exercises","title":"Exercises","text":""},{"location":"29-day/#exercise-level-1","title":"Exercise: Level 1","text":"<ol> <li>Create the following animation using (HTML, CSS, JS)</li> </ol>"},{"location":"29-day/#exercise-level-2","title":"Exercise: Level 2","text":""},{"location":"29-day/#exercise-level-3","title":"Exercise: Level 3","text":"<p>\ud83c\udf89 CONGRATULATIONS ! \ud83c\udf89</p>"},{"location":"30-day/","title":"\ud83d\udcd9 Day 30","text":""},{"location":"30-day/#exercises","title":"Exercises","text":""},{"location":"30-day/#exercise-level-1","title":"Exercise: Level 1","text":"<ol> <li>Create the following animation using (HTML, CSS, JS)</li> </ol> <ol> <li>Validate the following form using regex.</li> </ol>"},{"location":"30-day/#exercise-level-2","title":"Exercise: Level 2","text":""},{"location":"30-day/#exercise-level-3","title":"Exercise: Level 3","text":"<p>\ud83c\udf15 Your journey to greatness completed successfully. You reached high level of greatness. Now, you are much greater than ever before. I knew what it takes to reach to this level and you made to this point. You are a real hero. Now, it is time to celebrate your success with a friend or with a family. I am looking forward to seeing you in an other challenge.</p>"},{"location":"30-day/#testimony","title":"Testimony","text":"<p>Now it is time support the author and  express your thoughts about the Author and 30DaysOfJavaScript. You can leave your testimonial on this link</p>"},{"location":"30-day/#support","title":"Support","text":"<p>You can support the author to produce more educational materials</p> <p></p> <p></p>"}]}